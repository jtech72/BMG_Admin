{"version":3,"file":"static/js/5756.59c4f730.chunk.js","mappings":"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","sources":["helpers/Pagination.js","helpers/PageTitle.js","pages/bmg/liveBids/SellerDetailsModal/SellerDetailsModal.js","pages/bmg/liveBids/LiveBidMonitoring.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'; // Assuming you are using React Router\r\n\r\nconst Pagination = ({ pageIndex, pageSize, totalPages, setPageIndex, onChangePageSize }) => {\r\n    useEffect(() => {\r\n        // Ensure pageIndex stays within bounds when totalPages changes\r\n        if (pageIndex > totalPages) {\r\n            setPageIndex(Math.max(1, totalPages)); // Keep in valid range\r\n        }\r\n    }, [pageIndex, totalPages, setPageIndex]);\r\n\r\n    return (\r\n        <div className=\"d-lg-flex align-items-center text-center pb-1 pt-2\">\r\n            {/* Page Size Selection */}\r\n            <div className=\"d-inline-block me-3\">\r\n                <label className=\"me-1\">Display :</label>\r\n                <select\r\n                    value={pageSize}\r\n                    onChange={(e) => {\r\n                        const newSize = Number(e.target.value);\r\n                        onChangePageSize(newSize);\r\n                        setPageIndex(1); // Reset to first page\r\n                    }}\r\n                    className=\"form-select d-inline-block w-auto\">\r\n                    {[10, 20, 50, 100].map((size) => (\r\n                        <option key={size} value={size}>\r\n                            {size}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            {/* Page Info */}\r\n            <span className=\"me-3\">\r\n                Page{' '}\r\n                <strong>\r\n                    {pageIndex} of {totalPages}\r\n                </strong>\r\n            </span>\r\n\r\n            {/* Go to Page Input */}\r\n            <label>Go to page: </label>\r\n            <input\r\n                type=\"number\"\r\n                placeholder={`${pageIndex}`}\r\n                min=\"1\"\r\n                max={totalPages}\r\n                onChange={(e) => {\r\n                    const enteredPage = Number(e.target.value);\r\n                    if (enteredPage >= 1 && enteredPage <= totalPages) {\r\n                        setPageIndex(enteredPage);\r\n                    }\r\n                }}\r\n                className=\"form-control ms-1 d-inline-block\"\r\n                style={{ width: '80px' }}\r\n            />\r\n\r\n            {/* Pagination Controls */}\r\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0 pe-4\">\r\n                {/* Previous Button */}\r\n                {pageIndex > 1 && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex - 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            Previous\r\n                        </Link>\r\n                    </li>\r\n                )}\r\n\r\n                {/* Page Number Buttons */}\r\n                {Array.from({ length: totalPages }).map((_, i) => {\r\n                    const page = i + 1; // Adjust index to start from 1\r\n                    const isCurrentPage = page === pageIndex;\r\n                    const isNearCurrent = page >= pageIndex - 1 && page <= pageIndex + 1;\r\n                    const isEdgePage = page === 1 || page === totalPages;\r\n\r\n                    if (totalPages <= 5 || isNearCurrent || isEdgePage) {\r\n                        return (\r\n                            <li\r\n                                key={page}\r\n                                className={`page-item ${isCurrentPage ? 'active' : ''}`}\r\n                                onClick={() => setPageIndex(page)}>\r\n                                <Link to=\"#\" className=\"page-link\">\r\n                                    {page}\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    } else if (\r\n                        (page === 2 && pageIndex >= 5) ||\r\n                        (page === totalPages - 1 && pageIndex <= totalPages - 4)\r\n                    ) {\r\n                        return (\r\n                            <li key={page} className=\"page-item disabled\">\r\n                                <Link to=\"#\" className=\"page-link px-0\">\r\n                                    ...\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    }\r\n\r\n                    return null;\r\n                })}\r\n\r\n                {/* Next Button */}\r\n                {pageIndex < totalPages && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex + 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            Next\r\n                        </Link>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","// @flow\r\nimport React from 'react';\r\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\r\n\r\ntype BreadcrumbItems = {\r\n    label: string,\r\n    path: string,\r\n    active?: boolean,\r\n};\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: Array<BreadcrumbItems>,\r\n    title: string,\r\n};\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\r\n                            {/* <Breadcrumb.Item href=\"/\" ><span className='custom-color'>Dashboard</span></Breadcrumb.Item> */}\r\n                            {props.breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <Breadcrumb.Item active key={index} >\r\n                                        <span className='custom-color'>{item.label}</span>\r\n                                    </Breadcrumb.Item>\r\n                                ) : (\r\n                                    <Breadcrumb.Item key={index} href={item.path} >\r\n                                        <span className='custom-color'>{item.label}</span>\r\n                                    </Breadcrumb.Item>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title custom-color\">{props.title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import React from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nconst SellerDetailsModal = ({ open, close, sellerDetails }) => {\r\n    return (\r\n        <Modal show={open} onHide={close}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Seller Details</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <div className=\"container\">\r\n                    {[\r\n                        { label: 'Name', value: `${sellerDetails?.name} ${sellerDetails?.lastName}` },\r\n                        { label: 'Email', value: sellerDetails?.email },\r\n                        { label: 'Phone Number', value: sellerDetails?.phoneNumber },\r\n                        { label: 'State', value: sellerDetails?.state },\r\n                        { label: 'City', value: sellerDetails?.city },\r\n                    ].map(({ label, value }, idx) => (\r\n                        <div className=\"row mb-2\" key={idx}>\r\n                            <div className=\"col-4 text-secondary fw-medium\">{label}</div>\r\n                            <div className=\"col-8 text-dark fw-semibold\">{value}</div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer className=\"d-flex justify-content-center\">\r\n                <Button className=\"btn btn-danger\" onClick={close}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default SellerDetailsModal;\r\n","import { useEffect, useState } from 'react';\r\nimport { Row, Col, Card, OverlayTrigger, Tooltip, Modal, Container, Carousel } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PageTitle from '../../../helpers/PageTitle';\r\nimport { Loading } from '../../../helpers/loader/Loading';\r\nimport { getLiveBidDataActions } from '../../../redux/actions';\r\nimport Pagination from '../../../helpers/Pagination';\r\nimport SellerDetailsModal from './SellerDetailsModal/SellerDetailsModal';\r\nimport { BsInfoCircle } from 'react-icons/bs';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FaRegEye } from 'react-icons/fa6';\r\n\r\nconst LiveBidMonitoring = () => {\r\n    const store = useSelector((state) => state);\r\n    const dispatch = useDispatch();\r\n    const [search, setSearch] = useState('');\r\n    const LiveBidData = store?.getLiveBidDataReducer?.leadData?.result;\r\n    const SoldAuctionLoading = store?.getLiveBidDataReducer?.loading;\r\n    const TotalRecords = store?.getLiveBidDataReducer?.leadData?.totalRecords;\r\n    const [pageIndex, setPageIndex] = useState(1);\r\n    const [pageSize, setPageSize] = useState(20);\r\n    const [totalPages, setTotalPages] = useState(Math.ceil(TotalRecords / pageSize));\r\n\r\n    useEffect(() => {\r\n        setTotalPages(Math.ceil(TotalRecords / pageSize));\r\n    }, [TotalRecords, pageSize]);\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getLiveBidDataActions({\r\n                pageSize,\r\n                pageIndex,\r\n            })\r\n        );\r\n    }, [dispatch, pageIndex, pageSize, search]);\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [selectedProduct, setSelectedProduct] = useState(null);\r\n\r\n    const handleProductClick = (product) => {\r\n        if (product) {\r\n            setSelectedProduct(product);\r\n            setShowModal(true);\r\n        }\r\n    };\r\n\r\n    // Format keys: Remove underscores, convert camelCase to words\r\n    const formatKey = (key) => {\r\n        return key\r\n            .replace(/_/g, ' ') // Replace underscores\r\n            .replace(/([a-z])([A-Z])/g, '$1 $2') // Convert camelCase\r\n            .replace(/\\b\\w/g, (char) => char.toUpperCase()); // Capitalize first letter\r\n    };\r\n\r\n    const formatDate = (dateString) => {\r\n        if (!dateString) return '';\r\n\r\n        const date = new Date(dateString);\r\n        return date.toLocaleString('en-US', {\r\n            weekday: 'short', // \"Thu\"\r\n            month: 'short', // \"Feb\"\r\n            day: '2-digit', // \"27\"\r\n            year: 'numeric', // \"2025\"\r\n            hour: '2-digit', // \"12\"\r\n            minute: '2-digit', // \"00\"\r\n            hour12: true, // \"AM/PM\"\r\n        });\r\n    };\r\n    const isValidISODate = (value) => {\r\n        if (typeof value !== 'string') return false; // Ensure it's a string before calling includes()\r\n\r\n        const date = new Date(value);\r\n        return !isNaN(date.getTime()) && value.includes('T');\r\n    };\r\n    const [sellerDetailModal, setSellerDetailModal] = useState(false);\r\n    const [sellerDetails, setSellerDetails] = useState('');\r\n    const readableDate = (isoDate) => {\r\n        return new Date(isoDate).toLocaleDateString('en-US', {\r\n            year: 'numeric',\r\n            month: 'long',\r\n            day: 'numeric',\r\n        });\r\n    };\r\n    const navigate = useNavigate();\r\n    return (\r\n        <>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    {\r\n                        label: 'Live Bid Monitoring',\r\n                        path: '/bmg/live-bids',\r\n                        active: true,\r\n                    },\r\n                ]}\r\n                title={`Live Bid Monitoring`}\r\n            />\r\n            <SellerDetailsModal\r\n                open={sellerDetailModal}\r\n                close={() => setSellerDetailModal(false)}\r\n                sellerDetails={sellerDetails}\r\n            />\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Card\r\n                        style={{\r\n                            boxShadow:\r\n                                'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset',\r\n                        }}>\r\n                        <Card.Body className=\"text-center\">\r\n                            <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                                <span className=\"px-3 py-1 bg-dark text-light rounded\">\r\n                                    Total Bid's: {TotalRecords || 0}\r\n                                </span>\r\n                                <div className=\"d-flex\">\r\n                                    {/* <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control w-auto me-1\"\r\n                                        placeholder=\"Search...\"\r\n                                        value={search}\r\n                                        onChange={(e) => setSearch(e.target.value)}\r\n                                    />\r\n                                    {search && (\r\n                                        <i\r\n                                            className=\"mdi mdi-backspace-outline text-danger fs-3\"\r\n                                            onClick={() => setSearch(\"\")}\r\n                                            style={{ cursor: \"pointer\" }}\r\n                                        ></i>\r\n                                    )} */}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {SoldAuctionLoading ? (\r\n                                <>\r\n                                    <Loading />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    {LiveBidData && LiveBidData?.length > 0 ? (\r\n                                        <>\r\n                                            <div className=\"table-responsive\">\r\n                                                <table className=\"table table-hover bg-white\">\r\n                                                    <thead>\r\n                                                        <tr className=\"text-nowrap text-dark\">\r\n                                                            <th scope=\"col\">\r\n                                                                <i className=\"mdi mdi-merge\"></i>\r\n                                                            </th>\r\n                                                            <th scope=\"col\" className=\"text-start\">\r\n                                                                Seller Name\r\n                                                            </th>\r\n                                                            <th scope=\"col\" className=\"text-start\">\r\n                                                                Product Name\r\n                                                            </th>\r\n                                                            <th scope=\"col\" className=\"text-start\">\r\n                                                                Start Date\r\n                                                            </th>\r\n                                                            <th scope=\"col\" className=\"text-start\">\r\n                                                                End Date\r\n                                                            </th>\r\n                                                            <th scope=\"col\" className=\"text-start\">\r\n                                                                Start Bid Price\r\n                                                            </th>\r\n                                                            <th scope=\"col\" className=\"text-start\">\r\n                                                                Highest Bid\r\n                                                            </th>\r\n                                                            <th scope=\"col\" className=\"text-start\">\r\n                                                                No. of Bids\r\n                                                            </th>\r\n                                                            <th scope=\"col\">Details</th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {LiveBidData?.map((data, index) => (\r\n                                                            <tr\r\n                                                                key={data._id || index} // style={{\r\n                                                                //     cursor: 'pointer',\r\n                                                                // }}\r\n                                                                className=\"text-nowrap\">\r\n                                                                <td>{(pageIndex - 1) * pageSize + index + 1}</td>\r\n                                                                <td className=\"text-capitalize text-start fw-bold\">\r\n                                                                    <OverlayTrigger\r\n                                                                        placement=\"left\"\r\n                                                                        overlay={\r\n                                                                            <Tooltip id=\"overlay-example\">\r\n                                                                                View Detail's\r\n                                                                            </Tooltip>\r\n                                                                        }>\r\n                                                                        <b>\r\n                                                                            <span\r\n                                                                                onClick={() => {\r\n                                                                                    setSellerDetailModal(true);\r\n                                                                                    setSellerDetails(\r\n                                                                                        data?.product?.userId\r\n                                                                                    );\r\n                                                                                }}\r\n                                                                                className=\" text-start\"\r\n                                                                                style={{ cursor: 'pointer', color: 'green', textDecoration: 'underline' }}>\r\n                                                                                {data?.product?.userId?.name}\r\n                                                                            </span>\r\n                                                                        </b>\r\n                                                                    </OverlayTrigger>\r\n                                                                </td>\r\n                                                                <td\r\n                                                                    className=\"text-uppercase text-start fw-bold\"\r\n                                                                // style={{ cursor: 'pointer' }}\r\n                                                                >\r\n                                                                    <b title={data?.product?.Product_Name || 'N/A'}>\r\n                                                                        {data?.product?.Product_Name ? (\r\n                                                                            <span>\r\n                                                                                {data?.product?.Product_Name.length > 20\r\n                                                                                    ? data?.product?.Product_Name.substring(\r\n                                                                                        0,\r\n                                                                                        20\r\n                                                                                    ) + '...'\r\n                                                                                    : data?.product?.Product_Name}\r\n                                                                            </span>\r\n                                                                        ) : (\r\n                                                                            <span className=\"d-flex justify-content-center text-dark\">\r\n                                                                                N/A\r\n                                                                            </span>\r\n                                                                        )}\r\n                                                                    </b>\r\n\r\n                                                                    {/* </OverlayTrigger> */}\r\n                                                                </td>\r\n\r\n                                                                <td className=\"text-uppercase text-start fw-bold\">\r\n                                                                    {data?.product?.startBidDateTime ? (\r\n                                                                        <span>\r\n                                                                            {readableDate(\r\n                                                                                data?.product?.startBidDateTime\r\n                                                                            )}\r\n                                                                        </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center text-dark\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n\r\n                                                                <td className=\"text-uppercase text-start fw-bold\">\r\n                                                                    {data?.product?.endBidDateTime ? (\r\n                                                                        <span>\r\n                                                                            {readableDate(\r\n                                                                                data?.product?.endBidDateTime\r\n                                                                            )}\r\n                                                                        </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center text-dark\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n\r\n                                                                <td className=\"fw-bold text-start\">\r\n                                                                    {data?.product ? (\r\n                                                                        <span className=\"fw-semibold text-dark\">\r\n                                                                            {data?.product?.Start_Bid_Price}\r\n                                                                        </span>\r\n                                                                    ) : (\r\n                                                                        <span>N/A</span>\r\n                                                                    )}\r\n                                                                </td>\r\n\r\n                                                                <td className=\"fw-bold text-start\">\r\n                                                                    {data?.product?.highBidingAmount ? (\r\n                                                                        <span>{data?.product?.highBidingAmount}</span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center text-dark\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n\r\n                                                                <td className=\"fw-bold text-start\">\r\n                                                                    {data?.product?.totalBidders ? (\r\n                                                                        <span>{data?.product?.totalBidders}</span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center text-dark\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className=\"fw-bold text-start\">\r\n                                                                    <FaRegEye\r\n                                                                        onClick={() => {\r\n                                                                            navigate(\r\n                                                                                `/bmg/live-bids/live-monitoring/${data?.product?._id}`,\r\n                                                                                {\r\n                                                                                    state: { product: data?.product },\r\n                                                                                }\r\n                                                                            );\r\n                                                                        }}\r\n                                                                        size={18}\r\n                                                                        cursor={'pointer'}\r\n                                                                        className=\"me-1\"\r\n                                                                        style={{\r\n                                                                            color: 'green', // optional: makes it look like a link/info icon\r\n                                                                        }}\r\n                                                                    />\r\n\r\n                                                                    <BsInfoCircle\r\n                                                                        size={17}\r\n                                                                        onClick={() =>\r\n                                                                            navigate(\r\n                                                                                `/bmg/items/${data?.product?._id}`,\r\n                                                                                {\r\n                                                                                    state: { product: data?.product },\r\n                                                                                }\r\n                                                                            )\r\n                                                                        }\r\n                                                                        style={{\r\n                                                                            // marginRight: '5px',\r\n                                                                            cursor: 'pointer',\r\n                                                                            color: 'green', // optional: makes it look like a link/info icon\r\n                                                                        }}\r\n                                                                    />\r\n                                                                </td>\r\n                                                            </tr>\r\n                                                        ))}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </>\r\n                                    ) : (\r\n                                        <div\r\n                                            className=\"text-center d-flex align-items-center justify-content-center\"\r\n                                            style={{ height: '30vh' }}>\r\n                                            <code className=\"fs-4\">No Bid's found.</code>\r\n                                        </div>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                            {TotalRecords > 20 && (\r\n                                <Pagination\r\n                                    pageIndex={pageIndex}\r\n                                    pageSize={pageSize}\r\n                                    totalPages={totalPages}\r\n                                    setPageIndex={setPageIndex}\r\n                                    onChangePageSize={setPageSize}\r\n                                />\r\n                            )}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Modal show={showModal} onHide={() => setShowModal(false)} centered size=\"lg\">\r\n                <Modal.Header className=\"px-2 py-1 text-light\" style={{ backgroundColor: '#008003' }}>\r\n                    <Modal.Title className=\"fw-semibold\">Product Details</Modal.Title>\r\n                    <i\r\n                        className=\"mdi mdi-close fs-3\"\r\n                        onClick={() => setShowModal(false)}\r\n                        style={{ cursor: 'pointer' }}></i>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {selectedProduct && (\r\n                        <Container>\r\n                            {/* Image Section */}\r\n                            {selectedProduct.image?.length > 0 && (\r\n                                <Carousel interval={5000} className=\"mb-3 shadow-sm rounded\">\r\n                                    {selectedProduct.image.map((img, index) => (\r\n                                        <Carousel.Item key={index}>\r\n                                            <img\r\n                                                src={img}\r\n                                                alt={`Slide ${index}`}\r\n                                                className=\"d-block w-100 rounded\"\r\n                                                style={{\r\n                                                    maxHeight: '400px',\r\n                                                    objectFit: 'contain',\r\n                                                    boxShadow: '0px 4px 10px rgba(0,0,0,0.2)',\r\n                                                }}\r\n                                            />\r\n                                        </Carousel.Item>\r\n                                    ))}\r\n                                </Carousel>\r\n                            )}\r\n\r\n                            <Row className=\"border rounded p-3 bg-light\">\r\n                                {Object.entries(selectedProduct)\r\n                                    .filter(\r\n                                        ([key, value]) =>\r\n                                            !['_id', 'createdAt', 'updatedAt', 'image', 'status'].includes(key) && // Remove unnecessary fields\r\n                                            !(typeof value === 'string' && /^[0-9a-fA-F]{24}$/.test(value)) && // Remove any 24-char hex ID\r\n                                            value // Ensure it's not empty\r\n                                    )\r\n                                    .map(([key, value]) => {\r\n                                        let displayValue;\r\n\r\n                                        if (Array.isArray(value)) {\r\n                                            displayValue = (\r\n                                                <ul className=\"mb-0\">\r\n                                                    {value\r\n                                                        .filter(\r\n                                                            (item) =>\r\n                                                                !(\r\n                                                                    typeof item === 'string' &&\r\n                                                                    /^[0-9a-fA-F]{24}$/.test(item)\r\n                                                                )\r\n                                                        ) // Remove ID-like values inside arrays\r\n                                                        .map((item, index) => (\r\n                                                            <li key={index}>\r\n                                                                {typeof item === 'object'\r\n                                                                    ? JSON.stringify(item, null, 2)\r\n                                                                    : item}\r\n                                                            </li>\r\n                                                        ))}\r\n                                                </ul>\r\n                                            );\r\n                                        } else if (typeof value === 'object' && value !== null) {\r\n                                            displayValue = (\r\n                                                <ul className=\"mb-0\">\r\n                                                    {Object.entries(value)\r\n                                                        .filter(\r\n                                                            ([subKey, subValue]) =>\r\n                                                                ![\r\n                                                                    '_id',\r\n                                                                    'createdAt',\r\n                                                                    'updatedAt',\r\n                                                                    'status',\r\n                                                                    'image',\r\n                                                                ].includes(subKey) &&\r\n                                                                !(\r\n                                                                    typeof subValue === 'string' &&\r\n                                                                    /^[0-9a-fA-F]{24}$/.test(subValue)\r\n                                                                )\r\n                                                        )\r\n                                                        .map(([subKey, subValue]) => (\r\n                                                            <li key={subKey}>\r\n                                                                <strong>{formatKey(subKey)}:</strong>{' '}\r\n                                                                {isValidISODate(subValue)\r\n                                                                    ? formatDate(subValue)\r\n                                                                    : subValue}\r\n                                                            </li>\r\n                                                        ))}\r\n                                                </ul>\r\n                                            );\r\n                                        } else if (typeof value === 'string' && isValidISODate(value)) {\r\n                                            displayValue = formatDate(value);\r\n                                        } else {\r\n                                            displayValue = value;\r\n                                        }\r\n\r\n                                        return (\r\n                                            <Col md={6} key={key} className=\"mb-3\">\r\n                                                <strong className=\"text-muted\">{formatKey(key)}</strong>\r\n                                                <div className=\"fw-bold\">{displayValue}</div>\r\n                                            </Col>\r\n                                        );\r\n                                    })}\r\n                            </Row>\r\n                            {/* Product Details */}\r\n                            {/* <Row className=\"border rounded p-3 bg-light\">\r\n                                {Object.entries(selectedProduct)\r\n                                    .filter(([key, value]) =>\r\n                                        ![\"_id\", \"createdAt\", \"updatedAt\", \"image\"].includes(key) &&\r\n                                        !/^[0-9a-fA-F]{24}$/.test(value) && value // Remove ID fields & empty values\r\n                                    )\r\n                                    .map(([key, value]) => (\r\n                                        <Col md={6} key={key} className=\"mb-3\">\r\n                                            <strong className=\"text-muted\">{formatKey(key)}</strong>\r\n                                            <div className=\"fw-bold\">{typeof value === \"object\" ? JSON.stringify(value) : value}</div>\r\n                                        </Col>\r\n                                    ))}\r\n                            </Row> */}\r\n                        </Container>\r\n                    )}\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LiveBidMonitoring;\r\n"],"names":["_ref","pageIndex","pageSize","totalPages","setPageIndex","onChangePageSize","useEffect","Math","max","_jsxs","className","children","_jsx","value","onChange","e","newSize","Number","target","map","size","type","placeholder","concat","min","enteredPage","style","width","onClick","Link","to","Array","from","length","_","i","page","isCurrentPage","props","Row","Col","Breadcrumb","listProps","breadCrumbItems","item","index","active","Item","label","href","path","title","open","close","sellerDetails","Modal","show","onHide","Header","closeButton","Title","Body","name","lastName","email","phoneNumber","state","city","_ref2","idx","Footer","Button","LiveBidMonitoring","_store$getLiveBidData","_store$getLiveBidData2","_store$getLiveBidData3","_store$getLiveBidData4","_store$getLiveBidData5","_selectedProduct$imag","store","useSelector","dispatch","useDispatch","search","setSearch","useState","LiveBidData","getLiveBidDataReducer","leadData","result","SoldAuctionLoading","loading","TotalRecords","totalRecords","setPageSize","setTotalPages","ceil","getLiveBidDataActions","showModal","setShowModal","selectedProduct","setSelectedProduct","formatKey","key","replace","char","toUpperCase","formatDate","dateString","Date","toLocaleString","weekday","month","day","year","hour","minute","hour12","isValidISODate","date","isNaN","getTime","includes","sellerDetailModal","setSellerDetailModal","setSellerDetails","readableDate","isoDate","toLocaleDateString","navigate","useNavigate","_Fragment","PageTitle","SellerDetailsModal","xs","Card","boxShadow","Loading","scope","data","_data$product2","_data$product2$userId","_data$product3","_data$product4","_data$product5","_data$product6","_data$product7","_data$product8","_data$product9","_data$product0","_data$product1","_data$product10","_data$product11","_data$product12","_data$product13","_data$product14","OverlayTrigger","placement","overlay","Tooltip","id","_data$product","product","userId","cursor","color","textDecoration","Product_Name","substring","startBidDateTime","endBidDateTime","Start_Bid_Price","highBidingAmount","totalBidders","FaRegEye","_data$product15","_id","BsInfoCircle","_data$product16","height","Pagination","centered","backgroundColor","Container","image","Carousel","interval","img","src","alt","maxHeight","objectFit","Object","entries","filter","test","displayValue","isArray","JSON","stringify","_ref3","subKey","subValue","_ref4","md"],"sourceRoot":""}