{"version":3,"file":"static/js/1673.43f2548e.chunk.js","mappings":"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","sources":["pages/bmg/dashboard/Dashboard.js","helpers/Pagination.js","helpers/PageTitle.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { Row, Col, Card, Table } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PageTitle from '../../../helpers/PageTitle';\r\nimport { getDashboardActions, getRecentRegistrationsForDashboardActions } from '../../../redux/actions';\r\nimport { FaUsers, FaLayerGroup, FaTags, FaUserShield, FaGavel, FaMoneyBillWave } from 'react-icons/fa';\r\nimport { Loading } from '../../../helpers/loader/Loading';\r\nimport { AiOutlineLineChart } from 'react-icons/ai';\r\nimport Pagination from '../../../helpers/Pagination';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Dashboard = () => {\r\n    const store = useSelector((state) => state);\r\n    const dashboardData = store?.dashboardDataReducer?.dashboardData;\r\n    const getRecentRegistrationsForDashboard = store?.getRecentRegistrationsForDashboardReducer;\r\n\r\n    const dashboardLoading = store?.dashboardDataReducer?.loading;\r\n    const dispatch = useDispatch();\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(5);\r\n    useEffect(() => {\r\n        dispatch(getDashboardActions());\r\n        dispatch(\r\n            getRecentRegistrationsForDashboardActions({\r\n                page,\r\n                limit,\r\n            })\r\n        );\r\n    }, [dispatch, page]);\r\n\r\n    const dashboardItems = [\r\n        { title: 'Total Users', value: dashboardData?.totalUser, icon: <FaUsers />, color: '' },\r\n        { title: 'Total Categories', value: dashboardData?.totalCategory, icon: <FaLayerGroup />, color: '' },\r\n        { title: 'Total Sub-Categories', value: dashboardData?.totalSubCategory, icon: <FaTags />, color: '' },\r\n        { title: 'Total Admins', value: dashboardData?.totalAdmin, icon: <FaUserShield />, color: '' },\r\n        { title: 'Auction', value: dashboardData?.totalLiveAuction, icon: <FaGavel />, color: '' },\r\n        { title: 'Sales', value: dashboardData?.totalUpComingAuction, icon: <AiOutlineLineChart />, color: '' },\r\n    ];\r\n    const navigate = useNavigate();\r\n    return (\r\n        <>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'BMG Dashboard', path: '/bmg/dashboard' },\r\n                    { label: 'Dashboard', path: '/bmg/dashboard', active: true },\r\n                ]}\r\n                title={'Dashboard'}\r\n            />\r\n            {dashboardLoading ? (\r\n                <Loading />\r\n            ) : (\r\n                <Row className=\"g-4\">\r\n                    {dashboardItems?.map((item, index) => (\r\n                        <Col key={index} md={6} lg={4}>\r\n                            <Card className={`shadow border-0 bg-${item.color} text-dark`}>\r\n                                <Card.Body className=\"d-flex align-items-center justify-content-between\">\r\n                                    <div>\r\n                                        <h6 className=\"fw-semibold\">{item.title}</h6>\r\n                                        <h2 className=\"fw-bold\">{item.value}</h2>\r\n                                    </div>\r\n                                    <div className=\"fs-1\">{item.icon}</div>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                    ))}\r\n                    <div className=\"table-responsive\">\r\n                        <Table bordered hover className=\"bg-white text-center\">\r\n                            <thead className=\"\">\r\n                                <tr className=\"text-nowrap text-secondary\">\r\n                                    <th>\r\n                                        <i className=\"mdi mdi-merge\"></i>\r\n                                    </th>\r\n                                    <th className=\"text-start\">Name</th>\r\n                                    <th className=\"text-start\">Email</th>\r\n                                    <th className=\"text-start\">Phone Number</th>\r\n                                    <th className=\"text-start\">Role</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {getRecentRegistrationsForDashboard?.dashboardData?.allUsers?.map((data, index) => (\r\n                                    <tr\r\n                                        style={{\r\n                                            cursor: 'pointer',\r\n                                        }}\r\n                                        key={data._id || index}\r\n                                        className=\"fw-bold\">\r\n                                        <td>{(page - 1) * limit + index + 1}</td>\r\n\r\n                                        <td className=\"text-start\">\r\n                                            {data?.name ? `${data?.name} ${data?.lastName || ''}` : 'N/A'}\r\n                                        </td>\r\n                                        <td className=\"text-start\">{data?.email ? `${data?.email}` : 'N/A'}</td>\r\n                                        <td className=\"text-start\">\r\n                                            {data?.phoneNumber ? `${data?.phoneNumber}` : 'N/A'}\r\n                                        </td>\r\n                                        <td className=\"text-start text-capitalize\">{data?.role}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                        {/* <Pagination\r\n                            pageIndex={page}\r\n                            pageSize={limit}\r\n                            totalPages={getRecentRegistrationsForDashboard?.dashboardData?.totalPages}\r\n                            setPageIndex={setPage}\r\n                            onChangePageSize={setLimit}\r\n                        /> */}\r\n                    </div>\r\n                </Row>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'; // Assuming you are using React Router\r\n\r\nconst Pagination = ({ pageIndex, pageSize, totalPages, setPageIndex, onChangePageSize }) => {\r\n    useEffect(() => {\r\n        // Ensure pageIndex stays within bounds when totalPages changes\r\n        if (pageIndex > totalPages) {\r\n            setPageIndex(Math.max(1, totalPages)); // Keep in valid range\r\n        }\r\n    }, [pageIndex, totalPages, setPageIndex]);\r\n\r\n    return (\r\n        <div className=\"d-lg-flex align-items-center text-center pb-1 pt-2\">\r\n            {/* Page Size Selection */}\r\n            <div className=\"d-inline-block me-3\">\r\n                <label className=\"me-1\">Display :</label>\r\n                <select\r\n                    value={pageSize}\r\n                    onChange={(e) => {\r\n                        const newSize = Number(e.target.value);\r\n                        onChangePageSize(newSize);\r\n                        setPageIndex(1); // Reset to first page\r\n                    }}\r\n                    className=\"form-select d-inline-block w-auto\">\r\n                    {[10, 20, 50, 100].map((size) => (\r\n                        <option key={size} value={size}>\r\n                            {size}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            {/* Page Info */}\r\n            <span className=\"me-3\">\r\n                Page{' '}\r\n                <strong>\r\n                    {pageIndex} of {totalPages}\r\n                </strong>\r\n            </span>\r\n\r\n            {/* Go to Page Input */}\r\n            <label>Go to page: </label>\r\n            <input\r\n                type=\"number\"\r\n                placeholder={`${pageIndex}`}\r\n                min=\"1\"\r\n                max={totalPages}\r\n                onChange={(e) => {\r\n                    const enteredPage = Number(e.target.value);\r\n                    if (enteredPage >= 1 && enteredPage <= totalPages) {\r\n                        setPageIndex(enteredPage);\r\n                    }\r\n                }}\r\n                className=\"form-control ms-1 d-inline-block\"\r\n                style={{ width: '80px' }}\r\n            />\r\n\r\n            {/* Pagination Controls */}\r\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0 pe-4\">\r\n                {/* Previous Button */}\r\n                {pageIndex > 1 && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex - 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            Previous\r\n                        </Link>\r\n                    </li>\r\n                )}\r\n\r\n                {/* Page Number Buttons */}\r\n                {Array.from({ length: totalPages }).map((_, i) => {\r\n                    const page = i + 1; // Adjust index to start from 1\r\n                    const isCurrentPage = page === pageIndex;\r\n                    const isNearCurrent = page >= pageIndex - 1 && page <= pageIndex + 1;\r\n                    const isEdgePage = page === 1 || page === totalPages;\r\n\r\n                    if (totalPages <= 5 || isNearCurrent || isEdgePage) {\r\n                        return (\r\n                            <li\r\n                                key={page}\r\n                                className={`page-item ${isCurrentPage ? 'active' : ''}`}\r\n                                onClick={() => setPageIndex(page)}>\r\n                                <Link to=\"#\" className=\"page-link\">\r\n                                    {page}\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    } else if (\r\n                        (page === 2 && pageIndex >= 5) ||\r\n                        (page === totalPages - 1 && pageIndex <= totalPages - 4)\r\n                    ) {\r\n                        return (\r\n                            <li key={page} className=\"page-item disabled\">\r\n                                <Link to=\"#\" className=\"page-link px-0\">\r\n                                    ...\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    }\r\n\r\n                    return null;\r\n                })}\r\n\r\n                {/* Next Button */}\r\n                {pageIndex < totalPages && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex + 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            Next\r\n                        </Link>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","// @flow\r\nimport React from 'react';\r\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\r\n\r\ntype BreadcrumbItems = {\r\n    label: string,\r\n    path: string,\r\n    active?: boolean,\r\n};\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: Array<BreadcrumbItems>,\r\n    title: string,\r\n};\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\r\n                            {/* <Breadcrumb.Item href=\"/\" ><span className='custom-color'>Dashboard</span></Breadcrumb.Item> */}\r\n                            {props.breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <Breadcrumb.Item active key={index} >\r\n                                        <span className='custom-color'>{item.label}</span>\r\n                                    </Breadcrumb.Item>\r\n                                ) : (\r\n                                    <Breadcrumb.Item key={index} href={item.path} >\r\n                                        <span className='custom-color'>{item.label}</span>\r\n                                    </Breadcrumb.Item>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title custom-color\">{props.title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n"],"names":["Dashboard","_store$dashboardDataR","_store$dashboardDataR2","_getRecentRegistratio","_getRecentRegistratio2","store","useSelector","state","dashboardData","dashboardDataReducer","getRecentRegistrationsForDashboard","getRecentRegistrationsForDashboardReducer","dashboardLoading","loading","dispatch","useDispatch","page","setPage","useState","limit","setLimit","useEffect","getDashboardActions","getRecentRegistrationsForDashboardActions","dashboardItems","title","value","totalUser","icon","_jsx","FaUsers","color","totalCategory","FaLayerGroup","totalSubCategory","FaTags","totalAdmin","FaUserShield","totalLiveAuction","FaGavel","totalUpComingAuction","AiOutlineLineChart","useNavigate","_jsxs","_Fragment","children","PageTitle","breadCrumbItems","label","path","active","Loading","Row","className","map","item","index","Col","md","lg","Card","Body","Table","bordered","hover","allUsers","data","style","cursor","name","lastName","email","phoneNumber","role","_id","_ref","pageIndex","pageSize","totalPages","setPageIndex","onChangePageSize","Math","max","onChange","e","newSize","Number","target","size","type","placeholder","min","enteredPage","width","onClick","Link","to","Array","from","length","_","i","isCurrentPage","props","Breadcrumb","listProps","Item","href"],"sourceRoot":""}