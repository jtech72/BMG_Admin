{"version":3,"file":"static/js/5369.de27007d.chunk.js","mappings":"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","sources":["pages/account/LockScreen.js","components/VerticalForm.js","components/FormInput.js","pages/account/AccountLayout.js"],"sourcesContent":["// @flow\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Button, Row, Col } from 'react-bootstrap';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n// components\r\nimport { VerticalForm, FormInput } from '../../components/';\r\n\r\nimport AccountLayout from './AccountLayout';\r\nimport { Logo } from '../../helpers/image';\r\n// images\r\n\r\n/* bottom link */\r\nconst BottomLink = () => {\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Row className=\"mt-3\">\r\n            <Col className=\"text-center\">\r\n                <p className=\"text-muted\">\r\n                    {t('Not you? return')}{' '}\r\n                    <Link to={'/account/login'} className=\"text-muted ms-1\">\r\n                        <b>{t('Sign In')}</b>\r\n                    </Link>\r\n                </p>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nconst LockScreen = (): React$Element<any> => {\r\n    const { t } = useTranslation();\r\n\r\n    /*\r\n     * form validation schema\r\n     */\r\n    const schemaResolver = yupResolver(\r\n        yup.object().shape({\r\n            password: yup.string().required(t('Please enter Password')),\r\n        })\r\n    );\r\n\r\n    /*\r\n     * handle form submission\r\n     */\r\n    const onSubmit = (formData) => {\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <AccountLayout bottomLinks={<BottomLink />}>\r\n                <div className=\"text-center w-75 m-auto\">\r\n                    <img src={Logo} height=\"64\" alt=\"\" className=\"rounded-circle shadow\" />\r\n                    <h4 className=\"text-dark-50 text-center mt-3 fw-bold\">{t('Hi ! Michael ')}</h4>\r\n                    <p className=\"text-muted mb-4\">{t('Enter your password to access the admin.')}</p>\r\n                </div>\r\n\r\n                <VerticalForm onSubmit={onSubmit} resolver={schemaResolver}>\r\n                    <FormInput\r\n                        label={t('Password')}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder={t('Enter your password')}\r\n                        containerClass={'mb-3'}\r\n                    />\r\n\r\n                    <div className=\"mb-0 text-center\">\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            {t('Log In')}\r\n                        </Button>\r\n                    </div>\r\n                </VerticalForm>\r\n            </AccountLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LockScreen;\r\n","// @flow\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\ntype VerticalFromProps = {\r\n    defaultValues?: Object,\r\n    resolver?: any,\r\n    children?: any,\r\n    onSubmit?: (value: any) => void,\r\n    formClass?: string,\r\n};\r\n\r\nconst VerticalForm = ({\r\n    defaultValues,\r\n    resolver,\r\n    children,\r\n    onSubmit,\r\n    formClass,\r\n}: VerticalFromProps): React$Element<any> => {\r\n    /*\r\n     * form methods\r\n     */\r\n    const methods = useForm({ defaultValues, resolver });\r\n    const {\r\n        handleSubmit,\r\n        register,\r\n        control,\r\n        formState: { errors },\r\n    } = methods;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\r\n            {Array.isArray(children)\r\n                ? children.map((child) => {\r\n                      return child.props && child.props.name\r\n                          ? React.createElement(child.type, {\r\n                                ...{\r\n                                    ...child.props,\r\n                                    register,\r\n                                    key: child.props.name,\r\n                                    errors,\r\n                                    control,\r\n                                },\r\n                            })\r\n                          : child;\r\n                  })\r\n                : children}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default VerticalForm;\r\n","// @flow\r\nimport React, { useState } from 'react';\r\nimport { Form, InputGroup } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\n/* Password Input */\r\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <InputGroup className=\"mb-0\">\r\n                <Form.Control\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    placeholder={placeholder}\r\n                    name={name}\r\n                    id={name}\r\n                    as=\"input\"\r\n                    ref={(r) => {\r\n                        if (refCallback) refCallback(r);\r\n                    }}\r\n                    className={className}\r\n                    isInvalid={errors && errors[name] ? true : false}\r\n                    {...(register ? register(name) : {})}\r\n                    autoComplete={name}\r\n                />\r\n                <div\r\n                    className={classNames('input-group-text', 'input-group-password', {\r\n                        'show-password': showPassword,\r\n                    })}\r\n                    data-password={showPassword ? 'true' : 'false'}>\r\n                    <span\r\n                        className=\"password-eye\"\r\n                        onClick={() => {\r\n                            setShowPassword(!showPassword);\r\n                        }}></span>\r\n                </div>\r\n            </InputGroup>\r\n        </>\r\n    );\r\n};\r\n\r\ntype FormInputProps = {\r\n    label?: string,\r\n    type?: string,\r\n    name?: string,\r\n    placeholder?: string,\r\n    register?: any,\r\n    errors?: any,\r\n    className?: string,\r\n    labelClassName?: string,\r\n    containerClass?: string,\r\n    refCallback?: any,\r\n    children?: any,\r\n};\r\n\r\nconst FormInput = ({\r\n    label,\r\n    type,\r\n    name,\r\n    placeholder,\r\n    register,\r\n    errors,\r\n    className,\r\n    labelClassName,\r\n    containerClass,\r\n    refCallback,\r\n    children,\r\n    ...otherProps\r\n}: FormInputProps): React$Element<React$FragmentType> => {\r\n    // handle input type\r\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\r\n\r\n    return (\r\n        <>\r\n            {type === 'hidden' ? (\r\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\r\n            ) : (\r\n                <>\r\n                    {type === 'password' ? (\r\n                        <>\r\n                            <Form.Group className={containerClass}>\r\n                                {label ? (\r\n                                    <>\r\n                                        {' '}\r\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\r\n                                    </>\r\n                                ) : null}\r\n                                <PasswordInput\r\n                                    name={name}\r\n                                    placeholder={placeholder}\r\n                                    refCallback={refCallback}\r\n                                    errors={errors}\r\n                                    register={register}\r\n                                    className={className}\r\n                                />\r\n\r\n                                {errors && errors[name] ? (\r\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\r\n                                        {errors[name]['message']}\r\n                                    </Form.Control.Feedback>\r\n                                ) : null}\r\n                            </Form.Group>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            {type === 'select' ? (\r\n                                <>\r\n                                    <Form.Group className={containerClass}>\r\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\r\n\r\n                                        <Form.Select\r\n                                            type={type}\r\n                                            label={label}\r\n                                            name={name}\r\n                                            id={name}\r\n                                            ref={(r) => {\r\n                                                if (refCallback) refCallback(r);\r\n                                            }}\r\n                                            comp={comp}\r\n                                            className={className}\r\n                                            isInvalid={errors && errors[name] ? true : false}\r\n                                            {...(register ? register(name) : {})}\r\n                                            {...otherProps}>\r\n                                            {children}\r\n                                        </Form.Select>\r\n\r\n                                        {errors && errors[name] ? (\r\n                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                {errors[name]['message']}\r\n                                            </Form.Control.Feedback>\r\n                                        ) : null}\r\n                                    </Form.Group>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    {type === 'checkbox' || type === 'radio' ? (\r\n                                        <>\r\n                                            <Form.Group className={containerClass}>\r\n                                                <Form.Check\r\n                                                    type={type}\r\n                                                    label={label}\r\n                                                    name={name}\r\n                                                    id={name}\r\n                                                    ref={(r) => {\r\n                                                        if (refCallback) refCallback(r);\r\n                                                    }}\r\n                                                    className={className}\r\n                                                    isInvalid={errors && errors[name] ? true : false}\r\n                                                    {...(register ? register(name) : {})}\r\n                                                    {...otherProps}\r\n                                                />\r\n\r\n                                                {errors && errors[name] ? (\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors[name]['message']}\r\n                                                    </Form.Control.Feedback>\r\n                                                ) : null}\r\n                                            </Form.Group>\r\n                                        </>\r\n                                    ) : (\r\n                                        <Form.Group className={containerClass}>\r\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\r\n\r\n                                            <Form.Control\r\n                                                type={type}\r\n                                                placeholder={placeholder}\r\n                                                name={name}\r\n                                                id={name}\r\n                                                as={comp}\r\n                                                ref={(r) => {\r\n                                                    if (refCallback) refCallback(r);\r\n                                                }}\r\n                                                className={className}\r\n                                                isInvalid={errors && errors[name] ? true : false}\r\n                                                {...(register ? register(name) : {})}\r\n                                                {...otherProps}\r\n                                                autoComplete={name}>\r\n                                                {children ? children : null}\r\n                                            </Form.Control>\r\n\r\n                                            {errors && errors[name] ? (\r\n                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                    {errors[name]['message']}\r\n                                                </Form.Control.Feedback>\r\n                                            ) : null}\r\n                                        </Form.Group>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormInput;\r\n","// @flow\r\nimport React, { useEffect } from 'react';\r\nimport { Container, Row, Col, Card } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n// images\r\nimport { Logo } from '../../helpers/image';\r\n\r\ntype AccountLayoutProps = {\r\n    bottomLinks?: React$Element<any>,\r\n    children?: any,\r\n};\r\n\r\nconst AccountLayout = ({ bottomLinks, children }: AccountLayoutProps): React$Element<any> => {\r\n    const { t } = useTranslation();\r\n    const currentYear = new Date().getFullYear();\r\n\r\n    useEffect(() => {\r\n        if (document.body) document.body.classList.add('authentication-bg');\r\n\r\n        return () => {\r\n            if (document.body) document.body.classList.remove('authentication-bg');\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"account-pages pt-2 pt-sm-5 pb-4 pb-sm-5\">\r\n                <Container>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col md={8} lg={6} xl={5} xxl={4}>\r\n                            <Card>\r\n                                {/* logo */}\r\n                                <Card.Header className=\" text-center\" style={{backgroundColor:'#008003'}}>\r\n                                    <Link to=\"/\">\r\n                                        <span>\r\n                                            <img src={Logo} alt=\"\" height=\"70\" className='bg-light rounded-pill px-3' />\r\n                                        </span>\r\n                                    </Link>\r\n                                </Card.Header>\r\n                                <Card.Body className=\"p-4\">{children}</Card.Body>\r\n                            </Card>\r\n\r\n                            {/* bottom links */}\r\n                            {bottomLinks}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            <footer className=\"footer footer-alt\">{currentYear} © BMG - <a href=\"https://rowthtech.com/\" className='text-muted'><u>rowthtech.com</u></a></footer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AccountLayout;\r\n"],"names":["BottomLink","t","useTranslation","_jsx","Row","className","children","Col","_jsxs","Link","to","LockScreen","schemaResolver","yupResolver","yup","shape","password","required","_Fragment","AccountLayout","bottomLinks","src","Logo","height","alt","VerticalForm","onSubmit","formData","resolver","FormInput","label","type","name","placeholder","containerClass","Button","variant","_ref","defaultValues","formClass","methods","useForm","handleSubmit","register","control","formState","errors","noValidate","Array","isArray","map","child","props","React","_objectSpread","key","PasswordInput","refCallback","showPassword","setShowPassword","useState","InputGroup","Form","Control","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","_ref2","labelClassName","otherProps","_objectWithoutProperties","_excluded","comp","Group","Label","Feedback","Select","Check","currentYear","Date","getFullYear","useEffect","document","body","classList","add","remove","Container","md","lg","xl","xxl","Card","Header","style","backgroundColor","Body","href"],"sourceRoot":""}