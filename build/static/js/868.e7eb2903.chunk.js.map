{"version":3,"file":"static/js/868.e7eb2903.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/Row.js","components/VerticalForm.js","components/FormInput.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useMounted.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useIsomorphicEffect.js","pages/account/AccountLayout.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/usePrevious.js","pages/account/Register.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useCommittedRef.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useCallbackRef.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventCallback.js"],"sourcesContent":["\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;","// @flow\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\ntype VerticalFromProps = {\n    defaultValues?: Object,\n    resolver?: any,\n    children?: any,\n    onSubmit?: (value: any) => void,\n    formClass?: string,\n};\n\nconst VerticalForm = ({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps): React$Element<any> => {\n    /*\n     * form methods\n     */\n    const methods = useForm({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","// @flow\nimport React, { useState } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n/* Password Input */\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}>\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}></span>\n                </div>\n            </InputGroup>\n        </>\n    );\n};\n\ntype FormInputProps = {\n    label?: string,\n    type?: string,\n    name?: string,\n    placeholder?: string,\n    register?: any,\n    errors?: any,\n    className?: string,\n    labelClassName?: string,\n    containerClass?: string,\n    refCallback?: any,\n    children?: any,\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    ...otherProps\n}: FormInputProps): React$Element<React$FragmentType> => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'password' ? (\n                        <>\n                            <Form.Group className={containerClass}>\n                                {label ? (\n                                    <>\n                                        {' '}\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\n                                    </>\n                                ) : null}\n                                <PasswordInput\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                />\n\n                                {errors && errors[name] ? (\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                                        {errors[name]['message']}\n                                    </Form.Control.Feedback>\n                                ) : null}\n                            </Form.Group>\n                        </>\n                    ) : (\n                        <>\n                            {type === 'select' ? (\n                                <>\n                                    <Form.Group className={containerClass}>\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                        <Form.Select\n                                            type={type}\n                                            label={label}\n                                            name={name}\n                                            id={name}\n                                            ref={(r) => {\n                                                if (refCallback) refCallback(r);\n                                            }}\n                                            comp={comp}\n                                            className={className}\n                                            isInvalid={errors && errors[name] ? true : false}\n                                            {...(register ? register(name) : {})}\n                                            {...otherProps}>\n                                            {children}\n                                        </Form.Select>\n\n                                        {errors && errors[name] ? (\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors[name]['message']}\n                                            </Form.Control.Feedback>\n                                        ) : null}\n                                    </Form.Group>\n                                </>\n                            ) : (\n                                <>\n                                    {type === 'checkbox' || type === 'radio' ? (\n                                        <>\n                                            <Form.Group className={containerClass}>\n                                                <Form.Check\n                                                    type={type}\n                                                    label={label}\n                                                    name={name}\n                                                    id={name}\n                                                    ref={(r) => {\n                                                        if (refCallback) refCallback(r);\n                                                    }}\n                                                    className={className}\n                                                    isInvalid={errors && errors[name] ? true : false}\n                                                    {...(register ? register(name) : {})}\n                                                    {...otherProps}\n                                                />\n\n                                                {errors && errors[name] ? (\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        {errors[name]['message']}\n                                                    </Form.Control.Feedback>\n                                                ) : null}\n                                            </Form.Group>\n                                        </>\n                                    ) : (\n                                        <Form.Group className={containerClass}>\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                            <Form.Control\n                                                type={type}\n                                                placeholder={placeholder}\n                                                name={name}\n                                                id={name}\n                                                as={comp}\n                                                ref={(r) => {\n                                                    if (refCallback) refCallback(r);\n                                                }}\n                                                className={className}\n                                                isInvalid={errors && errors[name] ? true : false}\n                                                {...(register ? register(name) : {})}\n                                                {...otherProps}\n                                                autoComplete={name}>\n                                                {children ? children : null}\n                                            </Form.Control>\n\n                                            {errors && errors[name] ? (\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {errors[name]['message']}\n                                                </Form.Control.Feedback>\n                                            ) : null}\n                                        </Form.Group>\n                                    )}\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import { useRef, useEffect } from 'react';\n\n/**\n * Track whether a component is current mounted. Generally less preferable than\n * properlly canceling effects so they don't run after a component is unmounted,\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\n *\n * @returns a function that returns the current isMounted state of the component\n *\n * ```ts\n * const [data, setData] = useState(null)\n * const isMounted = useMounted()\n *\n * useEffect(() => {\n *   fetchdata().then((newData) => {\n *      if (isMounted()) {\n *        setData(newData);\n *      }\n *   })\n * })\n * ```\n */\nexport default function useMounted() {\n  const mounted = useRef(true);\n  const isMounted = useRef(() => mounted.current);\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  return isMounted.current;\n}","import { useEffect, useLayoutEffect } from 'react';\nconst isReactNative = typeof global !== 'undefined' &&\n// @ts-ignore\nglobal.navigator &&\n// @ts-ignore\nglobal.navigator.product === 'ReactNative';\nconst isDOM = typeof document !== 'undefined';\n\n/**\n * Is `useLayoutEffect` in a DOM or React Native environment, otherwise resolves to useEffect\n * Only useful to avoid the console warning.\n *\n * PREFER `useEffect` UNLESS YOU KNOW WHAT YOU ARE DOING.\n *\n * @category effects\n */\nexport default isDOM || isReactNative ? useLayoutEffect : useEffect;","// @flow\nimport React, { useEffect } from 'react';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\n// images\nimport { Logo } from '../../helpers/image';\n\ntype AccountLayoutProps = {\n    bottomLinks?: React$Element<any>,\n    children?: any,\n};\n\nconst AccountLayout = ({ bottomLinks, children }: AccountLayoutProps): React$Element<any> => {\n    const { t } = useTranslation();\n    const currentYear = new Date().getFullYear();\n\n    useEffect(() => {\n        if (document.body) document.body.classList.add('authentication-bg');\n\n        return () => {\n            if (document.body) document.body.classList.remove('authentication-bg');\n        };\n    }, []);\n\n    return (\n        <>\n            <div className=\"account-pages pt-2 pt-sm-5 pb-4 pb-sm-5\">\n                <Container>\n                    <Row className=\"justify-content-center\">\n                        <Col md={8} lg={6} xl={5} xxl={4}>\n                            <Card>\n                                {/* logo */}\n                                <Card.Header className=\" text-center\" style={{backgroundColor:'#008003'}}>\n                                    <Link to=\"/\">\n                                        <span>\n                                            <img src={Logo} alt=\"\" height=\"70\" className='bg-light rounded-pill px-3' />\n                                        </span>\n                                    </Link>\n                                </Card.Header>\n                                <Card.Body className=\"p-4\">{children}</Card.Body>\n                            </Card>\n\n                            {/* bottom links */}\n                            {bottomLinks}\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n            <footer className=\"footer footer-alt\">{currentYear} © BMG - <a href=\"https://rowthtech.com/\" className='text-muted'><u>rowthtech.com</u></a></footer>\n        </>\n    );\n};\n\nexport default AccountLayout;\n","const _excluded = [\"as\", \"disabled\"];\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  role,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n  const meta = {\n    tagName\n  };\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n    onClick == null ? void 0 : onClick(event);\n  };\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n    if (disabled) {\n      href = undefined;\n    }\n  }\n  return [{\n    role: role != null ? role : 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      as: asProp,\n      disabled\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","import { useEffect, useRef } from 'react';\n\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\nexport default function usePrevious(value) {\n  const ref = useRef(null);\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}","// @flow\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Navigate, Link } from 'react-router-dom';\nimport { Button, Alert, Row, Col } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n//actions\nimport { resetAuth, signupUser } from '../../redux/actions';\n\n// components\nimport { VerticalForm, FormInput } from '../../components/';\n\nimport AccountLayout from './AccountLayout';\n\n/* bottom link */\nconst BottomLink = () => {\n    const { t } = useTranslation();\n\n    return (\n        <Row className=\"mt-3\">\n            <Col className=\"text-center\">\n                <p className=\"text-muted\">\n                    {t('Already have account?')}{' '}\n                    <Link to={'/account/login'} className=\"text-muted ms-1\">\n                        <b>{t('Log In')}</b>\n                    </Link>\n                </p>\n            </Col>\n        </Row>\n    );\n};\n\nconst Register = (): React$Element<React$FragmentType> => {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    const { loading, userSignUp, error } = useSelector((state) => ({\n        loading: state.Auth.loading,\n        error: state.Auth.error,\n        userSignUp: state.Auth.userSignUp,\n    }));\n\n    useEffect(() => {\n        dispatch(resetAuth());\n    }, [dispatch]);\n\n    /*\n     * form validation schema\n     */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            fullname: yup.string().required(t('Please enter Fullname')),\n            email: yup.string().required('Please enter Email').email('Please enter valid Email'),\n            password: yup.string().required(t('Please enter Password')),\n        })\n    );\n\n    /*\n     * handle form submission\n     */\n    const onSubmit = (formData) => {\n        dispatch(signupUser(formData['fullname'], formData['email'], formData['password']));\n    };\n\n    return (\n        <>\n            {userSignUp ? <Navigate to={'/account/confirm'} /> : null}\n\n            <AccountLayout bottomLinks={<BottomLink />}>\n                <div className=\"text-center w-75 m-auto\">\n                    <h4 className=\"text-dark-50 text-center mt-0 fw-bold\">{t('Free Sign Up')}</h4>\n                    <p className=\"text-muted mb-4\">\n                        {t(\"Don't have an account? Create your account, it takes less than a minute.\")}\n                    </p>\n                </div>\n\n                {error && (\n                    <Alert variant=\"danger\" className=\"my-2\">\n                        {error}\n                    </Alert>\n                )}\n\n                <VerticalForm onSubmit={onSubmit} resolver={schemaResolver} defaultValues={{}}>\n                    <FormInput\n                        label={t('Full Name')}\n                        type=\"text\"\n                        name=\"fullname\"\n                        placeholder={t('Enter your name')}\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={t('Email address')}\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder={t('Enter your email')}\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={t('Password')}\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder={t('Enter your password')}\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={t('I accept Terms and Conditions')}\n                        type=\"checkbox\"\n                        name=\"checkboxsignup\"\n                        containerClass={'mb-3 text-muted'}\n                    />\n\n                    <div className=\"mb-3 mb-0 text-center\">\n                        <Button variant=\"success\" type=\"submit\" disabled={loading}>\n                            {t('Sign Up')}\n                        </Button>\n                    </div>\n                </VerticalForm>\n            </AccountLayout>\n        </>\n    );\n};\n\nexport default Register;\n","import { useEffect, useRef } from 'react';\n\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\nfunction useCommittedRef(value) {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\nexport default useCommittedRef;","import { useState } from 'react';\n\n/**\n * A convenience hook around `useState` designed to be paired with\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\n * instead of lazily accessing it in an effect.\n *\n * ```ts\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\n *\n * useEffect(() => {\n *   if (!element) return\n *\n *   const calendar = new FullCalendar.Calendar(element)\n *\n *   return () => {\n *     calendar.destroy()\n *   }\n * }, [element])\n *\n * return <div ref={attachRef} />\n * ```\n *\n * @category refs\n */\nexport default function useCallbackRef() {\n  return useState(null);\n}","import { useCallback } from 'react';\nimport useCommittedRef from './useCommittedRef';\nexport default function useEventCallback(fn) {\n  const ref = useCommittedRef(fn);\n  return useCallback(function (...args) {\n    return ref.current && ref.current(...args);\n  }, [ref]);\n}"],"names":["Row","React","_ref","ref","bsPrefix","className","as","Component","props","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","sizePrefix","classes","forEach","brkPoint","propValue","cols","infix","push","_jsx","classNames","displayName","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","formState","errors","noValidate","Array","isArray","map","child","name","type","key","PasswordInput","placeholder","refCallback","showPassword","setShowPassword","useState","_Fragment","_jsxs","InputGroup","Form","Control","id","r","isInvalid","autoComplete","onClick","_ref2","label","labelClassName","containerClass","otherProps","comp","Group","Label","Feedback","Select","Check","useMounted","mounted","useRef","isMounted","current","useEffect","isReactNative","global","navigator","product","document","useLayoutEffect","bottomLinks","t","useTranslation","currentYear","Date","getFullYear","body","classList","add","remove","Container","Col","md","lg","xl","xxl","Card","Header","style","backgroundColor","Link","to","src","Logo","alt","height","Body","href","_excluded","useButtonProps","tagName","disabled","target","rel","role","tabIndex","meta","handleClick","event","trim","isTrivialHref","preventDefault","stopPropagation","undefined","onKeyDown","Button","asProp","e","n","hasOwnProperty","call","indexOf","_objectWithoutPropertiesLoose","buttonProps","Object","assign","usePrevious","value","BottomLink","Register","dispatch","useDispatch","loading","userSignUp","error","useSelector","state","Auth","resetAuth","schemaResolver","yupResolver","yup","shape","fullname","required","email","password","Navigate","AccountLayout","Alert","variant","VerticalForm","formData","signupUser","FormInput","useCallbackRef","useEventCallback","fn","useCommittedRef","useCallback","arguments"],"sourceRoot":""}