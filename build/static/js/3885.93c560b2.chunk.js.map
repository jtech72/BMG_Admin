{"version":3,"file":"static/js/3885.93c560b2.chunk.js","mappings":"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","sources":["pages/bmg/categories/tabs/Tab.js","pages/bmg/categories/AddCategoryModal/AddCategoryModal.js","pages/bmg/categories/Categories.js","helpers/Pagination.js","helpers/PageTitle.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Tab.css';\n\nconst Tab = ({ connectTab }) => {\n    const [activeTab, setActiveTab] = useState('Categories');\n\n    const handleClick = (tab, item) => {\n        if (tab === activeTab) {\n            return;\n        }\n        setActiveTab(tab);\n        connectTab(item);\n    };\n\n    return (\n        <div>\n            <div className=\"navbar text-dark \">\n                <div\n                    className={`nav-item ${activeTab === 'Categories' ? 'active' : ''}`}\n                    onClick={() => handleClick('Categories', 0)}>\n                 Categories\n                </div>\n                <div\n                    className={`nav-item ${activeTab === 'Sub-Categories' ? 'active' : ''}`}\n                    onClick={() => handleClick('Sub-Categories', 1)}>\n                    Sub Categories\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default Tab;","import React, { useEffect, useState } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport Select from 'react-select';\n\nconst AddCategoryModal = ({\n    show,\n    handleClose,\n    allSubCategories = [],\n    onSubmit,\n    newSubCategory,\n    setNewSubCategory,\n    addedCategories,\n    setAddedCategories,\n    modalCheck,\n    setModalCheck,\n    selectedCategories,\n    setSelectedCategories,\n    selectedSubCategories,\n    setSelectedSubCategories,\n}) => {\n    const store = useSelector((state) => state);\n    const [categoryName, setCategoryName] = useState('');\n    const [subCategoryError, setSubCategoryError] = useState('');\n\n    const [confirmName, setConfirmName] = useState('');\n    // const handleCategorySubmit = (payload) => {\n    //     // payload = { categoryName: 'test1', subCategories: [...] }\n    //     setAddedCategories((prev) => [...prev, payload.categoryName]);\n    // };\n\n    const handleAddSubCategory = () => {\n        if (newSubCategory.trim() !== '') {\n            setAddedCategories((prev) => [...prev, newSubCategory]);\n            const newOption = { label: newSubCategory, value: newSubCategory, new: true };\n            setSelectedSubCategories((prev) => [...prev, newOption]);\n            setNewSubCategory('');\n        }\n    };\n    const [categoryConfirmationMatch, setCategoryConfirmationMatch] = useState('');\n    useEffect(() => {\n        if (categoryName == confirmName) {\n            setCategoryConfirmationMatch('');\n        }\n    }, [categoryName, confirmName]);\n    const handleFormSubmit = (e) => {\n        e.preventDefault();\n\n        if (categoryName !== confirmName) {\n            setCategoryConfirmationMatch('Category names do not match!');\n            return;\n        }\n\n        if (selectedSubCategories.length === 0 && modalCheck === 'Sub-category') {\n            setSubCategoryError('Please select at least one subcategory.');\n            return;\n        }\n\n        const payload = {\n            categoryName,\n            subCategories: selectedSubCategories.map((item) => item.value),\n        };\n\n        onSubmit?.(payload);\n        setCategoryName('');\n        setConfirmName('');\n        setSubCategoryError(''); // reset error\n    };\n\n    const subCategoryOptions =\n        store?.subCategoryDataReducer?.categoryData?.subCategories?.map((item) => ({\n            label: item?.subCategoryName,\n            value: item?._id,\n        })) || [];\n\n    const categoryOptions =\n        store?.categoryDataReducer?.categoryData?.groupedCategories?.map((item) => ({\n            label: item?.categoryName,\n            value: item?._id,\n        })) || [];\n\n    const selectOptions = modalCheck === 'Sub-category' ? subCategoryOptions : categoryOptions;\n\n    // return());\n    useEffect(() => {\n        if (!show) {\n            setModalCheck('');\n            setSelectedSubCategories([]);\n            setSubCategoryError('');\n            setCategoryName('');\n            setConfirmName('');\n            setSelectedCategories([]);\n            setNewSubCategory('');\n            setCategoryConfirmationMatch('');\n        }\n    }, [show]);\n\n    const NoDropdownIndicator = () => null;\n    console.log(subCategoryError, 'kjhgfdsdfghj˚');\n\n    return (\n        <Modal show={show} onHide={handleClose} centered>\n            <Modal.Header closeButton>\n                <Modal.Title>Add {modalCheck == 'Sub-category' && 'Sub-'}Category</Modal.Title>\n            </Modal.Header>\n            <Form onSubmit={handleFormSubmit}>\n                <Modal.Body>\n                    {!modalCheck ? (\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Category Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                value={categoryName}\n                                onChange={(e) => setCategoryName(e.target.value)}\n                                required\n                            />\n                        </Form.Group>\n                    ) : (\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Assign Category</Form.Label>\n\n                            <Select\n                                value={selectedCategories}\n                                options={selectOptions}\n                                onChange={setSelectedCategories}\n                                classNamePrefix=\"react-select\"\n                            />\n                        </Form.Group>\n                    )}\n                    {!modalCheck && (\n                        <>\n                            <Form.Group className=\"mb-3\">\n                                <Form.Label>Confirm Category Name</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    value={confirmName}\n                                    onChange={(e) => setConfirmName(e.target.value)}\n                                    required\n                                />\n                                {categoryConfirmationMatch && (\n                                    <p className=\"text-danger\">{categoryConfirmationMatch}</p>\n                                )}\n                            </Form.Group>\n                        </>\n                    )}\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Selected Subcategories</Form.Label>\n                        {!modalCheck ? (\n                            <>\n                                <Select\n                                    isMulti\n                                    value={selectedSubCategories}\n                                    options={subCategoryOptions}\n                                    onChange={(selected) => {\n                                        setSelectedSubCategories(selected);\n                                        setSubCategoryError(''); // clear error on change\n                                    }}\n                                    classNamePrefix=\"react-select\"\n                                />\n                            </>\n                        ) : (\n                            <>\n                                <Select\n                                    isMulti\n                                    value={selectedSubCategories}\n                                    options={!modalCheck ? subCategoryOptions : []}\n                                    onChange={(selected) => {\n                                        setSelectedSubCategories(selected);\n                                        setSubCategoryError(''); // clear error on change\n                                    }}\n                                    menuIsOpen={!modalCheck}\n                                    isClearable\n                                    classNamePrefix=\"react-select\"\n                                    components={{ DropdownIndicator: !modalCheck ? undefined : NoDropdownIndicator }}\n                                />\n                                {subCategoryError && <p className=\"text-danger mt-1\">{subCategoryError}</p>}\n                            </>\n                        )}\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3 d-flex\">\n                        <Form.Control\n                            type=\"text\"\n                            placeholder=\"Add new subcategory\"\n                            value={newSubCategory}\n                            onChange={(e) => setNewSubCategory(e.target.value)}\n                        />\n                        <Button type=\"button\" onClick={handleAddSubCategory} className=\"ms-2\">\n                            Add\n                        </Button>\n                    </Form.Group>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                    <Button variant=\"primary\" type=\"submit\">\n                        Save Category\n                    </Button>\n                </Modal.Footer>\n            </Form>\n        </Modal>\n    );\n};\n\nexport default AddCategoryModal;\n","import { useEffect, useState } from 'react';\nimport { Row, Col, Card, OverlayTrigger, Tooltip, Container, Modal, Button } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PageTitle from '../../../helpers/PageTitle';\nimport { Loading } from '../../../helpers/loader/Loading';\nimport {\n    createCategoryActions,\n    createCategoryActionsReset,\n    createSubCategoryActions,\n    createSubCategoryActionsReset,\n    getCategoryActions,\n    getSubCategoryActions,\n} from '../../../redux/actions';\nimport Pagination from '../../../helpers/Pagination';\nimport Tab from './tabs/Tab';\nimport AddCategoryModal from './AddCategoryModal/AddCategoryModal';\nimport ToastContainer from '../../../helpers/toast/ToastContainer';\nconst Categories = () => {\n    const store = useSelector((state) => state);\n    const dispatch = useDispatch();\n    const [search, setSearch] = useState('');\n    const CategoryData = store?.categoryDataReducer?.categoryData?.groupedCategories;\n    console.log({ store });\n    const SubCategoryData = store?.subCategoryDataReducer?.categoryData?.subCategories;\n    const CategoryLoading = store?.categoryDataReducer?.loading;\n    const SubCategoryLoading = store?.subCategoryDataReducer?.loading;\n    const [activeTab, setActiveTab] = useState(0);\n    const [totalRecords, setTotalRecords] = useState(0);\n\n    const connectTab = (tabIndex) => {\n        setActiveTab(tabIndex);\n    };\n    const [apiCall, setApiCall] = useState(false);\n\n    const [pageIndex, setPageIndex] = useState(1);\n    const [pageSize, setPageSize] = useState(10);\n    const [totalPages, setTotalPages] = useState(Math.ceil(totalRecords / pageSize));\n\n    useEffect(() => {\n        setTotalPages(Math.ceil(totalRecords / pageSize));\n    }, [totalRecords, pageSize]);\n\n    useEffect(() => {\n        if (activeTab === 0) {\n            dispatch(getCategoryActions({ search, limit: pageSize, page: pageIndex }));\n        } else if (activeTab === 1) {\n            dispatch(getSubCategoryActions({ search, limit: pageSize, page: pageIndex }));\n        }\n    }, [dispatch, activeTab, pageIndex, pageSize, search, apiCall]);\n\n    // Separate useEffect to watch for store updates and set totalRecords\n    useEffect(() => {\n        if (activeTab === 0) {\n            setTotalRecords(store?.categoryDataReducer?.categoryData?.totalRecords || 0);\n            setPageIndex(1);\n        } else if (activeTab === 1) {\n            setTotalRecords(store?.subCategoryDataReducer?.categoryData?.totalRecords || 0);\n            setPageIndex(1);\n        }\n    }, [\n        store?.categoryDataReducer?.categoryData?.totalRecords,\n        store?.subCategoryDataReducer?.categoryData?.totalRecords,\n        activeTab,\n        apiCall,\n    ]);\n\n    const formatDate = (dateString) => {\n        if (!dateString) return '';\n\n        const date = new Date(dateString);\n        return date.toLocaleString('en-US', {\n            weekday: 'short', // \"Thu\"\n            month: 'short', // \"Feb\"\n            day: '2-digit', // \"27\"\n            year: 'numeric', // \"2025\"\n            hour: '2-digit', // \"12\"\n            minute: '2-digit', // \"00\"\n            hour12: true, // \"AM/PM\"\n        });\n    };\n\n    const [showModal, setShowModal] = useState(false);\n    const [selectedCategory, setSelectedCategory] = useState(null);\n    const [selectedCategoryData, setSelectedCategoryData] = useState(null);\n\n    const handleViewSubCategories = (category) => {\n        console.log({ category });\n        if (category) {\n            setSelectedCategory(category?.categoryName);\n            setSelectedCategoryData(category?.subCategories);\n            setShowModal(true);\n        }\n    };\n    // Format keys: Remove underscores, convert camelCase to words\n    const formatKey = (key) => {\n        return key\n            .replace(/_/g, ' ') // Replace underscores\n            .replace(/([a-z])([A-Z])/g, '$1 $2') // Convert camelCase\n            .replace(/\\b\\w/g, (char) => char.toUpperCase()); // Capitalize first letter\n    };\n    const [modalCheck, setModalCheck] = useState('');\n    const [openAddCategoryModal, setOpenAddCategoryModal] = useState(false);\n    useEffect(() => {\n        if (openAddCategoryModal) {\n            if (modalCheck.toLowerCase() === 'sub-category') {\n                console.log(modalCheck, 'modalCheckmodalCheck1');\n                dispatch(getCategoryActions({ search, limit: '', page: pageIndex }));\n            } else {\n                console.log(modalCheck, 'modalCheckmodalCheck2');\n                dispatch(getSubCategoryActions({ search, limit: '', page: pageIndex }));\n            }\n        }\n    }, [openAddCategoryModal, modalCheck]);\n    const [addedCategories, setAddedCategories] = useState([]);\n    const [selectedSubCategories, setSelectedSubCategories] = useState([]);\n    const [selectedCategories, setSelectedCategories] = useState([]);\n\n    const [subCategoryData, setSubCategoryData] = useState([]);\n    console.log(selectedCategories, 'TestA');\n    console.log(selectedSubCategories, 'TestA');\n    const addCategoryHandler = (data) => {\n        if (modalCheck) {\n            dispatch(\n                createSubCategoryActions({\n                    subCategoryNames: addedCategories,\n                    categoryId: selectedCategories?.value,\n                })\n            );\n        } else {\n            // After creating category from here in useeffect #1\n            dispatch(createCategoryActions({ name: data?.categoryName }));\n            setSubCategoryData(data?.subCategories);\n        }\n    };\n    const [newSubCategory, setNewSubCategory] = useState('');\n\n    const createCategoryReducer = store?.createCategoryDataReducer;\n    console.log(createCategoryReducer, 'createCategoryReducer');\n    useEffect(() => {\n        if (createCategoryReducer?.categoryData?.status) {\n            if (createCategoryReducer?.categoryData?.status == 200) {\n                if (selectedSubCategories?.length > 0) {\n                    // #1 if here sub categories are selected while creating a category then this condition shall run\n                    const checkForNewSubCategory = selectedSubCategories?.filter((item) => item?.new);\n                    const oldSubCategories = selectedSubCategories?.filter((item) => !item?.new);\n                    dispatch(\n                        createSubCategoryActions({\n                            subCategoryNames: checkForNewSubCategory?.map((item) => item?.label),\n                            categoryId: createCategoryReducer?.categoryData?.newCategory?._id,\n                            existingSubCategoryIds: oldSubCategories?.map((item) => item?.value),\n                        })\n                    );\n                    setSelectedSubCategories([]);\n                    // setApiCall((prev) => !prev);\n                } else {\n                    // #2 if here sub categories are not selected while creating a category then this condition shall run\n                    ToastContainer('Successfully Added', 'success');\n                    setOpenAddCategoryModal(false);\n                    setApiCall((prev) => !prev);\n                }\n            } else {\n                ToastContainer(createCategoryReducer?.error, 'error');\n            }\n            dispatch(createCategoryActionsReset());\n        }\n    }, [createCategoryReducer]);\n    const createSubCategoryReducer = store?.createSubCategoryDataReducer;\n\n    useEffect(() => {\n        if (createSubCategoryReducer?.categoryData?.status) {\n            if (createSubCategoryReducer?.categoryData?.status == 200) {\n                ToastContainer('Successfully added!', 'success');\n                setOpenAddCategoryModal(false);\n                setApiCall((prev) => !prev);\n            } else {\n                ToastContainer(createSubCategoryReducer?.categoryData?.message || 'error');\n            }\n            dispatch(createSubCategoryActionsReset());\n        }\n    }, [createSubCategoryReducer]);\n    console.log(addedCategories, 'addedCategoriesaddedCategories');\n    const handleAddSubCategoryHandler = () => {\n        setOpenAddCategoryModal(true);\n        setModalCheck('Sub-category');\n    };\n    console.log(selectedSubCategories, 'selectedSubCategories');\n\n    return (\n        <>\n            <AddCategoryModal\n                selectedSubCategories={selectedSubCategories}\n                setSelectedSubCategories={setSelectedSubCategories}\n                selectedCategories={selectedCategories}\n                setSelectedCategories={setSelectedCategories}\n                addedCategories={addedCategories}\n                setAddedCategories={setAddedCategories}\n                newSubCategory={newSubCategory}\n                setNewSubCategory={setNewSubCategory}\n                onSubmit={addCategoryHandler}\n                show={openAddCategoryModal}\n                handleClose={() => setOpenAddCategoryModal(false)}\n                allSubCategories={SubCategoryData}\n                modalCheck={modalCheck}\n                setModalCheck={setModalCheck}\n            />\n            <PageTitle\n                breadCrumbItems={[\n                    {\n                        label: `${activeTab === 0 ? 'Categories' : 'Sub-Categories'}`,\n                        path: '/bmg/categories',\n                        active: true,\n                    },\n                ]}\n                title={'Categories'}\n            />\n            <Row>\n                <Col lg={6} className=\"d-flex justify-content-start \">\n                    <Tab connectTab={connectTab} />\n                </Col>\n                <div>\n                    {activeTab === 0 ? (\n                        <Col xs={12}>\n                            <Card\n                                style={{\n                                    boxShadow:\n                                        'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset',\n                                }}>\n                                <Card.Body className=\"text-center\">\n                                    <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                                        <span className=\"px-3 py-1 bg-dark text-light rounded\">\n                                            Total Categories: {totalRecords}\n                                        </span>\n                                        <div className=\"d-flex\">\n                                            <Button onClick={() => setOpenAddCategoryModal(true)} className=\"me-2\">\n                                                Add Category\n                                            </Button>\n\n                                            <input\n                                                type=\"text\"\n                                                className=\"form-control w-auto me-1\"\n                                                placeholder=\"Search...\"\n                                                value={search}\n                                                onChange={(e) => setSearch(e.target.value)}\n                                            />\n                                            {search && (\n                                                <i\n                                                    className=\"mdi mdi-backspace-outline text-danger fs-3\"\n                                                    onClick={() => setSearch('')}\n                                                    style={{ cursor: 'pointer' }}></i>\n                                            )}\n                                        </div>\n                                    </div>\n\n                                    {CategoryLoading ? (\n                                        <>\n                                            <Loading />\n                                        </>\n                                    ) : (\n                                        <>\n                                            {CategoryData && CategoryData?.length > 0 ? (\n                                                <>\n                                                    <div className=\"table-responsive\">\n                                                        <table className=\"table table-striped bg-white\">\n                                                            <thead>\n                                                                <tr className=\"\" style={{ color: '#703133' }}>\n                                                                    <th scope=\"col\">\n                                                                        <i className=\"mdi mdi-merge\"></i>\n                                                                    </th>\n                                                                    <th scope=\"col\">Category Name</th>\n                                                                    <th scope=\"col\">Sub Categories</th>\n                                                                    <th scope=\"col\">Created At</th>\n                                                                </tr>\n                                                            </thead>\n                                                            <tbody>\n                                                                {CategoryData?.map((data, index) => (\n                                                                    <tr\n                                                                        key={index}\n                                                                        className=\"text-dark fw-bold text-nowrap\">\n                                                                        {/* <th scope=\"row\">{index + 1}</th> */}\n                                                                        <th scope=\"row\">\n                                                                            {(pageIndex - 1) * 10 + index + 1}\n                                                                        </th>\n                                                                        <td className=\"text-uppercase fw-bold text-success\">\n                                                                            {data?.categoryName ? (\n                                                                                <span>{data?.categoryName} </span>\n                                                                            ) : (\n                                                                                <span className=\"d-flex text-danger justify-content-center\">\n                                                                                    N/A\n                                                                                </span>\n                                                                            )}\n                                                                        </td>\n                                                                        <td className=\"text-uppercase fw-bold text-success\">\n                                                                            {data?.subCategories?.length > 0 ? (\n                                                                                <span\n                                                                                    style={{\n                                                                                        cursor: 'pointer',\n                                                                                        color: 'crimson',\n                                                                                    }}\n                                                                                    onMouseOver={(e) =>\n                                                                                        (e.target.style.color =\n                                                                                            'rgb(10 207 151)')\n                                                                                    }\n                                                                                    onMouseOut={(e) =>\n                                                                                        (e.target.style.color =\n                                                                                            'crimson')\n                                                                                    }\n                                                                                    onClick={() =>\n                                                                                        handleViewSubCategories(data)\n                                                                                    }>\n                                                                                    {' '}\n                                                                                    View Sub Categories\n                                                                                </span>\n                                                                            ) : (\n                                                                                <span className=\"d-flex text-danger justify-content-center\">\n                                                                                    N/A\n                                                                                </span>\n                                                                            )}\n                                                                        </td>\n                                                                        <td className=\"text-uppercase fw-bold text-primary\">\n                                                                            {data?.createdAt ? (\n                                                                                <span>\n                                                                                    {formatDate(data?.createdAt)}{' '}\n                                                                                </span>\n                                                                            ) : (\n                                                                                <span className=\"d-flex text-danger justify-content-center\">\n                                                                                    N/A\n                                                                                </span>\n                                                                            )}\n                                                                        </td>\n                                                                    </tr>\n                                                                ))}\n                                                            </tbody>\n                                                        </table>\n                                                    </div>\n                                                </>\n                                            ) : (\n                                                <div\n                                                    className=\"text-center d-flex align-items-center justify-content-center\"\n                                                    style={{ height: '30vh' }}>\n                                                    <code className=\"fs-4\">No Categories found.</code>\n                                                </div>\n                                            )}\n                                        </>\n                                    )}\n                                    <Pagination\n                                        pageIndex={pageIndex}\n                                        pageSize={pageSize}\n                                        totalPages={totalPages}\n                                        setPageIndex={setPageIndex}\n                                        onChangePageSize={setPageSize}\n                                    />\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    ) : activeTab === 1 ? (\n                        <Col xs={12}>\n                            <Card\n                                style={{\n                                    boxShadow:\n                                        'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset',\n                                }}>\n                                <Card.Body className=\"text-center\">\n                                    <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                                        <span className=\"px-3 py-1 bg-dark text-light rounded\">\n                                            Total Sub Categories: {totalRecords}\n                                        </span>\n                                        <div className=\"d-flex\">\n                                            <Button onClick={handleAddSubCategoryHandler} className=\"me-2\">\n                                                Add Sub-Category\n                                            </Button>\n\n                                            <input\n                                                type=\"text\"\n                                                className=\"form-control w-auto me-1\"\n                                                placeholder=\"Search...\"\n                                                value={search}\n                                                onChange={(e) => setSearch(e.target.value)}\n                                            />\n                                            {search && (\n                                                <i\n                                                    className=\"mdi mdi-backspace-outline text-danger fs-3\"\n                                                    onClick={() => setSearch('')}\n                                                    style={{ cursor: 'pointer' }}></i>\n                                            )}\n                                        </div>\n                                    </div>\n                                    {SubCategoryLoading ? (\n                                        <>\n                                            <Loading />\n                                        </>\n                                    ) : (\n                                        <>\n                                            {SubCategoryData && SubCategoryData?.length > 0 ? (\n                                                <>\n                                                    <div className=\"table-responsive\">\n                                                        <table className=\"table table-striped bg-white\">\n                                                            <thead>\n                                                                <tr className=\"\" style={{ color: '#703133' }}>\n                                                                    <th scope=\"col\">\n                                                                        <i className=\"mdi mdi-merge\"></i>\n                                                                    </th>\n                                                                    <th scope=\"col\">Sub-Category Name</th>\n                                                                    <th scope=\"col\">Category Name</th>\n                                                                    <th scope=\"col\">Created At</th>\n                                                                </tr>\n                                                            </thead>\n                                                            <tbody>\n                                                                {SubCategoryData?.map((data, index) => (\n                                                                    <tr\n                                                                        key={index}\n                                                                        className=\"text-dark fw-bold text-nowrap\">\n                                                                        <th scope=\"row\">{index + 1}</th>\n                                                                        <td className=\"text-uppercase fw-bold text-success\">\n                                                                            {data?.subCategoryName ? (\n                                                                                <span>{data?.subCategoryName} </span>\n                                                                            ) : (\n                                                                                <span className=\"d-flex text-danger justify-content-center\">\n                                                                                    N/A\n                                                                                </span>\n                                                                            )}\n                                                                        </td>\n                                                                        <td className=\"text-uppercase fw-bold text-danger\">\n                                                                            {data?.categoryId?.name ? (\n                                                                                <span>{data?.categoryId?.name} </span>\n                                                                            ) : (\n                                                                                <span className=\"d-flex text-danger justify-content-center\">\n                                                                                    N/A\n                                                                                </span>\n                                                                            )}\n                                                                        </td>\n                                                                        <td className=\"text-uppercase fw-bold text-primary\">\n                                                                            {data?.createdAt ? (\n                                                                                <span>\n                                                                                    {formatDate(data?.createdAt)}{' '}\n                                                                                </span>\n                                                                            ) : (\n                                                                                <span className=\"d-flex text-danger justify-content-center\">\n                                                                                    N/A\n                                                                                </span>\n                                                                            )}\n                                                                        </td>\n                                                                    </tr>\n                                                                ))}\n                                                            </tbody>\n                                                        </table>\n                                                    </div>\n                                                </>\n                                            ) : (\n                                                <div\n                                                    className=\"text-center d-flex align-items-center justify-content-center\"\n                                                    style={{ height: '30vh' }}>\n                                                    <code className=\"fs-4\">No Sub Category found.</code>\n                                                </div>\n                                            )}\n                                        </>\n                                    )}\n                                    <Pagination\n                                        pageIndex={pageIndex}\n                                        pageSize={pageSize}\n                                        totalPages={totalPages}\n                                        setPageIndex={setPageIndex}\n                                        onChangePageSize={setPageSize}\n                                    />\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    ) : null}\n                </div>\n            </Row>\n\n            <Modal show={showModal} onHide={() => setShowModal(false)} centered size=\"lg\">\n                <Modal.Header className=\"px-2 py-1 text-light\" style={{ backgroundColor: '#008003' }}>\n                    <Modal.Title className=\"fw-semibold\">\n                        Sub Categories in {selectedCategory} ({selectedCategoryData?.length})\n                    </Modal.Title>\n                    <i\n                        className=\"mdi mdi-close fs-3\"\n                        onClick={() => setShowModal(false)}\n                        style={{ cursor: 'pointer' }}></i>\n                </Modal.Header>\n                <Modal.Body>\n                    {selectedCategoryData && selectedCategoryData?.length > 0 ? (\n                        <Container>\n                            <table className=\"table table-striped rounded shadow-sm\">\n                                <thead className=\"bg-success text-light\">\n                                    <tr>\n                                        <th scope=\"col\" className=\"px-3 py-2\">\n                                            #\n                                        </th>\n                                        <th scope=\"col\" className=\"px-3 py-2\">\n                                            Sub Category\n                                        </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {selectedCategoryData?.map((item, index) => (\n                                        <tr key={index} className=\"align-middle\">\n                                            <td className=\"px-3 py-2 fw-bold\">{index + 1}</td>\n                                            <td className=\"px-3 py-2\">{item?.name || 'N/A'}</td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </Container>\n                    ) : (\n                        <div className=\"text-center text-muted py-3\">No products available.</div>\n                    )}\n                </Modal.Body>\n            </Modal>\n        </>\n    );\n};\n\nexport default Categories;\n","import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom'; // Assuming you are using React Router\n\nconst Pagination = ({ pageIndex, pageSize, totalPages, setPageIndex, onChangePageSize }) => {\n    useEffect(() => {\n        // Ensure pageIndex stays within bounds when totalPages changes\n        if (pageIndex > totalPages) {\n            setPageIndex(Math.max(1, totalPages)); // Keep in valid range\n        }\n    }, [pageIndex, totalPages, setPageIndex]);\n\n    return (\n        <div className=\"d-lg-flex align-items-center text-center pb-1 pt-2\">\n            {/* Page Size Selection */}\n            <div className=\"d-inline-block me-3\">\n                <label className=\"me-1\">Display :</label>\n                <select\n                    value={pageSize}\n                    onChange={(e) => {\n                        const newSize = Number(e.target.value);\n                        onChangePageSize(newSize);\n                        setPageIndex(1); // Reset to first page\n                    }}\n                    className=\"form-select d-inline-block w-auto\">\n                    {[10, 20, 50, 100].map((size) => (\n                        <option key={size} value={size}>\n                            {size}\n                        </option>\n                    ))}\n                </select>\n            </div>\n\n            {/* Page Info */}\n            <span className=\"me-3\">\n                Page{' '}\n                <strong>\n                    {pageIndex} of {totalPages}\n                </strong>\n            </span>\n\n            {/* Go to Page Input */}\n            <label>Go to page: </label>\n            <input\n                type=\"number\"\n                placeholder={`${pageIndex}`}\n                min=\"1\"\n                max={totalPages}\n                onChange={(e) => {\n                    const enteredPage = Number(e.target.value);\n                    if (enteredPage >= 1 && enteredPage <= totalPages) {\n                        setPageIndex(enteredPage);\n                    }\n                }}\n                className=\"form-control ms-1 d-inline-block\"\n                style={{ width: '80px' }}\n            />\n\n            {/* Pagination Controls */}\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0 pe-4\">\n                {/* Previous Button */}\n                {pageIndex > 1 && (\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex - 1)}>\n                        <Link to=\"#\" className=\"page-link\">\n                            Previous\n                        </Link>\n                    </li>\n                )}\n\n                {/* Page Number Buttons */}\n                {Array.from({ length: totalPages }).map((_, i) => {\n                    const page = i + 1; // Adjust index to start from 1\n                    const isCurrentPage = page === pageIndex;\n                    const isNearCurrent = page >= pageIndex - 1 && page <= pageIndex + 1;\n                    const isEdgePage = page === 1 || page === totalPages;\n\n                    if (totalPages <= 5 || isNearCurrent || isEdgePage) {\n                        return (\n                            <li\n                                key={page}\n                                className={`page-item ${isCurrentPage ? 'active' : ''}`}\n                                onClick={() => setPageIndex(page)}>\n                                <Link to=\"#\" className=\"page-link\">\n                                    {page}\n                                </Link>\n                            </li>\n                        );\n                    } else if (\n                        (page === 2 && pageIndex >= 5) ||\n                        (page === totalPages - 1 && pageIndex <= totalPages - 4)\n                    ) {\n                        return (\n                            <li key={page} className=\"page-item disabled\">\n                                <Link to=\"#\" className=\"page-link px-0\">\n                                    ...\n                                </Link>\n                            </li>\n                        );\n                    }\n\n                    return null;\n                })}\n\n                {/* Next Button */}\n                {pageIndex < totalPages && (\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex + 1)}>\n                        <Link to=\"#\" className=\"page-link\">\n                            Next\n                        </Link>\n                    </li>\n                )}\n            </ul>\n        </div>\n    );\n};\n\nexport default Pagination;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Dashboard</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index} style={{ color: '#703133' }}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path} >\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\" style={{ color: '#703133' }}>{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n"],"names":["_ref","connectTab","activeTab","setActiveTab","useState","handleClick","tab","item","_jsx","children","_jsxs","className","onClick","_store$subCategoryDat","_store$subCategoryDat2","_store$subCategoryDat3","_store$categoryDataRe","_store$categoryDataRe2","_store$categoryDataRe3","show","handleClose","allSubCategories","onSubmit","newSubCategory","setNewSubCategory","addedCategories","setAddedCategories","modalCheck","setModalCheck","selectedCategories","setSelectedCategories","selectedSubCategories","setSelectedSubCategories","store","useSelector","state","categoryName","setCategoryName","subCategoryError","setSubCategoryError","confirmName","setConfirmName","categoryConfirmationMatch","setCategoryConfirmationMatch","useEffect","subCategoryOptions","subCategoryDataReducer","categoryData","subCategories","map","label","subCategoryName","value","_id","categoryOptions","categoryDataReducer","groupedCategories","selectOptions","console","log","Modal","onHide","centered","Header","closeButton","Title","Form","e","preventDefault","length","payload","Body","Group","Label","Select","options","onChange","classNamePrefix","Control","type","target","required","_Fragment","isMulti","selected","menuIsOpen","isClearable","components","DropdownIndicator","NoDropdownIndicator","undefined","placeholder","Button","handleAddSubCategory","trim","prev","newOption","new","Footer","variant","Categories","_store$categoryDataRe6","_store$categoryDataRe7","_store$subCategoryDat6","_store$subCategoryDat7","dispatch","useDispatch","search","setSearch","CategoryData","SubCategoryData","CategoryLoading","loading","SubCategoryLoading","totalRecords","setTotalRecords","apiCall","setApiCall","pageIndex","setPageIndex","pageSize","setPageSize","totalPages","setTotalPages","Math","ceil","getCategoryActions","limit","page","getSubCategoryActions","_store$categoryDataRe4","_store$categoryDataRe5","_store$subCategoryDat4","_store$subCategoryDat5","formatDate","dateString","Date","toLocaleString","weekday","month","day","year","hour","minute","hour12","showModal","setShowModal","selectedCategory","setSelectedCategory","selectedCategoryData","setSelectedCategoryData","openAddCategoryModal","setOpenAddCategoryModal","toLowerCase","subCategoryData","setSubCategoryData","createCategoryReducer","createCategoryDataReducer","_createCategoryReduce","status","_createCategoryReduce2","_createCategoryReduce3","_createCategoryReduce4","checkForNewSubCategory","filter","oldSubCategories","createSubCategoryActions","subCategoryNames","categoryId","newCategory","existingSubCategoryIds","ToastContainer","error","createCategoryActionsReset","createSubCategoryReducer","createSubCategoryDataReducer","_createSubCategoryRed","_createSubCategoryRed2","_createSubCategoryRed3","message","createSubCategoryActionsReset","AddCategoryModal","data","createCategoryActions","name","PageTitle","breadCrumbItems","path","active","title","Row","Col","lg","Tab","tabIndex","xs","Card","style","boxShadow","cursor","Loading","color","scope","index","_data$subCategories","onMouseOver","onMouseOut","handleViewSubCategories","category","createdAt","height","Pagination","onChangePageSize","handleAddSubCategoryHandler","_data$categoryId","_data$categoryId2","size","backgroundColor","Container","max","newSize","Number","min","enteredPage","width","Link","to","Array","from","_","i","isCurrentPage","props","Breadcrumb","listProps","Item","href"],"sourceRoot":""}