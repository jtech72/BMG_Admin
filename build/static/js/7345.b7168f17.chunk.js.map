{"version":3,"file":"static/js/7345.b7168f17.chunk.js","mappings":"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","sources":["helpers/Pagination.js","helpers/PageTitle.js","pages/bmg/orders/Orders.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom'; // Assuming you are using React Router\n\nconst Pagination = ({ pageIndex, pageSize, totalPages, setPageIndex, onChangePageSize }) => {\n    useEffect(() => {\n        // Ensure pageIndex stays within bounds when totalPages changes\n        if (pageIndex > totalPages) {\n            setPageIndex(Math.max(1, totalPages)); // Keep in valid range\n        }\n    }, [pageIndex, totalPages, setPageIndex]);\n\n    return (\n        <div className=\"d-lg-flex align-items-center text-center pb-1 pt-2\">\n            {/* Page Size Selection */}\n            <div className=\"d-inline-block me-3\">\n                <label className=\"me-1\">Display :</label>\n                <select\n                    value={pageSize}\n                    onChange={(e) => {\n                        const newSize = Number(e.target.value);\n                        onChangePageSize(newSize);\n                        setPageIndex(1); // Reset to first page\n                    }}\n                    className=\"form-select d-inline-block w-auto\">\n                    {[10, 20, 50, 100].map((size) => (\n                        <option key={size} value={size}>\n                            {size}\n                        </option>\n                    ))}\n                </select>\n            </div>\n\n            {/* Page Info */}\n            <span className=\"me-3\">\n                Page{' '}\n                <strong>\n                    {pageIndex} of {totalPages}\n                </strong>\n            </span>\n\n            {/* Go to Page Input */}\n            <label>Go to page: </label>\n            <input\n                type=\"number\"\n                placeholder={`${pageIndex}`}\n                min=\"1\"\n                max={totalPages}\n                onChange={(e) => {\n                    const enteredPage = Number(e.target.value);\n                    if (enteredPage >= 1 && enteredPage <= totalPages) {\n                        setPageIndex(enteredPage);\n                    }\n                }}\n                className=\"form-control ms-1 d-inline-block\"\n                style={{ width: '80px' }}\n            />\n\n            {/* Pagination Controls */}\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0 pe-4\">\n                {/* Previous Button */}\n                {pageIndex > 1 && (\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex - 1)}>\n                        <Link to=\"#\" className=\"page-link\">\n                            Previous\n                        </Link>\n                    </li>\n                )}\n\n                {/* Page Number Buttons */}\n                {Array.from({ length: totalPages }).map((_, i) => {\n                    const page = i + 1; // Adjust index to start from 1\n                    const isCurrentPage = page === pageIndex;\n                    const isNearCurrent = page >= pageIndex - 1 && page <= pageIndex + 1;\n                    const isEdgePage = page === 1 || page === totalPages;\n\n                    if (totalPages <= 5 || isNearCurrent || isEdgePage) {\n                        return (\n                            <li\n                                key={page}\n                                className={`page-item ${isCurrentPage ? 'active' : ''}`}\n                                onClick={() => setPageIndex(page)}>\n                                <Link to=\"#\" className=\"page-link\">\n                                    {page}\n                                </Link>\n                            </li>\n                        );\n                    } else if (\n                        (page === 2 && pageIndex >= 5) ||\n                        (page === totalPages - 1 && pageIndex <= totalPages - 4)\n                    ) {\n                        return (\n                            <li key={page} className=\"page-item disabled\">\n                                <Link to=\"#\" className=\"page-link px-0\">\n                                    ...\n                                </Link>\n                            </li>\n                        );\n                    }\n\n                    return null;\n                })}\n\n                {/* Next Button */}\n                {pageIndex < totalPages && (\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex + 1)}>\n                        <Link to=\"#\" className=\"page-link\">\n                            Next\n                        </Link>\n                    </li>\n                )}\n            </ul>\n        </div>\n    );\n};\n\nexport default Pagination;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            {/* <Breadcrumb.Item href=\"/\" ><span className='custom-color'>Dashboard</span></Breadcrumb.Item> */}\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index} >\n                                        <span className='custom-color'>{item.label}</span>\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path} >\n                                        <span className='custom-color'>{item.label}</span>\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title custom-color\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import { useEffect, useState } from 'react';\nimport { Row, Col, Card, OverlayTrigger, Tooltip, Modal, Container, Carousel } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PageTitle from '../../../helpers/PageTitle';\nimport { Loading } from '../../../helpers/loader/Loading';\nimport { getOrdersAction } from '../../../redux/actions';\nimport Pagination from '../../../helpers/Pagination';\nconst Orders = () => {\n    const store = useSelector((state) => state);\n    const dispatch = useDispatch();\n    const [search, setSearch] = useState('');\n    const data = store?.getOrderDataReducer?.orderData?.data;\n    const OrdersLoading = store?.getOrderDataReducer?.loading;\n    const TotalRecords = store?.getOrderDataReducer?.orderData?.totalrecords;\n    const [pageIndex, setPageIndex] = useState(1);\n    const [pageSize, setPageSize] = useState(20);\n    const [totalPages, setTotalPages] = useState(Math.ceil(TotalRecords / pageSize));\n    const [activeTab, setActiveTab] = useState('Sale');\n\n    useEffect(() => {\n        setTotalPages(Math.ceil(TotalRecords / pageSize));\n    }, [TotalRecords, pageSize]);\n\n    useEffect(() => {\n        dispatch(\n            getOrdersAction({\n                search,\n                limit: pageSize,\n                page: pageIndex,\n                type: activeTab,\n            })\n        );\n    }, [activeTab, dispatch, search, pageIndex, pageSize]);\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    {\n                        label: `Order's`,\n                        path: '/bmg/orders',\n                        active: true,\n                    },\n                ]}\n                title={`Order's`}\n            />\n            {/* Tabs */}\n            <div className=\"mb-3\">\n                <button\n                    onClick={() => setActiveTab('Sale')}\n                    style={{\n                        border: '1px solid rgb(0,128,3)',\n                        borderRadius: '4px',\n                        padding: '6px 12px',\n                        fontWeight: 600,\n                        color: activeTab === 'Sale' ? 'white' : 'rgb(0,128,3)',\n                        backgroundColor: activeTab === 'Sale' ? 'rgb(0,128,3)' : '#f0f0f0',\n                        cursor: 'pointer',\n                    }}\n                    className=\"me-2\"\n                >\n                    Direct Sale\n                </button>\n\n                <button\n                    onClick={() => setActiveTab('Auction')}\n                    style={{\n                        border: '1px solid rgb(0,128,3)',\n                        borderRadius: '4px',\n                        padding: '6px 12px',\n                        fontWeight: 600,\n                        color: activeTab === 'Auction' ? 'white' : 'rgb(0,128,3)',\n                        backgroundColor: activeTab === 'Auction' ? 'rgb(0,128,3)' : '#f0f0f0',\n                        cursor: 'pointer',\n                    }}\n                >\n                    Auction\n                </button>\n\n            </div>\n            <Row>\n                <Col xs={12}>\n                    <Card\n                        style={{\n                            boxShadow:\n                                'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset',\n                        }}>\n                        <Card.Body className=\"text-center\">\n                            <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                                <span className=\"px-3 py-1 bg-dark text-light rounded\">\n                                    Total Order's: {TotalRecords || 0}\n                                </span>\n                                <div className=\"d-flex\">\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control w-auto me-1\"\n                                        placeholder=\"Search...\"\n                                        value={search}\n                                        onChange={(e) => setSearch(e.target.value)}\n                                    />\n                                    {search && (\n                                        <i\n                                            className=\"mdi mdi-backspace-outline text-danger fs-3\"\n                                            onClick={() => setSearch('')}\n                                            style={{ cursor: 'pointer' }}></i>\n                                    )}\n                                </div>\n                            </div>\n\n                            {OrdersLoading ? (\n                                <>\n                                    <Loading />\n                                </>\n                            ) : (\n                                <>\n                                    {data && data?.length > 0 ? (\n                                        <>\n                                            <div className=\"table-responsive\">\n                                                <table className=\"table table-hover bg-white\">\n                                                    <thead>\n                                                        <tr className=\"\">\n                                                            <th className='text-nowrap'>\n                                                                <i className=\"mdi mdi-merge\"></i>\n                                                            </th>\n                                                            <th className='text-nowrap'>Order Id</th>\n                                                            <th className='text-nowrap'>Payment Id</th>\n                                                            <th className='text-nowrap'>Product Id</th>\n                                                            <th className='text-nowrap'>Seller's Name</th>\n                                                            <th className='text-nowrap'>Amount</th>\n                                                            <th className='text-nowrap'>Product Name</th>\n                                                            <th className='text-nowrap'>Customer Name</th>\n                                                            <th className='text-nowrap'>Payment Received data</th>\n                                                            <th className='text-nowrap'>Payment method</th>\n                                                            <th className='text-nowrap'>User Email</th>\n                                                            <th className='text-nowrap'>Invoice</th>\n                                                            <th className='text-nowrap'>Status</th>\n                                                        </tr>\n                                                    </thead>\n                                                    <tbody>\n                                                        {data?.map((data, index) => (\n                                                            <tr key={index}\n                                                                className=\"text-dark fw-bold text-nowrap text-start\">\n                                                                <th scope=\"row\">{(pageIndex - 1) * pageSize + index + 1}</th>\n                                                                <td className=\"text-uppercase fw-bold\">\n                                                                    {data?.orderId ? (\n                                                                        <span>#{data?.orderId}</span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n\n                                                                <td className=\"text-uppercase fw-bold\">\n                                                                    {data?.paymentId ? (\n                                                                        <span>#{data?.paymentId}</span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n                                                                <td className=\"text-uppercase fw-bold\">\n                                                                    {data?.productId?.productGenerateId ? (\n                                                                        <span>#{data?.productId?.productGenerateId || 'N/A'}</span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n                                                                <td className=\"text-uppercase fw-bold\">\n                                                                    {data?.sellerId?.name || data?.sellerId?.lastName ? (\n                                                                        <span>{data?.sellerId?.name || 'N/A'}{' ' + data?.sellerId?.lastName || 'N/A'} </span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n                                                                <td className=\"text-uppercase fw-bold\">\n                                                                    <span>${data?.totalPrice || 'N/A'} </span>\n                                                                </td>\n                                                                <td className=\"text-uppercase fw-bold\">\n                                                                    <span>{data?.productName || 'N/A'} </span>\n                                                                </td>\n                                                                <td className=\"text-uppercase fw-bold\">\n                                                                    {data?.userId?.name || data?.userId?.lastName ? (\n                                                                        <span>{data?.userId?.name || 'N/A'}{' ' + data?.userId?.lastName || 'N/A'} </span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n                                                                <td className=\"text-uppercase fw-bold\">\n                                                                    {/* {data?.userId?.name || data?.userId?.lastName ? ( */}\n                                                                    <span>\n                                                                        {data?.createdAt\n                                                                            ? new Date(data.createdAt).toLocaleDateString('en-GB', {\n                                                                                day: '2-digit',\n                                                                                month: '2-digit',\n                                                                                year: 'numeric',\n                                                                            })\n                                                                            : 'N/A'}\n                                                                    </span>\n                                                                    {/* ) : (\n                                                                         <span className=\"d-flex justify-content-center\">\n                                                                             N/A\n                                                                         </span>\n                                                                     )} */}\n                                                                </td>\n                                                                <td className=\"text-uppercase fw-bold\">\n                                                                    {data?.paymentMethod ? (\n                                                                        <span>{data?.paymentMethod}</span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n\n                                                                <td className=\"fw-bold\">\n                                                                    {data?.userId?.email ? (\n                                                                        <span>{data?.userId?.email}</span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n                                                                <td className=\"fw-bold\">\n                                                                    {data?.pdfUrl ? (\n                                                                        <a\n                                                                            href={data.pdfUrl}\n                                                                            target=\"_blank\"\n                                                                            rel=\"noopener noreferrer\"\n                                                                            title=\"Open PDF\"\n                                                                            style={{ textDecoration: \"none\", display: \"flex\", alignItems: \"center\" }}\n                                                                        >\n                                                                            <i\n                                                                                className=\"bi bi-file-earmark-pdf-fill\"\n                                                                                style={{ fontSize: \"1.2rem\", marginRight: \"0.25rem\" }}\n                                                                            ></i>\n                                                                            <span style={{ color: 'green', textDecoration: 'underline' }}>View PDF</span>\n                                                                        </a>\n                                                                    ) : (\n                                                                        <span style={{ display: \"flex\", justifyContent: \"center\" }}>N/A</span>\n                                                                    )}\n                                                                </td>\n\n\n                                                                <td className=\"text-uppercase fw-bold\">\n                                                                    {data?.deliveryStatus ? (\n                                                                        <span>{data?.deliveryStatus}</span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n                                                            </tr>\n                                                        ))}\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </>\n                                    ) : (\n                                        <div\n                                            className=\"text-center d-flex align-items-center justify-content-center\"\n                                            style={{ height: '30vh' }}>\n                                            <code className=\"fs-4\">No Order's found. </code>\n                                        </div>\n                                    )}\n                                </>\n                            )}\n                            {TotalRecords > 20 && (\n                                <Pagination\n                                    pageIndex={pageIndex}\n                                    pageSize={pageSize}\n                                    totalPages={totalPages}\n                                    setPageIndex={setPageIndex}\n                                    onChangePageSize={setPageSize}\n                                />\n                            )}\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row >\n        </>\n    );\n};\n\nexport default Orders;\n"],"names":["_ref","pageIndex","pageSize","totalPages","setPageIndex","onChangePageSize","useEffect","Math","max","_jsxs","className","children","_jsx","value","onChange","e","newSize","Number","target","map","size","type","placeholder","min","enteredPage","style","width","onClick","Link","to","Array","from","length","_","i","page","isCurrentPage","props","Row","Col","Breadcrumb","listProps","breadCrumbItems","item","index","active","Item","label","href","path","title","Orders","_store$getOrderDataRe","_store$getOrderDataRe2","_store$getOrderDataRe3","_store$getOrderDataRe4","_store$getOrderDataRe5","store","useSelector","state","dispatch","useDispatch","search","setSearch","useState","data","getOrderDataReducer","orderData","OrdersLoading","loading","TotalRecords","totalrecords","setPageSize","setTotalPages","ceil","activeTab","setActiveTab","getOrdersAction","limit","_Fragment","PageTitle","border","borderRadius","padding","fontWeight","color","backgroundColor","cursor","xs","Card","boxShadow","Body","Loading","_data$productId","_data$productId2","_data$sellerId","_data$sellerId2","_data$sellerId3","_data$sellerId4","_data$userId","_data$userId2","_data$userId3","_data$userId4","_data$userId5","_data$userId6","scope","orderId","paymentId","productId","productGenerateId","sellerId","name","lastName","totalPrice","productName","userId","createdAt","Date","toLocaleDateString","day","month","year","paymentMethod","email","pdfUrl","rel","textDecoration","display","alignItems","fontSize","marginRight","justifyContent","deliveryStatus","height","Pagination"],"sourceRoot":""}