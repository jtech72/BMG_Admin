{"version":3,"file":"static/js/8829.a14796c8.chunk.js","mappings":"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","sources":["pages/bmg/products/ProductDetails/Modals/ViewImageModal.js","pages/bmg/products/ProductDetails/ProductDetails.js"],"sourcesContent":["import React from 'react';\nimport { Modal, Carousel } from 'react-bootstrap';\n\nconst ViewImageModal = ({ open, close, img }) => {\n    return (\n        <Modal show={open} onHide={close} centered size=\"sm\">\n            <Modal.Body style={{ padding: 0, display: 'flex', justifyContent: 'center' }}>\n                <Carousel style={{ width: '275px' }}>\n                    {img?.map((imageUrl, index) => (\n                        <Carousel.Item key={index}>\n                            <div\n                                style={{\n                                    height: '205px',\n                                    width: '275px',\n                                    display: 'flex',\n                                    justifyContent: 'center',\n                                    alignItems: 'center',\n                                    backgroundColor: '#f5f5f5',\n                                }}>\n                                <img\n                                    src={imageUrl}\n                                    alt={`Slide ${index + 1}`}\n                                    style={{\n                                        maxHeight: '100%',\n                                        maxWidth: '100%',\n                                        objectFit: 'contain',\n                                    }}\n                                />\n                            </div>\n                        </Carousel.Item>\n                    ))}\n                </Carousel>\n            </Modal.Body>\n        </Modal>\n    );\n};\n\nexport default ViewImageModal;\n","// import { useEffect, useRef, useState, useCallback, useMemo } from 'react';\n// import { useLocation, useNavigate, useParams } from 'react-router-dom';\n// import { useForm, Controller, useFormContext } from 'react-hook-form';\n// // import { toast } from 'react-toastify';\n// import { Button, Col, Container, Form, InputGroup, Row } from 'react-bootstrap';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Select from 'react-select';\n// import { ButtonLoading, Loading } from '../../../../helpers/loader/Loading';\n\n// // Components\n// import ImageUploader from './functions/ImageUploader';\n// import Specification from './additionalFields/Specification';\n// import { specificProductDataActions } from '../../../../redux/actions';\n// import ViewImageModal from './Modals/ViewImageModal';\n// // Actions\n// // import { addProductFunction, resetProductDataAction, UpdateProductAction } from '../../../redux/products/actions';\n// // import { getCategoryAction } from '../../../redux/category/actions';\n// // import { getfindAllSubCategoryByIdAction, getTableSubCategoryByIdAction } from '../../../redux/sub-category/action';\n\n// // Constants\n// const MAX_IMAGES = 10;\n// const requiredStar = <span className=\"text-danger fs-4 ms-1 fw-bold position-absolute\">*</span>;\n// const initialFormState = {\n//     publish: false,\n//     negotiable: '',\n//     productGenerateId: '',\n//     userId: '',\n//     status: '',\n//     categoryId: '',\n//     subCategoryId: '',\n//     image: '',\n//     type: '',\n// };\n\n// const PostAList = () => {\n//     // Hooks and state\n//     const store = useSelector((state) => state);\n//     const navigate = useNavigate();\n//     const dispatch = useDispatch();\n//     const location = useLocation();\n//     // Selectors\n//     const categoryLoading = store?.getCategoryReducer?.loading;\n//     const SubCategoryLoading = store?.getFindAllSubCategoryByIdReducer?.loading;\n\n//     // State\n//     // Form handling\n//     const {\n//         register,\n//         handleSubmit,\n//         getValues,\n//         watch,\n//         formState: { errors },\n//         setValue,\n//         reset,\n//         control,\n//         clearErrors,\n//     } = useForm({ defaultValues: initialFormState });\n\n//     const { id } = useParams();\n//     const product = store?.specificProductDataReducer?.productData?.product;\n//     // const unwantedDynamicFields = ['type', '_id', 'image', 'userId', 'Product_Name'];\n\n//     const filteredObject = useMemo(() => {\n//         if (!product) return {};\n//         const unwantedDynamicFields = ['type', '_id', 'userId', 'Product_Name'];\n\n//         return Object.entries(product)\n//             .filter(([key]) => !unwantedDynamicFields.includes(key))\n//             .reduce((obj, [key, value]) => {\n//                 obj[key] = value;\n//                 return obj;\n//             }, {});\n//     }, [product]);\n//     const [viewModal, setViewModal] = useState(false);\n//     const handleBack = () => {\n//         navigate(-1);\n//     };\n\n//     useEffect(() => {\n//         dispatch(specificProductDataActions({ id }));\n//     }, []);\n\n//     // useEffect(() => {\n//     //     if (product) {\n//     //         setValue('categoryId', {\n//     //             value: product?.categoryId?.name,\n//     //             label: product?.categoryId?.name,\n//     //         });\n//     //     }\n//     // }, [product]);\n//     const loading = store?.specificProductDataReducer?.loading;\n//     return (\n//         <>\n//             {loading ? (\n//                 <Loading />\n//             ) : (\n//                 <Container className=\"my-3 px-5\">\n//                     <h2 className=\"mx-5 mb-1 them_Text_color mainHeadings\">\n//                         <i className=\"bi bi-arrow-left-circle-fill text-dark me-1\" onClick={handleBack}></i> Product\n//                         Details\n//                     </h2>\n//                     <hr />\n//                     <ViewImageModal open={viewModal} close={() => setViewModal(false)} img={filteredObject?.image} />\n//                     <Form className=\"mx-5\">\n//                         <Row>\n//                             {/* <Col sm={12} className=\"d-flex align-items-center justify-content-between pe-0 mt-3\">\n//                         <h4 className=\"mx-0 mb-0 fw-semibold mt-0\" style={{ fontSize: '18px' }}>\n//                             Product Details\n//                         </h4>\n//                     </Col> */}\n//                             <Row className=\"pe-0\">\n//                                 <Col sm={4} className=\"mt-2 pe-0\">\n//                                     <Form.Label className='text-dark'>Category</Form.Label>\n//                                     {/* {requiredStar} */}\n//                                     <Controller\n//                                         name=\"categoryId\"\n//                                         control={control}\n//                                         render={({ field }) => (\n//                                             <Select className='text-dark'\n//                                                 {...field}\n//                                                 isLoading={categoryLoading}\n//                                                 isDisabled\n//                                                 value={{\n//                                                     value: product?.categoryId?._id,\n//                                                     label: product?.categoryId?.name,\n//                                                 }}\n//                                             />\n//                                         )}\n//                                     />\n//                                 </Col>\n\n//                                 <Col sm={4} className=\"mt-2 pe-0\">\n//                                     <Form.Label className='text-dark'>Sub Category</Form.Label>\n//                                     {/* {requiredStar} */}\n//                                     <Controller\n//                                         name=\"subCategoryId\"\n//                                         control={control}\n//                                         render={({ field }) => (\n//                                             <Select\n//                                                 {...field}\n//                                                 isDisabled\n//                                                 isLoading={SubCategoryLoading}\n//                                                 value={{\n//                                                     value: product?.subCategoryId?._id,\n//                                                     label: product?.subCategoryId?.subCategoryName,\n//                                                 }}\n//                                             />\n//                                         )}\n//                                     />\n//                                 </Col>\n\n//                                 <div className=\"mt-2 pe-0 col-sm-4\">\n//                                     <label className=\"form-label text-dark\">Product Name</label>\n//                                     {/* {requiredStar} */}\n//                                     <input\n//                                         placeholder=\"Product Name\"\n//                                         name=\"Product_Name\"\n//                                         type=\"text\"\n//                                         className=\"form-control text-dark\"\n//                                         {...register('Product_Name', {\n//                                             required: 'Product Name is required',\n//                                         })}\n//                                         disabled\n//                                         value={product?.Product_Name}\n//                                     />\n//                                 </div>\n//                                 {Object.entries(filteredObject).map(([key, value]) => {\n//                                     // Skip nested objects and arrays if needed\n//                                     if (typeof value === 'object' && !Array.isArray(value)) return null;\n\n//                                     // Format label nicely (e.g., \"Product_Name\" → \"Product Name\")\n//                                     const formattedLabel = key.replace(/_/g, ' ').replace(/([a-z])([A-Z])/g, '$1 $2');\n\n//                                     return (\n//                                         <div key={key} className=\"mt-2 pe-0 col-sm-4\">\n//                                             {key == 'image' ? (\n//                                                 <div className=\"d-flex flex-column\">\n//                                                     <label className=\"form-label text-capitalize\">\n//                                                         {formattedLabel}\n//                                                     </label>\n//                                                     <Button onClick={() => setViewModal(true)}>View</Button>\n//                                                     {/* <img\n//                                                         // type=\"text\"\n//                                                         name={key}\n//                                                         className=\"form-control\"\n//                                                         src={Array.isArray(value) ? value.join(', ') : value}\n//                                                         disabled\n//                                                     /> */}\n//                                                 </div>\n//                                             ) : (\n//                                                 <>\n//                                                     <label className=\"form-label text-capitalize text-dark\">\n//                                                         {formattedLabel}\n//                                                     </label>\n\n//                                                     <input\n//                                                         type=\"text\"\n//                                                         name={key}\n//                                                         className=\"form-control text-dark\"\n//                                                         value={\n//                                                             (() => {\n//                                                                 if (!value) return \"\";\n\n//                                                                 if (Array.isArray(value)) {\n//                                                                     return value\n//                                                                         .map((item) => {\n//                                                                             if (typeof item === \"string\") return item;\n//                                                                             if (typeof item === \"object\" && item !== null) {\n//                                                                                 // Convert object to key-value pairs\n//                                                                                 return Object.entries(item)\n//                                                                                     .map(([k, v]) => `${k}: ${v}`)\n//                                                                                     .join(\", \");\n//                                                                             }\n//                                                                             return String(item);\n//                                                                         })\n//                                                                         .join(\" | \");\n//                                                                 }\n\n//                                                                 if (typeof value === \"object\") {\n//                                                                     return Object.entries(value)\n//                                                                         .map(([k, v]) => `${k}: ${v}`)\n//                                                                         .join(\", \");\n//                                                                 }\n\n//                                                                 // If value is HTML string\n//                                                                 const temp = document.createElement(\"div\");\n//                                                                 temp.innerHTML = value;\n//                                                                 return temp.innerText;\n//                                                             })()\n//                                                         }\n//                                                         disabled\n//                                                     />\n\n//                                                 </>\n//                                             )}\n//                                         </div>\n//                                     );\n//                                 })}\n//                             </Row>\n//                         </Row>\n//                     </Form>\n//                 </Container>\n//             )}\n//         </>\n//     );\n// };\n\n// export default PostAList;\nimport { useEffect, useMemo, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { Button, Col, Container, Form, Row, Card } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Loading } from '../../../../helpers/loader/Loading';\nimport ViewImageModal from './Modals/ViewImageModal';\nimport { specificProductDataActions } from '../../../../redux/actions';\n\nconst initialFormState = {\n    publish: false,\n    negotiable: '',\n    productGenerateId: '',\n    userId: '',\n    status: '',\n    categoryId: '',\n    subCategoryId: '',\n    image: '',\n    type: '',\n};\n\nconst PostAList = () => {\n    const store = useSelector((state) => state);\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n    const loading = store?.specificProductDataReducer?.loading;\n    const { id } = useParams();\n    const product = store?.specificProductDataReducer?.productData?.product;\n\n    const { control } = useForm({ defaultValues: initialFormState });\n    const [viewModal, setViewModal] = useState(false);\n\n    const handleBack = () => {\n        navigate(-1);\n    };\n\n    useEffect(() => {\n        dispatch(specificProductDataActions({ id }));\n    }, [dispatch, id]);\n\n    const filteredObject = useMemo(() => {\n        if (!product) return {};\n        const unwantedFields = ['type', '_id', 'userId', 'categoryId', 'createdAt'];\n        return Object.entries(product)\n            .filter(([key]) => !unwantedFields.includes(key))\n            .reduce((obj, [key, value]) => {\n                obj[key] = value;\n                return obj;\n            }, {});\n    }, [product]);\n\n    const longTextKeys = ['description', 'note', 'Product_Name', 'location'];\n\n    return (\n        <>\n            {loading ? (\n                <Loading />\n            ) : (\n                <Container className=\"my-4\">\n                    <div className=\"d-flex align-items-center mb-2\">\n                        <Button\n                            variant=\"secondary\"\n                            onClick={handleBack}\n                        >\n                            <i className=\"bi bi-arrow-left me-1\"></i>\n                            Back\n                        </Button>\n                    </div>\n\n                    <h2 className=\"them_Text_color mainHeadings mb-3\">\n                        Product Details\n                    </h2>\n\n\n                    <ViewImageModal open={viewModal} close={() => setViewModal(false)} img={product?.image} />\n\n                    <Card className=\"shadow-sm border-0\">\n                        <Card.Body>\n                            <Form>\n                                <Row className=\"g-3\">\n                                    <Col sm={4}>\n                                        <Form.Group>\n                                            <Form.Label className=\"fw-semibold text-dark\">Category</Form.Label>\n                                            <Form.Control\n                                                type=\"text\"\n                                                value={product?.categoryId?.name || ''}\n                                                disabled\n                                                className=\"bg-light\"\n                                            />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col sm={4}>\n                                        <Form.Group>\n                                            <Form.Label className=\"fw-semibold text-dark\">Sub Category</Form.Label>\n                                            <Form.Control\n                                                type=\"text\"\n                                                value={product?.subCategoryId?.subCategoryName || ''}\n                                                disabled\n                                                className=\"bg-light\"\n                                            />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col sm={4}>\n                                        <Form.Group>\n                                            <Form.Label className=\"fw-semibold text-dark\">Product Name</Form.Label>\n                                            <Form.Control\n                                                as=\"textarea\"\n                                                rows={2}\n                                                value={product?.Product_Name || ''}\n                                                disabled\n                                                className=\"bg-light\"\n                                            />\n                                        </Form.Group>\n                                    </Col>\n\n                                    {Object.entries(filteredObject).map(([key, value]) => {\n                                        if (\n                                            key === 'negotiable' &&\n                                            value &&\n                                            typeof value === 'object' &&\n                                            Array.isArray(value.num) &&\n                                            value.num.length === 0\n                                        ) {\n                                            return null;\n                                        }\n\n                                        // Specifications\n                                        if (\n                                            Array.isArray(value) &&\n                                            value.length > 0 &&\n                                            value.every((item) => item?.key && item?.value)\n                                        ) {\n                                            return (\n                                                <Col sm={12} key={key}>\n                                                    <Card className=\"mt-3 shadow-sm border\">\n                                                        <Card.Body>\n                                                            <h5 className=\"fw-bold mb-3\">Specifications</h5>\n                                                            <div\n                                                                style={{\n                                                                    maxHeight: value.length > 4 ? '400px' : 'none',\n                                                                    overflowY: value.length > 4 ? 'auto' : 'visible',\n                                                                    paddingRight: value.length > 4 ? '0.5rem' : '0',\n                                                                }}\n                                                            >\n                                                                <Row className=\"g-3 m-0\">\n                                                                    {value.map((spec, idx) => (\n                                                                        <Col sm={6} key={`${key}-${idx}`}>\n                                                                            <Form.Group>\n                                                                                <Form.Label className=\"fw-semibold text-dark\">{spec.key}</Form.Label>\n                                                                                <Form.Control\n                                                                                    as=\"textarea\"\n                                                                                    rows={3}\n                                                                                    value={spec.value}\n                                                                                    disabled\n                                                                                    className=\"bg-light\"\n                                                                                />\n                                                                            </Form.Group>\n                                                                        </Col>\n                                                                    ))}\n                                                                </Row>\n                                                            </div>\n                                                        </Card.Body>\n                                                    </Card>\n                                                </Col>\n                                            );\n                                        }\n\n                                        const formattedLabel = key\n                                            .replace(/_/g, ' ')\n                                            .replace(/([a-z])([A-Z])/g, '$1 $2');\n\n                                        return (\n                                            <Col sm={4} key={key}>\n                                                {key === 'image' ? (\n                                                    <Form.Group className=\"d-flex flex-column\">\n                                                        <Form.Label className=\"fw-semibold text-dark\">{formattedLabel}</Form.Label>\n                                                        <Button variant=\"\" style={{ borderColor: 'green' }} className='shadow-none' onClick={() => setViewModal(true)}>\n                                                            View Image\n                                                        </Button>\n                                                    </Form.Group>\n                                                ) : Array.isArray(value) ? (\n                                                    <Form.Group>\n                                                        <Form.Label className=\"fw-semibold text-dark\">{formattedLabel}</Form.Label>\n                                                        <Form.Control\n                                                            as=\"textarea\"\n                                                            rows={Math.max(value.length, 2)}\n                                                            value={value\n                                                                .map((item) =>\n                                                                    typeof item === 'string' ? item : JSON.stringify(item)\n                                                                )\n                                                                .join('\\n')}\n                                                            disabled\n                                                            className=\"bg-light\"\n                                                        />\n                                                    </Form.Group>\n                                                ) : typeof value === 'object' && value !== null ? (\n                                                    <Form.Group>\n                                                        <Form.Label className=\"fw-semibold text-dark\">{formattedLabel}</Form.Label>\n                                                        <Form.Control\n                                                            as=\"textarea\"\n                                                            rows={2}\n                                                            value={Object.entries(value)\n                                                                .filter(\n                                                                    ([k]) =>\n                                                                        k !== 'categoryId' &&\n                                                                        k !== 'createdAt' &&\n                                                                        k !== 'updatedAt' &&\n                                                                        k !== '_id'\n                                                                )\n                                                                .map(([k, v]) => `${k}: ${v}`)\n                                                                .join('\\n')}\n                                                            disabled\n                                                            className=\"bg-light\"\n                                                        />\n                                                    </Form.Group>\n                                                ) : (\n                                                    <Form.Group>\n                                                        <Form.Label className=\"fw-semibold text-dark\">{formattedLabel}</Form.Label>\n                                                        <Form.Control\n                                                            as={\n                                                                longTextKeys.includes(key) || (typeof value === 'string' && value.length > 50)\n                                                                    ? 'textarea'\n                                                                    : 'input'\n                                                            }\n                                                            rows={\n                                                                longTextKeys.includes(key) || (typeof value === 'string' && value.length > 50)\n                                                                    ? 3\n                                                                    : undefined\n                                                            }\n                                                            type=\"text\"\n                                                            value={\n                                                                typeof value === 'string'\n                                                                    ? (() => {\n                                                                        const temp = document.createElement('div');\n                                                                        temp.innerHTML = value;\n                                                                        return temp.innerText;\n                                                                    })()\n                                                                    : String(value ?? '')\n                                                            }\n                                                            disabled\n                                                            className=\"bg-light\"\n                                                        />\n                                                    </Form.Group>\n                                                )}\n                                            </Col>\n                                        );\n                                    })}\n                                </Row>\n                            </Form>\n                        </Card.Body>\n                    </Card>\n                </Container>\n            )}\n        </>\n    );\n};\n\nexport default PostAList;\n"],"names":["_ref","open","close","img","_jsx","Modal","show","onHide","centered","size","children","Body","style","padding","display","justifyContent","Carousel","width","map","imageUrl","index","Item","height","alignItems","backgroundColor","src","alt","maxHeight","maxWidth","objectFit","initialFormState","publish","negotiable","productGenerateId","userId","status","categoryId","subCategoryId","image","type","PostAList","_store$specificProduc","_store$specificProduc2","_store$specificProduc3","_product$categoryId","_product$subCategoryI","store","useSelector","state","navigate","useNavigate","dispatch","useDispatch","loading","specificProductDataReducer","id","useParams","product","productData","control","useForm","defaultValues","viewModal","setViewModal","useState","useEffect","specificProductDataActions","filteredObject","useMemo","unwantedFields","Object","entries","filter","key","includes","reduce","obj","_ref2","value","longTextKeys","_Fragment","Loading","_jsxs","Container","className","Button","variant","onClick","handleBack","ViewImageModal","Card","Form","Row","Col","sm","Group","Label","Control","name","disabled","subCategoryName","as","rows","Product_Name","_ref3","Array","isArray","num","length","every","item","overflowY","paddingRight","spec","idx","formattedLabel","replace","borderColor","Math","max","JSON","stringify","join","_ref4","k","_ref5","v","undefined","temp","document","createElement","innerHTML","innerText","String"],"sourceRoot":""}