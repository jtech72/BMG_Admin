{"version":3,"file":"static/js/4733.8ab147b8.chunk.js","mappings":"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","sources":["helpers/Pagination.js","pages/bmg/Seller/Seller.js","helpers/PageTitle.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom'; // Assuming you are using React Router\n\nconst Pagination = ({ pageIndex, pageSize, totalPages, setPageIndex, onChangePageSize }) => {\n    useEffect(() => {\n        // Ensure pageIndex stays within bounds when totalPages changes\n        if (pageIndex > totalPages) {\n            setPageIndex(Math.max(1, totalPages)); // Keep in valid range\n        }\n    }, [pageIndex, totalPages, setPageIndex]);\n\n    return (\n        <div className=\"d-lg-flex align-items-center text-center pb-1 pt-2\">\n            {/* Page Size Selection */}\n            <div className=\"d-inline-block me-3\">\n                <label className=\"me-1\">Display :</label>\n                <select\n                    value={pageSize}\n                    onChange={(e) => {\n                        const newSize = Number(e.target.value);\n                        onChangePageSize(newSize);\n                        setPageIndex(1); // Reset to first page\n                    }}\n                    className=\"form-select d-inline-block w-auto\">\n                    {[10, 20, 50, 100].map((size) => (\n                        <option key={size} value={size}>\n                            {size}\n                        </option>\n                    ))}\n                </select>\n            </div>\n\n            {/* Page Info */}\n            <span className=\"me-3\">\n                Page{' '}\n                <strong>\n                    {pageIndex} of {totalPages}\n                </strong>\n            </span>\n\n            {/* Go to Page Input */}\n            <label>Go to page: </label>\n            <input\n                type=\"number\"\n                placeholder={`${pageIndex}`}\n                min=\"1\"\n                max={totalPages}\n                onChange={(e) => {\n                    const enteredPage = Number(e.target.value);\n                    if (enteredPage >= 1 && enteredPage <= totalPages) {\n                        setPageIndex(enteredPage);\n                    }\n                }}\n                className=\"form-control ms-1 d-inline-block\"\n                style={{ width: '80px' }}\n            />\n\n            {/* Pagination Controls */}\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0 pe-4\">\n                {/* Previous Button */}\n                {pageIndex > 1 && (\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex - 1)}>\n                        <Link to=\"#\" className=\"page-link\">\n                            Previous\n                        </Link>\n                    </li>\n                )}\n\n                {/* Page Number Buttons */}\n                {Array.from({ length: totalPages }).map((_, i) => {\n                    const page = i + 1; // Adjust index to start from 1\n                    const isCurrentPage = page === pageIndex;\n                    const isNearCurrent = page >= pageIndex - 1 && page <= pageIndex + 1;\n                    const isEdgePage = page === 1 || page === totalPages;\n\n                    if (totalPages <= 5 || isNearCurrent || isEdgePage) {\n                        return (\n                            <li\n                                key={page}\n                                className={`page-item ${isCurrentPage ? 'active' : ''}`}\n                                onClick={() => setPageIndex(page)}>\n                                <Link to=\"#\" className=\"page-link\">\n                                    {page}\n                                </Link>\n                            </li>\n                        );\n                    } else if (\n                        (page === 2 && pageIndex >= 5) ||\n                        (page === totalPages - 1 && pageIndex <= totalPages - 4)\n                    ) {\n                        return (\n                            <li key={page} className=\"page-item disabled\">\n                                <Link to=\"#\" className=\"page-link px-0\">\n                                    ...\n                                </Link>\n                            </li>\n                        );\n                    }\n\n                    return null;\n                })}\n\n                {/* Next Button */}\n                {pageIndex < totalPages && (\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex + 1)}>\n                        <Link to=\"#\" className=\"page-link\">\n                            Next\n                        </Link>\n                    </li>\n                )}\n            </ul>\n        </div>\n    );\n};\n\nexport default Pagination;\n","import { useEffect, useState } from 'react';\nimport { Row, Col, Card, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PageTitle from '../../../helpers/PageTitle';\nimport { Loading } from '../../../helpers/loader/Loading';\nimport { getBuyerSellerActions } from '../../../redux/actions';\nimport Pagination from '../../../helpers/Pagination';\nimport { useLocation } from 'react-router-dom';\nconst Buyer_Seller = () => {\n    const store = useSelector((state) => state);\n    const dispatch = useDispatch();\n    const [search, setSearch] = useState('');\n    const UserData = store?.userDataReducer?.userData?.users;\n    const UserLoading = store?.userDataReducer?.loading;\n    const [activeTab, setActiveTab] = useState(0);\n    const location = useLocation();\n    const TotalRecords = store?.userDataReducer?.userData?.totalRecords;\n    const [pageIndex, setPageIndex] = useState(1);\n    const [pageSize, setPageSize] = useState(20);\n    const [totalPages, setTotalPages] = useState(Math.ceil(TotalRecords / pageSize));\n\n    useEffect(() => {\n        setTotalPages(Math.ceil(TotalRecords / pageSize));\n    }, [TotalRecords, pageSize]);\n\n    useEffect(() => {\n        setPageIndex(1);\n    }, [location.pathname]);\n\n    useEffect(() => {\n        dispatch(\n            getBuyerSellerActions({\n                search: search,\n                limit: pageSize,\n                page: pageIndex,\n                type: 'seller',\n            })\n        );\n    }, [dispatch, pageSize, search, pageIndex]);\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Seller', path: '/bmg/sellers' },\n                    {\n                        label: 'Seller',\n                        path: '/bmg/seller',\n                        active: true,\n                    },\n                ]}\n                title={'Seller'}\n            />\n            <Row>\n                <div>\n                    {activeTab === 0 ? (\n                        <Col xs={12}>\n                            <Card\n                                style={{\n                                    boxShadow:\n                                        'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset',\n                                }}>\n                                <Card.Body className=\"text-center\">\n                                    <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                                        <span className=\"px-3 py-1 bg-dark text-light rounded\">\n                                            Total Seller: {TotalRecords || 0}\n                                        </span>\n                                        <div className=\"d-flex\">\n                                            <input\n                                                type=\"text\"\n                                                className=\"form-control w-auto me-1\"\n                                                placeholder=\"Search...\"\n                                                value={search}\n                                                onChange={(e) => setSearch(e.target.value)}\n                                            />\n                                            {search && (\n                                                <i\n                                                    className=\"mdi mdi-backspace-outline text-danger fs-3\"\n                                                    onClick={() => setSearch('')}\n                                                    style={{ cursor: 'pointer' }}></i>\n                                            )}\n                                        </div>\n                                    </div>\n\n                                    {UserLoading ? (\n                                        <>\n                                            <Loading />\n                                        </>\n                                    ) : (\n                                        <>\n                                            {UserData && UserData.length > 0 ? (\n                                                <>\n                                                    <div className=\"table-responsive\">\n                                                        <table className=\"table table-hover bg-white\">\n                                                            <thead>\n                                                                <tr className=\"text-start\">\n                                                                    <th scope=\"col\">\n                                                                        <i className=\"mdi mdi-merge\"></i>\n                                                                    </th>\n                                                                    <th scope=\"col\">Name</th>\n                                                                    <th scope=\"col\">Email</th>\n                                                                    <th scope=\"col\">Contact No</th>\n                                                                    <th scope=\"col\">Location</th>\n                                                                    {/* <th scope=\"col\">Verified</th> */}\n                                                                </tr>\n                                                            </thead>\n                                                            <tbody>\n                                                                {UserData?.map((data, index) => (\n                                                                    <tr\n                                                                        key={index}\n                                                                        className=\"text-dark fw-bold text-nowrap text-start\">\n                                                                        <th scope=\"row\">{index + 1}</th>\n\n                                                                        <td className=\"fw-bold\">\n                                                                            {data?.name || data?.lastName ? (\n                                                                                <span>\n                                                                                    {`${data?.name\n                                                                                        ?.charAt(0)\n                                                                                        .toUpperCase() || ''\n                                                                                        }${data?.name?.slice(1) || ''} ${data?.lastName\n                                                                                            ?.charAt(0)\n                                                                                            .toUpperCase() || ''\n                                                                                        }${data?.lastName?.slice(1) || ''\n                                                                                        }`.trim()}\n                                                                                </span>\n                                                                            ) : (\n                                                                                <span className=\"\">N/A</span>\n                                                                            )}\n                                                                        </td>\n\n                                                                        <td className=\"fw-bold\">\n                                                                            {data?.email ? (\n                                                                                <span>{data?.email}</span>\n                                                                            ) : (\n                                                                                <span className=\"\">N/A</span>\n                                                                            )}\n                                                                        </td>\n\n                                                                        <td className=\"fw-bold\">\n                                                                            {data?.phoneNumber ? (\n                                                                                <span>+1{data?.phoneNumber}</span>\n                                                                            ) : (\n                                                                                <span className=\"\">N/A</span>\n                                                                            )}\n                                                                        </td>\n\n                                                                        <td className=\"fw-bold text-capitalize\">\n                                                                            {data?.state && data?.city ? (\n                                                                                <span>\n                                                                                    {`${data?.state}, ${data?.city}`}\n                                                                                </span>\n                                                                            ) : (\n                                                                                <span className=\"\">N/A</span>\n                                                                            )}\n                                                                        </td>\n\n                                                                        {/* <td className=\"fw-bold\">\n                                                                            {data ? (\n                                                                                <span\n                                                                                    className={`badge ${\n                                                                                        data?.isVerified\n                                                                                            ? 'bg-success'\n                                                                                            : 'bg-danger'\n                                                                                    } px-2 py-1`}>\n                                                                                    {data?.isVerified\n                                                                                        ? '✅ Verified'\n                                                                                        : '❌ Not Verified'}\n                                                                                </span>\n                                                                            ) : (\n                                                                                <span className=\"badge bg-secondary px-2 py-1\">\n                                                                                    N/A\n                                                                                </span>\n                                                                            )}\n                                                                        </td> */}\n                                                                    </tr>\n                                                                ))}\n                                                            </tbody>\n                                                        </table>\n                                                    </div>\n                                                </>\n                                            ) : (\n                                                <div\n                                                    className=\"text-center d-flex align-items-center justify-content-center\"\n                                                    style={{ height: '30vh' }}>\n                                                    <code className=\"fs-4\">No Buyer's found.</code>\n                                                </div>\n                                            )}\n                                        </>\n                                    )}\n                                    {TotalRecords > 20 && (\n                                        <Pagination\n                                            pageIndex={pageIndex}\n                                            pageSize={pageSize}\n                                            totalPages={totalPages}\n                                            setPageIndex={setPageIndex}\n                                            onChangePageSize={setPageSize}\n                                        />\n                                    )}\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    ) : activeTab === 1 ? (\n                        <Col xs={12}>\n                            <Card\n                                style={{\n                                    boxShadow:\n                                        'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset',\n                                }}>\n                                <Card.Body className=\"text-center\">\n                                    <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                                        <span className=\"px-3 py-1 bg-dark text-light rounded\">\n                                            Total Seller's: {UserData?.length || 0}\n                                        </span>\n                                        <div className=\"d-flex\">\n                                            <input\n                                                type=\"text\"\n                                                className=\"form-control w-auto me-1\"\n                                                placeholder=\"Search...\"\n                                                value={search}\n                                                onChange={(e) => setSearch(e.target.value)}\n                                            />\n                                            {search && (\n                                                <i\n                                                    className=\"mdi mdi-backspace-outline text-danger fs-3\"\n                                                    onClick={() => setSearch('')}\n                                                    style={{ cursor: 'pointer' }}></i>\n                                            )}\n                                        </div>\n                                    </div>\n\n                                    {UserLoading ? (\n                                        <>\n                                            <Loading />\n                                        </>\n                                    ) : (\n                                        <>\n                                            {UserData && UserData?.length > 0 ? (\n                                                <>\n                                                    <div className=\"table-responsive\">\n                                                        <table className=\"table table-striped bg-white\">\n                                                            <thead>\n                                                                <tr className=\"\" style={{ color: '#703133' }}>\n                                                                    <th scope=\"col\">\n                                                                        <i className=\"mdi mdi-merge\"></i>\n                                                                    </th>\n                                                                    <th scope=\"col\">Name</th>\n                                                                    <th scope=\"col\">Email</th>\n                                                                    <th scope=\"col\">Contact No</th>\n                                                                    <th scope=\"col\">Location</th>\n                                                                    <th scope=\"col\">Verified</th>\n                                                                </tr>\n                                                            </thead>\n                                                            <tbody>\n                                                                {UserData?.map((data, index) => (\n                                                                    <tr\n                                                                        key={index}\n                                                                        className=\"text-dark fw-bold text-nowrap\">\n                                                                        <th scope=\"row\">{index + 1}</th>\n                                                                        <td className=\"fw-bold text-info\">\n                                                                            {data?.name || data?.lastName ? (\n                                                                                <span>\n                                                                                    {`${data?.name\n                                                                                        ?.charAt(0)\n                                                                                        .toUpperCase() || ''\n                                                                                        }${data?.name?.slice(1) || ''} \n                                                                                          ${data?.lastName\n                                                                                            ?.charAt(0)\n                                                                                            .toUpperCase() || ''\n                                                                                        }${data?.lastName?.slice(1) || ''\n                                                                                        }`}\n                                                                                </span>\n                                                                            ) : (\n                                                                                <span className=\"d-flex text-danger justify-content-center\">\n                                                                                    N/A\n                                                                                </span>\n                                                                            )}\n                                                                        </td>\n\n                                                                        <td className=\"fw-bold text-success\">\n                                                                            {data?.email ? (\n                                                                                <span>{data?.email} </span>\n                                                                            ) : (\n                                                                                <span className=\"d-flex text-danger justify-content-center\">\n                                                                                    N/A\n                                                                                </span>\n                                                                            )}\n                                                                        </td>\n                                                                        <td className=\"fw-bold\">\n                                                                            {data?.phoneNumber ? (\n                                                                                <span>{data?.phoneNumber} </span>\n                                                                            ) : (\n                                                                                <span className=\"d-flex text-danger justify-content-center\">\n                                                                                    N/A\n                                                                                </span>\n                                                                            )}\n                                                                        </td>\n                                                                        <td className=\"fw-bold text-primary\">\n                                                                            {data?.primaryAddress ? (\n                                                                                <span>\n                                                                                    {`${data?.primaryAddress?.address ||\n                                                                                        ''\n                                                                                        }, \n        ${data?.primaryAddress?.street || ''}, \n        ${data?.primaryAddress?.city?.name || ''}, \n        ${data?.primaryAddress?.state?.name || ''}, \n        ${data?.primaryAddress?.country?.name || ''}`\n                                                                                        .replace(/,\\s*,/g, ',') // Remove empty commas\n                                                                                        .trim()}\n                                                                                </span>\n                                                                            ) : (\n                                                                                <span className=\"d-flex text-danger justify-content-center\">\n                                                                                    N/A\n                                                                                </span>\n                                                                            )}\n                                                                        </td>\n\n                                                                        <td className=\"text-uppercase fw-bold\">\n                                                                            {data ? (\n                                                                                <span\n                                                                                    className={`badge ${data?.isVerified\n                                                                                        ? 'bg-success'\n                                                                                        : 'bg-danger'\n                                                                                        } px-2 py-1`}>\n                                                                                    {data?.isVerified\n                                                                                        ? '✅ Verified'\n                                                                                        : '❌ Not Verified'}\n                                                                                </span>\n                                                                            ) : (\n                                                                                <span className=\"badge bg-secondary px-2 py-1\">\n                                                                                    N/A\n                                                                                </span>\n                                                                            )}\n                                                                        </td>\n                                                                    </tr>\n                                                                ))}\n                                                            </tbody>\n                                                        </table>\n                                                    </div>\n                                                </>\n                                            ) : (\n                                                <div\n                                                    className=\"text-center d-flex align-items-center justify-content-center\"\n                                                    style={{ height: '30vh' }}>\n                                                    <code className=\"fs-4\">No Seller's found.</code>\n                                                </div>\n                                            )}\n                                        </>\n                                    )}\n                                    {TotalRecords > 20 && (\n                                        <Pagination\n                                            pageIndex={pageIndex}\n                                            pageSize={pageSize}\n                                            totalPages={totalPages}\n                                            setPageIndex={setPageIndex}\n                                            onChangePageSize={setPageSize}\n                                        />)}\n\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    ) : null}\n                </div>\n            </Row>\n        </>\n    );\n};\n\nexport default Buyer_Seller;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            {/* <Breadcrumb.Item href=\"/\" ><span className='custom-color'>Dashboard</span></Breadcrumb.Item> */}\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index} >\n                                        <span className='custom-color'>{item.label}</span>\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path} >\n                                        <span className='custom-color'>{item.label}</span>\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title custom-color\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n"],"names":["_ref","pageIndex","pageSize","totalPages","setPageIndex","onChangePageSize","useEffect","Math","max","_jsxs","className","children","_jsx","value","onChange","e","newSize","Number","target","map","size","type","placeholder","min","enteredPage","style","width","onClick","Link","to","Array","from","length","_","i","page","isCurrentPage","Buyer_Seller","_store$userDataReduce","_store$userDataReduce2","_store$userDataReduce3","_store$userDataReduce4","_store$userDataReduce5","store","useSelector","state","dispatch","useDispatch","search","setSearch","useState","UserData","userDataReducer","userData","users","UserLoading","loading","activeTab","setActiveTab","location","useLocation","TotalRecords","totalRecords","setPageSize","setTotalPages","ceil","pathname","getBuyerSellerActions","limit","_Fragment","PageTitle","breadCrumbItems","label","path","active","title","Row","Col","xs","Card","boxShadow","Body","cursor","Loading","scope","data","index","_data$name","_data$name2","_data$lastName","_data$lastName2","name","lastName","charAt","toUpperCase","slice","trim","email","phoneNumber","city","height","Pagination","color","_data$name3","_data$name4","_data$lastName3","_data$lastName4","_data$primaryAddress","_data$primaryAddress2","_data$primaryAddress3","_data$primaryAddress4","_data$primaryAddress5","_data$primaryAddress6","_data$primaryAddress7","_data$primaryAddress8","primaryAddress","address","street","country","replace","isVerified","props","Breadcrumb","listProps","item","Item","href"],"sourceRoot":""}