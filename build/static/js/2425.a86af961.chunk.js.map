{"version":3,"file":"static/js/2425.a86af961.chunk.js","mappings":"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","sources":["pages/bmg/location/Cities.js","helpers/Pagination.js","helpers/PageTitle.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { Row, Col, Card, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PageTitle from '../../../helpers/PageTitle';\r\nimport { getCitiesByStateAction, updateCityAction, resetLocationAction } from '../../../redux/actions';\r\nimport { Loading } from '../../../helpers/loader/Loading';\r\nimport Pagination from '../../../helpers/Pagination';\r\nimport { Link, useNavigate, useParams } from 'react-router-dom';\r\nconst Cities = () => {\r\n    const store = useSelector((state) => state);\r\n    const dispatch = useDispatch();\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const [search, setSearch] = useState('');\r\n    const CitiesData = store?.getCitiesByIdReducer?.locationData?.cities;\r\n    const CitiesLoading = store?.getCitiesByIdReducer?.loading || store?.updateCityReducer?.loading;\r\n    const updateStatus = store?.updateCityReducer?.locationData?.status;\r\n    const TotalRecords = store?.getCitiesByIdReducer?.locationData?.totalCities || 0;\r\n    const [pageIndex, setPageIndex] = useState(1);\r\n    const [pageSize, setPageSize] = useState(20);\r\n    const [totalPages, setTotalPages] = useState(Math.ceil(TotalRecords / pageSize));\r\n\r\n    useEffect(() => {\r\n        setTotalPages(Math.ceil(TotalRecords / pageSize));\r\n    }, [TotalRecords, pageSize]);\r\n\r\n    useEffect(() => {\r\n        dispatch(getCitiesByStateAction({ id, limit: pageSize, page: pageIndex }));\r\n    }, [dispatch, id, pageSize, pageIndex, search]);\r\n\r\n    useEffect(() => {\r\n        if (updateStatus && updateStatus === 201) {\r\n            dispatch(getCitiesByStateAction({ id, limit: pageSize, page: pageIndex }));\r\n            dispatch(resetLocationAction());\r\n        }\r\n    }, [updateStatus, dispatch]);\r\n\r\n    return (\r\n        <>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'States', path: `/bmg/cities/${id}` },\r\n                    {\r\n                        label: 'Cities',\r\n                        path: `/bmg/cities/${id}`,\r\n                        active: true,\r\n                    },\r\n                ]}\r\n                title={'Cities'}\r\n            />\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Card\r\n                        style={{\r\n                            boxShadow:\r\n                                'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset',\r\n                        }}>\r\n                        <Card.Body className=\"text-center\">\r\n                            <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                                <span><button className='rounded-pill px-1 bg-dark text-light' onClick={() => navigate(-1)}><i class=\"mdi mdi-arrow-left\"></i> Back</button></span>\r\n                                <span className=\"px-3 py-1 bg-dark text-light rounded\">\r\n                                    Total Cities: {TotalRecords || 0}\r\n                                </span>\r\n                                {/* <div className=\"d-flex\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control w-auto me-1\"\r\n                                        placeholder=\"Search...\"\r\n                                        value={search}\r\n                                        onChange={(e) => setSearch(e.target.value)}\r\n                                    />\r\n                                    {search && (\r\n                                        <i\r\n                                            className=\"mdi mdi-backspace-outline text-danger fs-3\"\r\n                                            onClick={() => setSearch(\"\")}\r\n                                            style={{ cursor: \"pointer\" }}\r\n                                        ></i>\r\n                                    )}\r\n                                </div> */}\r\n                            </div>\r\n\r\n                            {CitiesLoading ? (\r\n                                <>\r\n                                    <Loading />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    {CitiesData && CitiesData?.length > 0 ? (\r\n                                        <>\r\n                                            <div className=\"table-responsive\">\r\n                                                <table className=\"table text-start table-striped bg-white \">\r\n                                                    <thead>\r\n                                                        <tr className=\"text-nowrap\">\r\n                                                            <th scope=\"col\">\r\n                                                                <i className=\"mdi mdi-merge\"></i>\r\n                                                            </th>\r\n                                                            <th scope=\"col\">City</th>\r\n                                                            <th scope=\"col\">Country Code</th>\r\n                                                            <th scope=\"col\">Country ID #</th>\r\n                                                            <th scope=\"col\">State Code</th>\r\n                                                            <th scope=\"col\">State ID #</th>\r\n                                                            <th scope=\"col\">Status</th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {CitiesData?.map((data, index) => (\r\n                                                            <tr key={index} className=\"text-dark fw-bold text-nowrap\">\r\n                                                                <th scope=\"row\">{(pageIndex - 1) * pageSize + index + 1}</th>\r\n                                                                <td className=\"fw-bold \">\r\n                                                                    {data?.name ? (\r\n                                                                        <span>{data?.name} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className=\"fw-bold \">\r\n                                                                    {data?.country_code ? (\r\n                                                                        <span>{data?.country_code} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className=\"fw-bold \">\r\n                                                                    {data?.country_id ? (\r\n                                                                        <span>{data?.country_id} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className=\"fw-bold \">\r\n                                                                    {data?.state_code ? (\r\n                                                                        <span>{data?.state_code} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className=\"fw-bold \">\r\n                                                                    {data?.id ? (\r\n                                                                        <span>{data?.id} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className=\"fw-bold \">\r\n                                                                    <div className=\"form-check form-switch\">\r\n                                                                        <input\r\n                                                                            className=\"form-check-input\"\r\n                                                                            type=\"checkbox\"\r\n                                                                            role=\"switch\"\r\n                                                                            id={`status-toggle-${data._id}`}\r\n                                                                            checked={data.status}\r\n                                                                            onChange={() => {\r\n                                                                                dispatch(updateCityAction({\r\n                                                                                    id: data?._id,\r\n                                                                                    status: !data?.status,\r\n                                                                                }));\r\n                                                                            }}\r\n                                                                        />\r\n                                                                        <label className=\"form-check-label\" htmlFor={`status-toggle-${data._id}`}>\r\n                                                                            {data.status ? 'Active' : 'Inactive'}\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                </td>\r\n                                                            </tr>\r\n                                                        ))}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </>\r\n                                    ) : (\r\n                                        <div\r\n                                            className=\"text-center d-flex align-items-center justify-content-center\"\r\n                                            style={{ height: '30vh' }}>\r\n                                            <code className=\"fs-4\">No Cities were found.</code>\r\n                                        </div>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                            {TotalRecords > 20 && (\r\n                                <Pagination\r\n                                    pageIndex={pageIndex}\r\n                                    pageSize={pageSize}\r\n                                    totalPages={totalPages}\r\n                                    setPageIndex={setPageIndex}\r\n                                    onChangePageSize={setPageSize}\r\n                                />\r\n                            )}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Cities;\r\n","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'; // Assuming you are using React Router\r\n\r\nconst Pagination = ({ pageIndex, pageSize, totalPages, setPageIndex, onChangePageSize }) => {\r\n    useEffect(() => {\r\n        // Ensure pageIndex stays within bounds when totalPages changes\r\n        if (pageIndex > totalPages) {\r\n            setPageIndex(Math.max(1, totalPages)); // Keep in valid range\r\n        }\r\n    }, [pageIndex, totalPages, setPageIndex]);\r\n\r\n    return (\r\n        <div className=\"d-lg-flex align-items-center text-center pb-1 pt-2\">\r\n            {/* Page Size Selection */}\r\n            <div className=\"d-inline-block me-3\">\r\n                <label className=\"me-1\">Display :</label>\r\n                <select\r\n                    value={pageSize}\r\n                    onChange={(e) => {\r\n                        const newSize = Number(e.target.value);\r\n                        onChangePageSize(newSize);\r\n                        setPageIndex(1); // Reset to first page\r\n                    }}\r\n                    className=\"form-select d-inline-block w-auto\">\r\n                    {[10, 20, 50, 100].map((size) => (\r\n                        <option key={size} value={size}>\r\n                            {size}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            {/* Page Info */}\r\n            <span className=\"me-3\">\r\n                Page{' '}\r\n                <strong>\r\n                    {pageIndex} of {totalPages}\r\n                </strong>\r\n            </span>\r\n\r\n            {/* Go to Page Input */}\r\n            <label>Go to page: </label>\r\n            <input\r\n                type=\"number\"\r\n                placeholder={`${pageIndex}`}\r\n                min=\"1\"\r\n                max={totalPages}\r\n                onChange={(e) => {\r\n                    const enteredPage = Number(e.target.value);\r\n                    if (enteredPage >= 1 && enteredPage <= totalPages) {\r\n                        setPageIndex(enteredPage);\r\n                    }\r\n                }}\r\n                className=\"form-control ms-1 d-inline-block\"\r\n                style={{ width: '80px' }}\r\n            />\r\n\r\n            {/* Pagination Controls */}\r\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0 pe-4\">\r\n                {/* Previous Button */}\r\n                {pageIndex > 1 && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex - 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            Previous\r\n                        </Link>\r\n                    </li>\r\n                )}\r\n\r\n                {/* Page Number Buttons */}\r\n                {Array.from({ length: totalPages }).map((_, i) => {\r\n                    const page = i + 1; // Adjust index to start from 1\r\n                    const isCurrentPage = page === pageIndex;\r\n                    const isNearCurrent = page >= pageIndex - 1 && page <= pageIndex + 1;\r\n                    const isEdgePage = page === 1 || page === totalPages;\r\n\r\n                    if (totalPages <= 5 || isNearCurrent || isEdgePage) {\r\n                        return (\r\n                            <li\r\n                                key={page}\r\n                                className={`page-item ${isCurrentPage ? 'active' : ''}`}\r\n                                onClick={() => setPageIndex(page)}>\r\n                                <Link to=\"#\" className=\"page-link\">\r\n                                    {page}\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    } else if (\r\n                        (page === 2 && pageIndex >= 5) ||\r\n                        (page === totalPages - 1 && pageIndex <= totalPages - 4)\r\n                    ) {\r\n                        return (\r\n                            <li key={page} className=\"page-item disabled\">\r\n                                <Link to=\"#\" className=\"page-link px-0\">\r\n                                    ...\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    }\r\n\r\n                    return null;\r\n                })}\r\n\r\n                {/* Next Button */}\r\n                {pageIndex < totalPages && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex + 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            Next\r\n                        </Link>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","// @flow\r\nimport React from 'react';\r\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\r\n\r\ntype BreadcrumbItems = {\r\n    label: string,\r\n    path: string,\r\n    active?: boolean,\r\n};\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: Array<BreadcrumbItems>,\r\n    title: string,\r\n};\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\r\n                            {/* <Breadcrumb.Item href=\"/\" ><span className='custom-color'>Dashboard</span></Breadcrumb.Item> */}\r\n                            {props.breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <Breadcrumb.Item active key={index} >\r\n                                        <span className='custom-color'>{item.label}</span>\r\n                                    </Breadcrumb.Item>\r\n                                ) : (\r\n                                    <Breadcrumb.Item key={index} href={item.path} >\r\n                                        <span className='custom-color'>{item.label}</span>\r\n                                    </Breadcrumb.Item>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title custom-color\">{props.title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n"],"names":["Cities","_store$getCitiesByIdR","_store$getCitiesByIdR2","_store$getCitiesByIdR3","_store$updateCityRedu","_store$updateCityRedu2","_store$updateCityRedu3","_store$getCitiesByIdR4","_store$getCitiesByIdR5","store","useSelector","state","dispatch","useDispatch","id","useParams","navigate","useNavigate","search","setSearch","useState","CitiesData","getCitiesByIdReducer","locationData","cities","CitiesLoading","loading","updateCityReducer","updateStatus","status","TotalRecords","totalCities","pageIndex","setPageIndex","pageSize","setPageSize","totalPages","setTotalPages","Math","ceil","useEffect","getCitiesByStateAction","limit","page","resetLocationAction","_jsxs","_Fragment","children","_jsx","PageTitle","breadCrumbItems","label","path","concat","active","title","Row","Col","xs","Card","style","boxShadow","Body","className","onClick","class","Loading","length","scope","map","data","index","name","country_code","country_id","state_code","type","role","_id","checked","onChange","updateCityAction","htmlFor","height","Pagination","onChangePageSize","_ref","max","value","e","newSize","Number","target","size","placeholder","min","enteredPage","width","Link","to","Array","from","_","i","isCurrentPage","props","Breadcrumb","listProps","item","Item","href"],"sourceRoot":""}