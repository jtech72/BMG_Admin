{"version":3,"file":"static/js/858.2caf7255.chunk.js","mappings":"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","sources":["../node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","../node_modules/react-hook-form/src/utils/isDateObject.ts","../node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","../node_modules/react-hook-form/src/utils/isObject.ts","../node_modules/react-hook-form/src/logic/getEventValue.ts","../node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","../node_modules/react-hook-form/src/logic/getNodeParentName.ts","../node_modules/react-hook-form/src/utils/isPlainObject.ts","../node_modules/react-hook-form/src/utils/isWeb.ts","../node_modules/react-hook-form/src/utils/cloneObject.ts","../node_modules/react-hook-form/src/utils/compact.ts","../node_modules/react-hook-form/src/utils/isUndefined.ts","../node_modules/react-hook-form/src/utils/get.ts","../node_modules/react-hook-form/src/utils/isBoolean.ts","../node_modules/react-hook-form/src/utils/isKey.ts","../node_modules/react-hook-form/src/utils/stringToPath.ts","../node_modules/react-hook-form/src/utils/set.ts","../node_modules/react-hook-form/src/constants.ts","../node_modules/react-hook-form/src/useFormContext.tsx","../node_modules/react-hook-form/src/logic/getProxyFormState.ts","../node_modules/react-hook-form/src/utils/isPrimitive.ts","../node_modules/react-hook-form/src/utils/deepEqual.ts","../node_modules/react-hook-form/src/utils/isString.ts","../node_modules/react-hook-form/src/logic/generateWatchOutput.ts","../node_modules/react-hook-form/src/logic/appendErrors.ts","../node_modules/react-hook-form/src/utils/convertToArrayPayload.ts","../node_modules/react-hook-form/src/utils/createSubject.ts","../node_modules/react-hook-form/src/utils/isEmptyObject.ts","../node_modules/react-hook-form/src/utils/isFileInput.ts","../node_modules/react-hook-form/src/utils/isFunction.ts","../node_modules/react-hook-form/src/utils/isHTMLElement.ts","../node_modules/react-hook-form/src/utils/isMultipleSelect.ts","../node_modules/react-hook-form/src/utils/isRadioInput.ts","../node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","../node_modules/react-hook-form/src/utils/live.ts","../node_modules/react-hook-form/src/utils/unset.ts","../node_modules/react-hook-form/src/utils/objectHasFunction.ts","../node_modules/react-hook-form/src/logic/getDirtyFields.ts","../node_modules/react-hook-form/src/logic/getCheckboxValue.ts","../node_modules/react-hook-form/src/logic/getFieldValueAs.ts","../node_modules/react-hook-form/src/logic/getRadioValue.ts","../node_modules/react-hook-form/src/logic/getFieldValue.ts","../node_modules/react-hook-form/src/logic/getResolverOptions.ts","../node_modules/react-hook-form/src/utils/isRegex.ts","../node_modules/react-hook-form/src/logic/getRuleValue.ts","../node_modules/react-hook-form/src/logic/getValidationModes.ts","../node_modules/react-hook-form/src/logic/hasPromiseValidation.ts","../node_modules/react-hook-form/src/logic/hasValidation.ts","../node_modules/react-hook-form/src/logic/isWatched.ts","../node_modules/react-hook-form/src/logic/iterateFieldsByAction.ts","../node_modules/react-hook-form/src/logic/schemaErrorLookup.ts","../node_modules/react-hook-form/src/logic/shouldRenderFormState.ts","../node_modules/react-hook-form/src/logic/shouldSubscribeByName.ts","../node_modules/react-hook-form/src/logic/skipValidation.ts","../node_modules/react-hook-form/src/logic/unsetEmptyArray.ts","../node_modules/react-hook-form/src/logic/updateFieldArrayRootError.ts","../node_modules/react-hook-form/src/utils/isMessage.ts","../node_modules/react-hook-form/src/logic/getValidateError.ts","../node_modules/react-hook-form/src/logic/getValueAndMessage.ts","../node_modules/react-hook-form/src/logic/validateField.ts","../node_modules/react-hook-form/src/logic/createFormControl.ts","../node_modules/react-hook-form/src/logic/generateId.ts","../node_modules/react-hook-form/src/logic/getFocusFieldName.ts","../node_modules/react-hook-form/src/utils/append.ts","../node_modules/react-hook-form/src/utils/fillEmptyArray.ts","../node_modules/react-hook-form/src/utils/insert.ts","../node_modules/react-hook-form/src/utils/move.ts","../node_modules/react-hook-form/src/utils/prepend.ts","../node_modules/react-hook-form/src/utils/remove.ts","../node_modules/react-hook-form/src/utils/swap.ts","../node_modules/react-hook-form/src/utils/update.ts","../node_modules/react-hook-form/src/useFieldArray.ts","../node_modules/react-hook-form/src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown): value is object =>\n  typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","import isObject from './isObject';\n\nexport default (tempObject: object) => {\n  const prototypeCopy =\n    tempObject.constructor && tempObject.constructor.prototype;\n\n  return (\n    isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf')\n  );\n};\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isObject from './isObject';\nimport isPlainObject from './isPlainObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n  const isFileListInstance =\n    typeof FileList !== 'undefined' ? data instanceof FileList : false;\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || isFileListInstance)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : {};\n\n    if (!isArray && !isPlainObject(data)) {\n      copy = data;\n    } else {\n      for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n          copy[key] = cloneObject(data[key]);\n        }\n      }\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(\n  object: T,\n  path?: string | null,\n  defaultValue?: unknown,\n): any => {\n  if (!path || !isObject(object)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    object,\n  );\n\n  return isUndefined(result) || result === object\n    ? isUndefined(object[path as keyof T])\n      ? defaultValue\n      : object[path as keyof T]\n    : result;\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldPath, FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default (\n  object: FieldValues,\n  path: FieldPath<FieldValues>,\n  value?: unknown,\n) => {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n            ? []\n            : {};\n    }\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return;\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n};\n","export const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n} as const;\n\nexport const VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n} as const;\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n} as const;\n","import React from 'react';\n\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TTransformedValues = TFieldValues,\n>(): UseFormReturn<TFieldValues, TContext, TTransformedValues> =>\n  React.useContext(HookFormContext) as UseFormReturn<\n    TFieldValues,\n    TContext,\n    TTransformedValues\n  >;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TTransformedValues = TFieldValues,\n>(\n  props: FormProviderProps<TFieldValues, TContext, TTransformedValues>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {children}\n    </HookFormContext.Provider>\n  );\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Control, FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TTransformedValues = TFieldValues,\n>(\n  formState: FormState<TFieldValues>,\n  control: Control<TFieldValues, TContext, TTransformedValues>,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {\n    defaultValues: control._defaultValues,\n  } as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { DeepPartial, FieldValues, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default <T>(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n  defaultValue?: DeepPartial<T> | unknown,\n) => {\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names, defaultValue);\n  }\n\n  if (Array.isArray(names)) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n\n  return formValues;\n};\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default <T>(): Subject<T> => {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next && observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isWeb from './isWeb';\n\nexport default (value: unknown): value is HTMLElement => {\n  if (!isWeb) {\n    return false;\n  }\n\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  return (\n    value instanceof\n    (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement)\n  );\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction isEmptyArray(obj: unknown[]) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default function unset(object: any, path: string | (string | number)[]) {\n  const paths = Array.isArray(path)\n    ? path\n    : isKey(path)\n      ? [path]\n      : stringToPath(path);\n\n  const childObject = paths.length === 1 ? object : baseGet(object, paths);\n\n  const index = paths.length - 1;\n  const key = paths[index];\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  if (\n    index !== 0 &&\n    ((isObject(childObject) && isEmptyObject(childObject)) ||\n      (Array.isArray(childObject) && isEmptyArray(childObject)))\n  ) {\n    unset(object, paths.slice(0, -1));\n  }\n\n  return object;\n}\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<T>(data: T, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: Record<\n    Extract<keyof T, string>,\n    ReturnType<typeof markFieldsDirty> | boolean\n  >,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n      ? value === ''\n        ? NaN\n        : value\n          ? +value\n          : value\n      : valueAsDate && isString(value)\n        ? new Date(value)\n        : setValueAs\n          ? setValueAs(value)\n          : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n      ? rule.source\n      : isObject(rule)\n        ? isRegex(rule.value)\n          ? rule.value.source\n          : rule.value\n        : rule;\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode, ValidationModeFlags } from '../types';\n\nexport default (mode?: Mode): ValidationModeFlags => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import { Field, Validate } from '../types';\nimport isFunction from '../utils/isFunction';\nimport isObject from '../utils/isObject';\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\n\nexport default (fieldReference: Field['_f']) =>\n  !!fieldReference &&\n  !!fieldReference.validate &&\n  !!(\n    (isFunction(fieldReference.validate) &&\n      fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n    (isObject(fieldReference.validate) &&\n      Object.values(fieldReference.validate).find(\n        (validateFunction: Validate<unknown, unknown>) =>\n          validateFunction.constructor.name === ASYNC_FUNCTION,\n      ))\n  );\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import { FieldRefs, InternalFieldName, Ref } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\n\nconst iterateFieldsByAction = (\n  fields: FieldRefs,\n  action: (ref: Ref, name: string) => 1 | undefined | void,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[] | 0,\n  abortEarly?: boolean,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f) {\n        if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n          return true;\n        } else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n          return true;\n        } else {\n          if (iterateFieldsByAction(currentField, action)) {\n            break;\n          }\n        }\n      } else if (isObject(currentField)) {\n        if (iterateFieldsByAction(currentField as FieldRefs, action)) {\n          break;\n        }\n      }\n    }\n  }\n  return;\n};\nexport default iterateFieldsByAction;\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup<T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import { VALIDATION_MODE } from '../constants';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  ReadFormState,\n} from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends FieldValues, K extends ReadFormState>(\n  formStateData: Partial<FormState<T>> & {\n    name?: InternalFieldName;\n    values?: T;\n  },\n  _proxyFormState: K,\n  updateFormState: (formState: Partial<FormState<T>>) => void,\n  isRoot?: boolean,\n) => {\n  updateFormState(formStateData);\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  !name ||\n  !signalName ||\n  name === signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (exact\n        ? currentName === signalName\n        : currentName.startsWith(signalName) ||\n          signalName.startsWith(currentName)),\n  );\n","import { ValidationModeFlags } from '../types';\n\nexport default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<ValidationModeFlags>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport get from '../utils/get';\nimport set from '../utils/set';\n\nexport default <T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  error: Partial<Record<string, FieldError>>,\n  name: InternalFieldName,\n): FieldErrors<T> => {\n  const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n  set(fieldArrayErrors, 'root', error[name]);\n  set(errors, name, fieldArrayErrors);\n  return errors;\n};\n","import { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message => isString(value);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  FieldValues,\n  InternalFieldErrors,\n  InternalNameSet,\n  MaxType,\n  Message,\n  MinType,\n  NativeFieldValue,\n} from '../types';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends FieldValues>(\n  field: Field,\n  disabledFieldNames: InternalNameSet,\n  formValues: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n  isFieldArray?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n  } = field._f;\n  const inputValue: NativeFieldValue = get(formValues, name);\n  if (!mount || disabledFieldNames.has(name)) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) &&\n      isUndefined(ref.value) &&\n      isUndefined(inputValue)) ||\n    (isHTMLElement(ref) && ref.value === '') ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType: MaxType = INPUT_VALIDATION_RULES.maxLength,\n    minType: MinType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    isFieldArray\n      ? !Array.isArray(inputValue) || !inputValue.length\n      : required &&\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n          (isBoolean(inputValue) && !inputValue) ||\n          (isCheckBox && !getCheckboxValue(refs).isValid) ||\n          (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        (inputValue ? +inputValue : inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      const convertTimeToDate = (time: unknown) =>\n        new Date(new Date().toDateString() + ' ' + time);\n      const isTime = ref.type == 'time';\n      const isWeek = ref.type == 'week';\n\n      if (isString(maxOutput.value) && inputValue) {\n        exceedMax = isTime\n          ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n          : isWeek\n            ? inputValue > maxOutput.value\n            : valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value) && inputValue) {\n        exceedMin = isTime\n          ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n          : isWeek\n            ? inputValue < minOutput.value\n            : valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (\n    (maxLength || minLength) &&\n    !isEmpty &&\n    (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))\n  ) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > +maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < +minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue, formValues);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue, formValues),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  Control,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  FromSubscribe,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  ReadFormState,\n  Ref,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  UseFromSubscribe,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport getValidationModes from './getValidationModes';\nimport hasPromiseValidation from './hasPromiseValidation';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport iterateFieldsByAction from './iterateFieldsByAction';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport shouldRenderFormState from './shouldRenderFormState';\nimport shouldSubscribeByName from './shouldSubscribeByName';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport updateFieldArrayRootError from './updateFieldArrayRootError';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n  TTransformedValues = TFieldValues,\n>(\n  props: UseFormProps<TFieldValues, TContext, TTransformedValues> = {},\n): Omit<\n  UseFormReturn<TFieldValues, TContext, TTransformedValues>,\n  'formState'\n> & {\n  formControl: Omit<\n    UseFormReturn<TFieldValues, TContext, TTransformedValues>,\n    'formState'\n  >;\n} {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    submitCount: 0,\n    isDirty: false,\n    isReady: false,\n    isLoading: isFunction(_options.defaultValues),\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    touchedFields: {},\n    dirtyFields: {},\n    validatingFields: {},\n    errors: _options.errors || {},\n    disabled: _options.disabled || false,\n  };\n  const _fields: FieldRefs = {};\n  let _defaultValues =\n    isObject(_options.defaultValues) || isObject(_options.values)\n      ? cloneObject(_options.values || _options.defaultValues) || {}\n      : {};\n  let _formValues = _options.shouldUnregister\n    ? ({} as TFieldValues)\n    : (cloneObject(_defaultValues) as TFieldValues);\n  let _state = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    disabled: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  };\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  const _proxyFormState: ReadFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    validatingFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  let _proxySubscribeFormState = {\n    ..._proxyFormState,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    array: createSubject(),\n    state: createSubject(),\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = setTimeout(callback, wait);\n    };\n\n  const _setValid = async (shouldUpdateValid?: boolean) => {\n    if (\n      !_options.disabled &&\n      (_proxyFormState.isValid ||\n        _proxySubscribeFormState.isValid ||\n        shouldUpdateValid)\n    ) {\n      const isValid = _options.resolver\n        ? isEmptyObject((await _runSchema()).errors)\n        : await executeBuiltInValidation(_fields, true);\n\n      if (isValid !== _formState.isValid) {\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n  };\n\n  const _updateIsValidating = (names?: string[], isValidating?: boolean) => {\n    if (\n      !_options.disabled &&\n      (_proxyFormState.isValidating ||\n        _proxyFormState.validatingFields ||\n        _proxySubscribeFormState.isValidating ||\n        _proxySubscribeFormState.validatingFields)\n    ) {\n      (names || Array.from(_names.mount)).forEach((name) => {\n        if (name) {\n          isValidating\n            ? set(_formState.validatingFields, name, isValidating)\n            : unset(_formState.validatingFields, name);\n        }\n      });\n\n      _subjects.state.next({\n        validatingFields: _formState.validatingFields,\n        isValidating: !isEmptyObject(_formState.validatingFields),\n      });\n    }\n  };\n\n  const _setFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method && !_options.disabled) {\n      _state.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        (_proxyFormState.touchedFields ||\n          _proxySubscribeFormState.touchedFields) &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        name,\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const _setErrors = (errors: FieldErrors<TFieldValues>) => {\n    _formState.errors = errors;\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: false,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _state.mount && _setValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let shouldUpdateField = false;\n    let isPreviousDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n\n    if (!_options.disabled) {\n      if (!isBlurEvent || shouldDirty) {\n        if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {\n          isPreviousDirty = _formState.isDirty;\n          _formState.isDirty = output.isDirty = _getDirty();\n          shouldUpdateField = isPreviousDirty !== output.isDirty;\n        }\n\n        const isCurrentFieldPristine = deepEqual(\n          get(_defaultValues, name),\n          fieldValue,\n        );\n\n        isPreviousDirty = !!get(_formState.dirtyFields, name);\n        isCurrentFieldPristine\n          ? unset(_formState.dirtyFields, name)\n          : set(_formState.dirtyFields, name, true);\n        output.dirtyFields = _formState.dirtyFields;\n        shouldUpdateField =\n          shouldUpdateField ||\n          ((_proxyFormState.dirtyFields ||\n            _proxySubscribeFormState.dirtyFields) &&\n            isPreviousDirty !== !isCurrentFieldPristine);\n      }\n\n      if (isBlurEvent) {\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n        if (!isPreviousFieldTouched) {\n          set(_formState.touchedFields, name, isBlurEvent);\n          output.touchedFields = _formState.touchedFields;\n          shouldUpdateField =\n            shouldUpdateField ||\n            ((_proxyFormState.touchedFields ||\n              _proxySubscribeFormState.touchedFields) &&\n              isPreviousFieldTouched !== isBlurEvent);\n        }\n      }\n\n      shouldUpdateField && shouldRender && _subjects.state.next(output);\n    }\n\n    return shouldUpdateField ? output : {};\n  };\n\n  const shouldRenderByError = (\n    name: InternalFieldName,\n    isValid?: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      (_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n      isBoolean(isValid) &&\n      _formState.isValid !== isValid;\n\n    if (_options.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(_options.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n  };\n\n  const _runSchema = async (name?: InternalFieldName[]) => {\n    _updateIsValidating(name, true);\n    const result = await _options.resolver!(\n      _formValues as TFieldValues,\n      _options.context,\n      getResolverOptions(\n        name || _names.mount,\n        _fields,\n        _options.criteriaMode,\n        _options.shouldUseNativeValidation,\n      ),\n    );\n    _updateIsValidating(name);\n    return result;\n  };\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _runSchema(names);\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuiltInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context: {\n      valid: boolean;\n    } = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f, ...fieldValue } = field as Field;\n\n        if (_f) {\n          const isFieldArrayRoot = _names.array.has(_f.name);\n          const isPromiseFunction =\n            field._f && hasPromiseValidation((field as Field)._f);\n\n          if (isPromiseFunction && _proxyFormState.validatingFields) {\n            _updateIsValidating([name], true);\n          }\n\n          const fieldError = await validateField(\n            field as Field,\n            _names.disabled,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation && !shouldOnlyCheckValid,\n            isFieldArrayRoot,\n          );\n\n          if (isPromiseFunction && _proxyFormState.validatingFields) {\n            _updateIsValidating([name]);\n          }\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          !shouldOnlyCheckValid &&\n            (get(fieldError, _f.name)\n              ? isFieldArrayRoot\n                ? updateFieldArrayRootError(\n                    _formState.errors,\n                    fieldError,\n                    _f.name,\n                  )\n                : set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name));\n        }\n\n        !isEmptyObject(fieldValue) &&\n          (await executeBuiltInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) =>\n    !_options.disabled &&\n    (name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues));\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) =>\n    generateWatchOutput(\n      names,\n      _names,\n      {\n        ...(_state.mount\n          ? _formValues\n          : isUndefined(defaultValue)\n            ? _defaultValues\n            : isString(names)\n              ? { [names]: defaultValue }\n              : defaultValue),\n      },\n      isGlobal,\n      defaultValue,\n    );\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _state.mount ? _formValues : _defaultValues,\n        name,\n        _options.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (optionRef) =>\n              (optionRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(optionRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.state.next({\n              name,\n              values: cloneObject(_formValues),\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        isObject(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: cloneObject(_formValues),\n      });\n\n      if (\n        (_proxyFormState.isDirty ||\n          _proxyFormState.dirtyFields ||\n          _proxySubscribeFormState.isDirty ||\n          _proxySubscribeFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _subjects.state.next({\n          name,\n          dirtyFields: getDirtyFields(_defaultValues, _formValues),\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({ ..._formState });\n    _subjects.state.next({\n      name: _state.mount ? name : undefined,\n      values: cloneObject(_formValues),\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    _state.mount = true;\n    const target = event.target;\n    let name: string = target.name;\n    let isFieldValueUpdated = true;\n    const field: Field = get(_fields, name);\n    const _updateIsFieldValueUpdated = (fieldValue: unknown) => {\n      isFieldValueUpdated =\n        Number.isNaN(fieldValue) ||\n        (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n        deepEqual(fieldValue, get(_formValues, name, fieldValue));\n    };\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent);\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.state.next({\n          name,\n          type: event.type,\n          values: cloneObject(_formValues),\n        });\n\n      if (shouldSkipValidation) {\n        if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {\n          if (_options.mode === 'onBlur') {\n            if (isBlurEvent) {\n              _setValid();\n            }\n          } else if (!isBlurEvent) {\n            _setValid();\n          }\n        }\n\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n\n      if (_options.resolver) {\n        const { errors } = await _runSchema([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          const previousErrorLookupResult = schemaErrorLookup(\n            _formState.errors,\n            _fields,\n            name,\n          );\n          const errorLookupResult = schemaErrorLookup(\n            errors,\n            _fields,\n            previousErrorLookupResult.name || name,\n          );\n\n          error = errorLookupResult.error;\n          name = errorLookupResult.name;\n\n          isValid = isEmptyObject(errors);\n        }\n      } else {\n        _updateIsValidating([name], true);\n        error = (\n          await validateField(\n            field,\n            _names.disabled,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n        _updateIsValidating([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          if (error) {\n            isValid = false;\n          } else if (\n            _proxyFormState.isValid ||\n            _proxySubscribeFormState.isValid\n          ) {\n            isValid = await executeBuiltInValidation(_fields, true);\n          }\n        }\n      }\n\n      if (isFieldValueUpdated) {\n        field._f.deps &&\n          trigger(\n            field._f.deps as\n              | FieldPath<TFieldValues>\n              | FieldPath<TFieldValues>[],\n          );\n        shouldRenderByError(name, isValid, error, fieldState);\n      }\n    }\n  };\n\n  const _focusInput = (ref: Ref, key: string) => {\n    if (get(_formState.errors, key) && ref.focus) {\n      ref.focus();\n      return 1;\n    }\n    return;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuiltInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _setValid();\n    } else {\n      validationResult = isValid = await executeBuiltInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      ((_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n        isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver || !name ? { isValid } : {}),\n      errors: _formState.errors,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      iterateFieldsByAction(\n        _fields,\n        _focusInput,\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...(_state.mount ? _formValues : _defaultValues),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n        ? get(values, fieldNames)\n        : fieldNames.map((name) => get(values, name));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    error: get((formState || _formState).errors, name),\n    isValidating: !!get(_formState.validatingFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      convertToArrayPayload(name).forEach((inputName) =>\n        unset(_formState.errors, inputName),\n      );\n\n    _subjects.state.next({\n      errors: name ? _formState.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n    const currentError = get(_formState.errors, name) || {};\n\n    // Don't override existing error messages elsewhere in the object tree.\n    const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n\n    set(_formState.errors, name, {\n      ...restOfErrorTree,\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: DeepPartial<TFieldValues>,\n  ) =>\n    isFunction(name)\n      ? _subjects.state.subscribe({\n          next: (payload) =>\n            name(\n              _getWatch(undefined, defaultValue),\n              payload as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue,\n          true,\n        );\n\n  const _subscribe: FromSubscribe<TFieldValues> = (props) =>\n    _subjects.state.subscribe({\n      next: (\n        formState: Partial<FormState<TFieldValues>> & {\n          name?: InternalFieldName;\n          values?: TFieldValues | undefined;\n        },\n      ) => {\n        if (\n          shouldSubscribeByName(props.name, formState.name, props.exact) &&\n          shouldRenderFormState(\n            formState,\n            (props.formState as ReadFormState) || _proxyFormState,\n            _setFormState,\n            props.reRenderRoot,\n          )\n        ) {\n          props.callback({\n            values: { ..._formValues } as TFieldValues,\n            ..._formState,\n            ...formState,\n          });\n        }\n      },\n    }).unsubscribe;\n\n  const subscribe: UseFromSubscribe<TFieldValues> = (props) => {\n    _state.mount = true;\n    _proxySubscribeFormState = {\n      ..._proxySubscribeFormState,\n      ...props.formState,\n    };\n    return _subscribe({\n      ...props,\n      formState: _proxySubscribeFormState,\n    });\n  };\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (!options.keepValue) {\n        unset(_fields, fieldName);\n        unset(_formValues, fieldName);\n      }\n\n      !options.keepError && unset(_formState.errors, fieldName);\n      !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n      !options.keepTouched && unset(_formState.touchedFields, fieldName);\n      !options.keepIsValidating &&\n        unset(_formState.validatingFields, fieldName);\n      !_options.shouldUnregister &&\n        !options.keepDefaultValue &&\n        unset(_defaultValues, fieldName);\n    }\n\n    _subjects.state.next({\n      values: cloneObject(_formValues),\n    });\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _setValid();\n  };\n\n  const _setDisabledField: Control<TFieldValues>['_setDisabledField'] = ({\n    disabled,\n    name,\n  }) => {\n    if (\n      (isBoolean(disabled) && _state.mount) ||\n      !!disabled ||\n      _names.disabled.has(name)\n    ) {\n      disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined =\n      isBoolean(options.disabled) || isBoolean(_options.disabled);\n\n    set(_fields, name, {\n      ...(field || {}),\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    if (field) {\n      _setDisabledField({\n        disabled: isBoolean(options.disabled)\n          ? options.disabled\n          : _options.disabled,\n        name,\n      });\n    } else {\n      updateValidAndValue(name, true, options.value);\n    }\n\n    return {\n      ...(disabledIsDefined\n        ? { disabled: options.disabled || _options.disabled }\n        : {}),\n      ...(_options.progressive\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _state.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const _focusError = () =>\n    _options.shouldFocusError &&\n    iterateFieldsByAction(_fields, _focusInput, _names.mount);\n\n  const _disableForm = (disabled?: boolean) => {\n    if (isBoolean(disabled)) {\n      _subjects.state.next({ disabled });\n      iterateFieldsByAction(\n        _fields,\n        (ref, name) => {\n          const currentField: Field = get(_fields, name);\n          if (currentField) {\n            ref.disabled = currentField._f.disabled || disabled;\n\n            if (Array.isArray(currentField._f.refs)) {\n              currentField._f.refs.forEach((inputRef) => {\n                inputRef.disabled = currentField._f.disabled || disabled;\n              });\n            }\n          }\n        },\n        0,\n        false,\n      );\n    }\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues, TTransformedValues> =\n    (onValid, onInvalid) => async (e) => {\n      let onValidError = undefined;\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        (e as React.BaseSyntheticEvent).persist &&\n          (e as React.BaseSyntheticEvent).persist();\n      }\n      let fieldValues: TFieldValues | TTransformedValues | {} =\n        cloneObject(_formValues);\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      if (_options.resolver) {\n        const { errors, values } = await _runSchema();\n        _formState.errors = errors;\n        fieldValues = values as TFieldValues;\n      } else {\n        await executeBuiltInValidation(_fields);\n      }\n\n      if (_names.disabled.size) {\n        for (const name of _names.disabled) {\n          set(fieldValues, name, undefined);\n        }\n      }\n\n      unset(_formState.errors, 'root');\n\n      if (isEmptyObject(_formState.errors)) {\n        _subjects.state.next({\n          errors: {},\n        });\n        try {\n          await onValid(fieldValues as TTransformedValues, e);\n        } catch (error) {\n          onValidError = error;\n        }\n      } else {\n        if (onInvalid) {\n          await onInvalid({ ..._formState.errors }, e);\n        }\n        _focusError();\n        setTimeout(_focusError);\n      }\n\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors,\n      });\n      if (onValidError) {\n        throw onValidError;\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, cloneObject(get(_defaultValues, name)));\n      } else {\n        setValue(\n          name,\n          options.defaultValue as Parameters<typeof setValue<typeof name>>[1],\n        );\n        set(_defaultValues, name, cloneObject(options.defaultValue));\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _setValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const _reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const isEmptyResetValues = isEmptyObject(formValues);\n    const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues) {\n        const fieldsToCheck = new Set([\n          ..._names.mount,\n          ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n        ]);\n        for (const fieldName of Array.from(fieldsToCheck)) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              if (isHTMLElement(fieldReference)) {\n                const form = fieldReference.closest('form');\n                if (form) {\n                  form.reset();\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        for (const fieldName of _names.mount) {\n          setValue(\n            fieldName as FieldPath<TFieldValues>,\n            get(values, fieldName),\n          );\n        }\n      }\n\n      _formValues = cloneObject(values) as TFieldValues;\n\n      _subjects.array.next({\n        values: { ...values },\n      });\n\n      _subjects.state.next({\n        values: { ...values } as TFieldValues,\n      });\n    }\n\n    _names = {\n      mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      disabled: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _state.mount =\n      !_proxyFormState.isValid ||\n      !!keepStateOptions.keepIsValid ||\n      !!keepStateOptions.keepDirtyValues;\n\n    _state.watch = !!_options.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: isEmptyResetValues\n        ? false\n        : keepStateOptions.keepDirty\n          ? _formState.isDirty\n          : !!(\n              keepStateOptions.keepDefaultValues &&\n              !deepEqual(formValues, _defaultValues)\n            ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: isEmptyResetValues\n        ? {}\n        : keepStateOptions.keepDirtyValues\n          ? keepStateOptions.keepDefaultValues && _formValues\n            ? getDirtyFields(_defaultValues, _formValues)\n            : _formState.dirtyFields\n          : keepStateOptions.keepDefaultValues && formValues\n            ? getDirtyFields(_defaultValues, formValues)\n            : keepStateOptions.keepDirty\n              ? _formState.dirtyFields\n              : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n        ? _formState.isSubmitSuccessful\n        : false,\n      isSubmitting: false,\n    });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (formValues, keepStateOptions) =>\n    _reset(\n      isFunction(formValues)\n        ? (formValues as Function)(_formValues as TFieldValues)\n        : formValues,\n      keepStateOptions,\n    );\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n    const fieldReference = field && field._f;\n\n    if (fieldReference) {\n      const fieldRef = fieldReference.refs\n        ? fieldReference.refs[0]\n        : fieldReference.ref;\n\n      if (fieldRef.focus) {\n        fieldRef.focus();\n        options.shouldSelect &&\n          isFunction(fieldRef.select) &&\n          fieldRef.select();\n      }\n    }\n  };\n\n  const _setFormState = (\n    updatedFormState: Partial<FormState<TFieldValues>>,\n  ) => {\n    _formState = {\n      ..._formState,\n      ...updatedFormState,\n    };\n  };\n\n  const _resetDefaultValues = () =>\n    isFunction(_options.defaultValues) &&\n    (_options.defaultValues as Function)().then((values: TFieldValues) => {\n      reset(values, _options.resetOptions);\n      _subjects.state.next({\n        isLoading: false,\n      });\n    });\n\n  const methods = {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      handleSubmit,\n      setError,\n      _subscribe,\n      _runSchema,\n      _getWatch,\n      _getDirty,\n      _setValid,\n      _setFieldArray,\n      _setDisabledField,\n      _setErrors,\n      _getFieldArray,\n      _reset,\n      _resetDefaultValues,\n      _removeUnmounted,\n      _disableForm,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _state() {\n        return _state;\n      },\n      set _state(value) {\n        _state = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    subscribe,\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n\n  return {\n    ...methods,\n    formControl: methods,\n  };\n}\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default <T>(data: T[], value: T | T[]): T[] => [\n  ...data,\n  ...convertToArrayPayload(value),\n];\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n  data.splice(to, 0, data.splice(from, 1)[0]);\n\n  return data;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default <T>(data: T[], value: T | T[]): T[] => [\n  ...convertToArrayPayload(value),\n  ...convertToArrayPayload(data),\n];\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n","export default <T>(fieldValues: T[], index: number, value: T) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import React from 'react';\n\nimport generateId from './logic/generateId';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport getValidationModes from './logic/getValidationModes';\nimport isWatched from './logic/isWatched';\nimport iterateFieldsByAction from './logic/iterateFieldsByAction';\nimport updateFieldArrayRootError from './logic/updateFieldArrayRootError';\nimport validateField from './logic/validateField';\nimport appendAt from './utils/append';\nimport cloneObject from './utils/cloneObject';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isEmptyObject from './utils/isEmptyObject';\nimport moveArrayAt from './utils/move';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport updateAt from './utils/update';\nimport { VALIDATION_MODE } from './constants';\nimport {\n  Control,\n  Field,\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  RegisterOptions,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useFieldArray<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends\n    FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n  TTransformedValues = TFieldValues,\n>(\n  props: UseFieldArrayProps<\n    TFieldValues,\n    TFieldArrayName,\n    TKeyName,\n    TTransformedValues\n  >,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister,\n    rules,\n  } = props;\n  const [fields, setFields] = React.useState(control._getFieldArray(name));\n  const ids = React.useRef<string[]>(\n    control._getFieldArray(name).map(generateId),\n  );\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  rules &&\n    (control as Control<TFieldValues, any, TTransformedValues>).register(\n      name as FieldPath<TFieldValues>,\n      rules as RegisterOptions<TFieldValues>,\n    );\n\n  React.useEffect(\n    () =>\n      control._subjects.array.subscribe({\n        next: ({\n          values,\n          name: fieldArrayName,\n        }: {\n          values?: FieldValues;\n          name?: InternalFieldName;\n        }) => {\n          if (fieldArrayName === _name.current || !fieldArrayName) {\n            const fieldValues = get(values, _name.current);\n            if (Array.isArray(fieldValues)) {\n              setFields(fieldValues);\n              ids.current = fieldValues.map(generateId);\n            }\n          }\n        },\n      }).unsubscribe,\n    [control],\n  );\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValues: T,\n    ) => {\n      _actioned.current = true;\n      control._setFieldArray(name, updatedFieldArrayValues);\n    },\n    [control, name],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = appendAt(\n      control._getFieldArray(name),\n      appendValue,\n    );\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValues.length - 1,\n      options,\n    );\n    ids.current = appendAt(ids.current, appendValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._setFieldArray(name, updatedFieldArrayValues, appendAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prependAt(\n      control._getFieldArray(name),\n      prependValue,\n    );\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prependAt(ids.current, prependValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._setFieldArray(name, updatedFieldArrayValues, prependAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    !Array.isArray(get(control._fields, name)) &&\n      set(control._fields, name, undefined);\n    control._setFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n      argA: index,\n    });\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insertAt(\n      control._getFieldArray(name),\n      index,\n      insertValue,\n    );\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insertAt(ids.current, index, insertValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._setFieldArray(name, updatedFieldArrayValues, insertAt, {\n      argA: index,\n      argB: fillEmptyArray(value),\n    });\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._setFieldArray(\n      name,\n      updatedFieldArrayValues,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._setFieldArray(\n      name,\n      updatedFieldArrayValues,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: FieldArray<TFieldValues, TFieldArrayName>,\n  ) => {\n    const updateValue = cloneObject(value);\n    const updatedFieldArrayValues = updateAt(\n      control._getFieldArray<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >(name),\n      index,\n      updateValue as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>,\n    );\n    ids.current = [...updatedFieldArrayValues].map((item, i) =>\n      !item || i === index ? generateId() : ids.current[i],\n    );\n    updateValues(updatedFieldArrayValues);\n    setFields([...updatedFieldArrayValues]);\n    control._setFieldArray(\n      name,\n      updatedFieldArrayValues,\n      updateAt,\n      {\n        argA: index,\n        argB: updateValue,\n      },\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n    control._setFieldArray(\n      name,\n      [...updatedFieldArrayValues],\n      <T>(data: T): T => data,\n      {},\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._state.action = false;\n\n    isWatched(name, control._names) &&\n      control._subjects.state.next({\n        ...control._formState,\n      } as FormState<TFieldValues>);\n\n    if (\n      _actioned.current &&\n      (!getValidationModes(control._options.mode).isOnSubmit ||\n        control._formState.isSubmitted) &&\n      !getValidationModes(control._options.reValidateMode).isOnSubmit\n    ) {\n      if (control._options.resolver) {\n        control._runSchema([name]).then((result) => {\n          const error = get(result.errors, name);\n          const existingError = get(control._formState.errors, name);\n\n          if (\n            existingError\n              ? (!error && existingError.type) ||\n                (error &&\n                  (existingError.type !== error.type ||\n                    existingError.message !== error.message))\n              : error && error.type\n          ) {\n            error\n              ? set(control._formState.errors, name, error)\n              : unset(control._formState.errors, name);\n            control._subjects.state.next({\n              errors: control._formState.errors as FieldErrors<TFieldValues>,\n            });\n          }\n        });\n      } else {\n        const field: Field = get(control._fields, name);\n        if (\n          field &&\n          field._f &&\n          !(\n            getValidationModes(control._options.reValidateMode).isOnSubmit &&\n            getValidationModes(control._options.mode).isOnSubmit\n          )\n        ) {\n          validateField(\n            field,\n            control._names.disabled,\n            control._formValues,\n            control._options.criteriaMode === VALIDATION_MODE.all,\n            control._options.shouldUseNativeValidation,\n            true,\n          ).then(\n            (error) =>\n              !isEmptyObject(error) &&\n              control._subjects.state.next({\n                errors: updateFieldArrayRootError(\n                  control._formState.errors as FieldErrors<TFieldValues>,\n                  error,\n                  name,\n                ) as FieldErrors<TFieldValues>,\n              }),\n          );\n        }\n      }\n    }\n\n    control._subjects.state.next({\n      name,\n      values: cloneObject(control._formValues) as TFieldValues,\n    });\n\n    control._names.focus &&\n      iterateFieldsByAction(control._fields, (ref, key: string) => {\n        if (\n          control._names.focus &&\n          key.startsWith(control._names.focus) &&\n          ref.focus\n        ) {\n          ref.focus();\n          return 1;\n        }\n        return;\n      });\n\n    control._names.focus = '';\n\n    control._setValid();\n    _actioned.current = false;\n  }, [fields, name, control]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && control._setFieldArray(name);\n\n    return () => {\n      const updateMounted = (name: InternalFieldName, value: boolean) => {\n        const field: Field = get(control._fields, name);\n        if (field && field._f) {\n          field._f.mount = value;\n        }\n      };\n\n      control._options.shouldUnregister || shouldUnregister\n        ? control.unregister(name as FieldPath<TFieldValues>)\n        : updateMounted(name, false);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control]),\n    move: React.useCallback(move, [updateValues, name, control]),\n    prepend: React.useCallback(prepend, [updateValues, name, control]),\n    append: React.useCallback(append, [updateValues, name, control]),\n    remove: React.useCallback(remove, [updateValues, name, control]),\n    insert: React.useCallback(insert, [updateValues, name, control]),\n    update: React.useCallback(update, [updateValues, name, control]),\n    replace: React.useCallback(replace, [updateValues, name, control]),\n    fields: React.useMemo(\n      () =>\n        fields.map((field, index) => ({\n          ...field,\n          [keyName]: ids.current[index] || generateId(),\n        })) as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>[],\n      [fields, keyName],\n    ),\n  };\n}\n","import React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport deepEqual from './utils/deepEqual';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFunction from './utils/isFunction';\nimport { createFormControl } from './logic';\nimport { FieldValues, FormState, UseFormProps, UseFormReturn } from './types';\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n  TTransformedValues = TFieldValues,\n>(\n  props: UseFormProps<TFieldValues, TContext, TTransformedValues> = {},\n): UseFormReturn<TFieldValues, TContext, TTransformedValues> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext, TTransformedValues> | undefined\n  >(undefined);\n  const _values = React.useRef<typeof props.values>(undefined);\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    isLoading: isFunction(props.defaultValues),\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    submitCount: 0,\n    dirtyFields: {},\n    touchedFields: {},\n    validatingFields: {},\n    errors: props.errors || {},\n    disabled: props.disabled || false,\n    isReady: false,\n    defaultValues: isFunction(props.defaultValues)\n      ? undefined\n      : props.defaultValues,\n  });\n\n  if (!_formControl.current) {\n    _formControl.current = {\n      ...(props.formControl ? props.formControl : createFormControl(props)),\n      formState,\n    };\n\n    if (\n      props.formControl &&\n      props.defaultValues &&\n      !isFunction(props.defaultValues)\n    ) {\n      props.formControl.reset(props.defaultValues, props.resetOptions);\n    }\n  }\n\n  const control = _formControl.current.control;\n  control._options = props;\n\n  useIsomorphicLayoutEffect(() => {\n    const sub = control._subscribe({\n      formState: control._proxyFormState,\n      callback: () => updateFormState({ ...control._formState }),\n      reRenderRoot: true,\n    });\n\n    updateFormState((data) => ({\n      ...data,\n      isReady: true,\n    }));\n\n    control._formState.isReady = true;\n\n    return sub;\n  }, [control]);\n\n  React.useEffect(\n    () => control._disableForm(props.disabled),\n    [control, props.disabled],\n  );\n\n  React.useEffect(() => {\n    if (props.mode) {\n      control._options.mode = props.mode;\n    }\n    if (props.reValidateMode) {\n      control._options.reValidateMode = props.reValidateMode;\n    }\n    if (props.errors && !isEmptyObject(props.errors)) {\n      control._setErrors(props.errors);\n    }\n  }, [control, props.errors, props.mode, props.reValidateMode]);\n\n  React.useEffect(() => {\n    props.shouldUnregister &&\n      control._subjects.state.next({\n        values: control._getWatch(),\n      });\n  }, [control, props.shouldUnregister]);\n\n  React.useEffect(() => {\n    if (control._proxyFormState.isDirty) {\n      const isDirty = control._getDirty();\n      if (isDirty !== formState.isDirty) {\n        control._subjects.state.next({\n          isDirty,\n        });\n      }\n    }\n  }, [control, formState.isDirty]);\n\n  React.useEffect(() => {\n    if (props.values && !deepEqual(props.values, _values.current)) {\n      control._reset(props.values, control._options.resetOptions);\n      _values.current = props.values;\n      updateFormState((state) => ({ ...state }));\n    } else {\n      control._resetDefaultValues();\n    }\n  }, [control, props.values]);\n\n  React.useEffect(() => {\n    if (!control._state.mount) {\n      control._setValid();\n      control._state.mount = true;\n    }\n\n    if (control._state.watch) {\n      control._state.watch = false;\n      control._subjects.state.next({ ...control._formState });\n    }\n\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(formState, control);\n\n  return _formControl.current;\n}\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","isFileListInstance","FileList","Set","Blob","key","compact","filter","Boolean","isUndefined","val","undefined","get","object","path","defaultValue","result","split","reduce","isBoolean","isKey","test","stringToPath","input","replace","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","HookFormContext","React__default","useFormContext","getProxyFormState","formState","control","localProxyFormState","isRoot","arguments","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys","keys2","val1","includes","val2","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","appendErrors","validateAllFieldCriteria","errors","message","types","convertToArrayPayload","createSubject","_observers","observers","next","observer","subscribe","push","unsubscribe","o","isEmptyObject","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMultipleSelect","isRadioInput","isRadioOrCheckbox","ref","live","isConnected","unset","paths","childObject","updatePath","slice","baseGet","obj","isEmptyArray","objectHasFunction","markFieldsDirty","fields","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","disabled","attributes","getFieldValueAs","_ref","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","getRadioValue","previous","getFieldValue","_f","files","refs","selectedOptions","_ref2","getResolverOptions","fieldsNames","_fields","criteriaMode","shouldUseNativeValidation","field","isRegex","RegExp","getRuleValue","rule","source","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validate","find","validateFunction","hasValidation","mount","required","min","max","maxLength","minLength","pattern","isWatched","isBlurEvent","some","watchName","startsWith","iterateFieldsByAction","action","abortEarly","currentField","schemaErrorLookup","error","join","foundError","pop","shouldRenderFormState","formStateData","updateFormState","shouldSubscribeByName","signalName","exact","currentName","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","updateFieldArrayRootError","fieldArrayErrors","isMessage","getValidateError","every","getValueAndMessage","validationData","validateField","async","disabledFieldNames","isFieldArray","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","_options","_formState","submitCount","isDirty","isReady","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","validatingFields","delayErrorCallback","_formValues","shouldUnregister","_state","unMount","array","timer","_proxySubscribeFormState","_subjects","state","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","_setValid","shouldUpdateValid","resolver","_runSchema","executeBuiltInValidation","_updateIsValidating","from","forEach","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","isPromiseFunction","fieldError","getValues","_getWatch","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","_focusInput","focus","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","invalid","setError","currentError","currentRef","restOfErrorTree","_subscribe","props","_setFormState","reRenderRoot","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","_setDisabledField","_ref3","register","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","onValidError","e","preventDefault","persist","fieldValues","size","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","fieldsToCheck","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","methods","_setFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_setErrors","_getFieldArray","_resetDefaultValues","then","resetOptions","_removeUnmounted","_disableForm","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","select","formControl","generateId","d","performance","now","c","r","Math","random","toString","getFocusFieldName","focusName","focusIndex","appendAt","fillEmptyArray","insert","moveArrayAt","to","splice","prependAt","removeArrayAt","indexes","i","temp","removeAtIndexes","sort","a","b","swapArrayAt","indexA","indexB","updateAt","useFieldArray","keyName","rules","setFields","ids","_fieldIds","_name","_actioned","current","_ref4","fieldArrayName","updateValues","updatedFieldArrayValues","existingError","updateMounted","swap","move","prepend","prependValue","append","appendValue","remove","insertValue","update","updateValue","item","useIsomorphicLayoutEffect","useForm","_formControl","_values","sub"],"sourceRoot":""}