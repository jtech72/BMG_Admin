{"version":3,"file":"static/js/345.5923de83.chunk.js","mappings":"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","sources":["helpers/Pagination.js","helpers/PageTitle.js","helpers/loader/Loading.js","pages/bmg/orders/Orders.js","../node_modules/react-bootstrap/esm/BreadcrumbItem.js","../node_modules/react-bootstrap/esm/Breadcrumb.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'; // Assuming you are using React Router\r\n\r\nconst Pagination = ({ pageIndex, pageSize, totalPages, setPageIndex, onChangePageSize }) => {\r\n    useEffect(() => {\r\n        // Ensure pageIndex is within bounds when totalPages changes\r\n        if (pageIndex >= totalPages) {\r\n            setPageIndex(Math.max(0, totalPages - 1));\r\n        }\r\n    }, [pageIndex, totalPages, setPageIndex]);\r\n\r\n    return (\r\n        <div className=\"d-lg-flex align-items-center text-center pb-1 pt-2\">\r\n            <div className=\"d-inline-block me-3\">\r\n                <label className=\"me-1\">Display :</label>\r\n                <select\r\n                    value={pageSize}\r\n                    onChange={(e) => {\r\n                        const newSize = Number(e.target.value);\r\n                        onChangePageSize(newSize);\r\n                        setPageIndex(0);\r\n                    }}\r\n                    className=\"form-select d-inline-block w-auto\">\r\n                    <option value={10}>10</option>\r\n                    <option value={20}>20</option>\r\n                    <option value={50}>50</option>\r\n                    <option value={100}>100</option>\r\n                </select>\r\n            </div>\r\n\r\n            <span className=\"me-3\">\r\n                Page{' '}\r\n                <strong>\r\n                    {pageIndex + 1} of {totalPages}\r\n                </strong>\r\n            </span>\r\n\r\n            <label>Go to page : </label>\r\n            {/* <input\r\n                type=\"number\"\r\n                placeholder={`${pageIndex + 1}`}\r\n                min=\"1\"\r\n                max={totalPages}\r\n                onChange={(e) => {\r\n                    const enteredPage = e.target.value;\r\n                    setPageIndex((prev) => {\r\n                        const newPage = enteredPage ? Math.max(1, Math.min(enteredPage, totalPages)) - 1 : 0;\r\n                        return newPage;\r\n                    });\r\n                }}\r\n                className=\"form-control  ms-1 d-inline-block\"\r\n                style={{\r\n                    width: '80px',\r\n                }}\r\n            /> */}\r\n            <input\r\n                type=\"number\"\r\n                placeholder={`${pageIndex + 1}`}\r\n                min=\"1\"\r\n                max={Number(totalPages)} // Convert totalPages to a number\r\n                onChange={(e) => {\r\n                    const enteredPage = e.target.value;\r\n                    setPageIndex((prev) => {\r\n                        const newPage = enteredPage ? Math.max(1, Math.min(enteredPage, totalPages)) - 1 : 0;\r\n                        return newPage;\r\n                    });\r\n                }}\r\n                className=\"form-control  ms-1 d-inline-block\"\r\n                style={{\r\n                    width: '80px',\r\n                }}\r\n            />\r\n\r\n\r\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0 pe-4\">\r\n                {pageIndex > 0 && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex - 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            Previous\r\n                        </Link>\r\n                    </li>\r\n                )}\r\n\r\n                {Array.from({ length: totalPages }).map((_, page) => {\r\n                    const isFirstPage = page === 0;\r\n                    const isLastPage = page === totalPages - 1;\r\n                    const isCurrentPage = page === pageIndex;\r\n\r\n                    if (\r\n                        totalPages <= 5 ||\r\n                        isFirstPage ||\r\n                        isLastPage ||\r\n                        (page >= pageIndex - 1 && page <= pageIndex + 1)\r\n                    ) {\r\n                        return (\r\n                            <li\r\n                                key={`page-${page + 1}`}\r\n                                className={`page-item ${isCurrentPage ? 'active' : ''}`}\r\n                                onClick={() => setPageIndex(page)}>\r\n                                <Link to=\"#\" className=\"page-link\">\r\n                                    {page + 1}\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    } else if ((isFirstPage && pageIndex >= 4) || (isLastPage && pageIndex <= totalPages - 3)) {\r\n                        return (\r\n                            <li key={`page-${page + 1}`} className=\"page-item disabled\">\r\n                                <Link to=\"#\" className=\"page-link\">\r\n                                    ...\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    }\r\n\r\n                    return null;\r\n                })}\r\n\r\n                {pageIndex < totalPages - 1 && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex + 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            Next\r\n                        </Link>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","// @flow\r\nimport React from 'react';\r\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\r\n\r\ntype BreadcrumbItems = {\r\n    label: string,\r\n    path: string,\r\n    active?: boolean,\r\n};\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: Array<BreadcrumbItems>,\r\n    title: string,\r\n};\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\r\n                            <Breadcrumb.Item href=\"/\">Dashboard</Breadcrumb.Item>\r\n\r\n                            {props.breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <Breadcrumb.Item active key={index} style={{ color: '#703133' }}>\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                ) : (\r\n                                    <Breadcrumb.Item key={index} href={item.path} >\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title\" style={{ color: '#703133' }}>{props.title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import React from 'react';\r\nimport { ColorRing, RotatingLines } from 'react-loader-spinner';\r\nconst Loading = () => {\r\n    return (\r\n        <div style={{ height: '50vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <RotatingLines\r\n                strokeColor=\"grey\"\r\n                strokeWidth=\"5\"\r\n                animationDuration=\"0.75\"\r\n                width=\"96\"\r\n                visible={true}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst ButtonLoading = () => {\r\n    return (\r\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\r\n        <div className=\" d-flex justify-content-center align-items-center w-100\">\r\n            <ColorRing\r\n                visible={true}\r\n                height=\"30\"\r\n                width=\"30\"\r\n                ariaLabel=\"blocks-loading\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"blocks-wrapper\"\r\n                colors={['#fff', '#fff', '#fff', '#fff', '#fff']}\r\n            />\r\n\r\n            {/* <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CartLoading = () => {\r\n    return (\r\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\r\n        <div className=\"p-0 d-flex justify-content-center align-items-center m-0\">\r\n            <ColorRing\r\n                visible={true}\r\n                height=\"32\"\r\n                width=\"32\"\r\n                ariaLabel=\"blocks-loading\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"blocks-wrapper\"\r\n                colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\r\n            />\r\n\r\n            {/* <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { Loading, ButtonLoading, CartLoading };\r\n","import { useEffect, useState } from 'react';\r\nimport { Row, Col, Card, OverlayTrigger, Tooltip, Modal, Container, Carousel } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PageTitle from '../../../helpers/PageTitle';\r\nimport { Loading } from '../../../helpers/loader/Loading';\r\nimport { getOrdersAction } from '../../../redux/actions';\r\nimport Pagination from '../../../helpers/Pagination'\r\nconst Orders = () => {\r\n    const store = useSelector((state) => state);\r\n    const dispatch = useDispatch();\r\n    const [search, setSearch] = useState('');\r\n    const OrdersData = store?.getOrderDataReducer?.orderData?.orderDetails\r\n\r\n    console.log(OrdersData)\r\n    const OrdersLoading = store?.getOrderDataReducer?.loading\r\n\r\n\r\n    const TotalRecords = store?.getOrderDataReducer?.orderData?.totalRecords;\r\n    const [pageIndex, setPageIndex] = useState(1);\r\n    const [pageSize, setPageSize] = useState(10);\r\n    const [totalPages, setTotalPages] = useState(Math.ceil(TotalRecords / pageSize));\r\n\r\n    useEffect(() => {\r\n        setTotalPages(Math.ceil(TotalRecords / pageSize));\r\n    }, [TotalRecords, pageSize]);\r\n    useEffect(() => {\r\n        dispatch(getOrdersAction({ search: search, limit: pageSize, page: pageIndex }));\r\n    }, [dispatch, pageIndex, pageSize, search]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: `Order's`, path: '/bmg/orders' },\r\n                    {\r\n                        label: `Order's`,\r\n                        path: '/bmg/orders',\r\n                        active: true,\r\n                    },\r\n                ]}\r\n                title={`Order's`}\r\n            />\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Card\r\n                        style={{ boxShadow: 'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset' }}\r\n                    >\r\n                        <Card.Body className=\"text-center\">\r\n                            <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                                <span className=\"px-3 py-1 bg-dark text-light rounded\">\r\n                                    Total Order's: {OrdersData?.length || 0}\r\n                                </span>\r\n                                <div className=\"d-flex\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control w-auto me-1\"\r\n                                        placeholder=\"Search...\"\r\n                                        value={search}\r\n                                        onChange={(e) => setSearch(e.target.value)}\r\n                                    />\r\n                                    {search && (\r\n                                        <i\r\n                                            className=\"mdi mdi-backspace-outline text-danger fs-3\"\r\n                                            onClick={() => setSearch(\"\")}\r\n                                            style={{ cursor: \"pointer\" }}\r\n                                        ></i>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {OrdersLoading ? (\r\n                                <>\r\n                                    <Loading />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    {OrdersData && OrdersData?.length > 0 ? (\r\n\r\n                                        <>\r\n                                            <div className=\"d-flex justify-content-center table-responsive\">\r\n                                                <table className=\"table table-striped bg-white \">\r\n                                                    <thead>\r\n                                                        <tr className=\"text-nowrap\" style={{ color: '#703133' }}>\r\n                                                            <th scope=\"col\"><i className=\"mdi mdi-merge\"></i></th>\r\n                                                            <th scope=\"col\">Order Id</th>\r\n                                                            <th scope=\"col\">Payment Id</th>\r\n                                                            <th scope=\"col\">Payment method</th>\r\n                                                            <th scope=\"col\">User Email</th>\r\n                                                            <th scope=\"col\">Status</th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {OrdersData?.map((data, index) => (\r\n                                                            <tr\r\n                                                                key={index}\r\n                                                                className=\"text-dark fw-bold text-nowrap\">\r\n                                                                <th scope=\"row\">{index + 1}</th>\r\n                                                                {console.log({ data })}\r\n                                                                <td className='text-uppercase fw-bold'>\r\n                                                                    {data?.orderId ? (\r\n                                                                        <span>{data?.orderId} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex text-danger justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className='text-uppercase fw-bold text-info'>\r\n                                                                    {data?.paymentId ? (\r\n                                                                        <span>{data?.paymentId} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex text-danger justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className='text-uppercase fw-bold text-warning'>\r\n                                                                    {data?.paymentMethod ? (\r\n                                                                        <span>{data?.paymentMethod} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex text-danger justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className='fw-bold text-primary'>\r\n                                                                    {data?.userId?.email ? (\r\n                                                                        <span>{data?.userId?.email} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex text-danger justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className='text-uppercase fw-bold text-success'>\r\n                                                                    {data?.status ? (\r\n                                                                        <span>{data?.status} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex text-danger justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                            </tr>\r\n                                                        ))}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </>\r\n                                    ) : (\r\n                                        <div\r\n                                            className=\"text-center d-flex align-items-center justify-content-center\"\r\n                                            style={{ height: '30vh' }}>\r\n                                            <code className=\"fs-4\">\r\n                                                No Order's found.{' '}\r\n                                            </code>\r\n                                        </div>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                            <Pagination\r\n                                pageIndex={pageIndex}\r\n                                pageSize={pageSize}\r\n                                totalPages={totalPages}\r\n                                setPageIndex={setPageIndex}\r\n                                onChangePageSize={setPageSize}\r\n                            />\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row >\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Orders\r\n","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport Anchor from '@restart/ui/Anchor';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst BreadcrumbItem = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  active = false,\n  children,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'li',\n  linkAs: LinkComponent = Anchor,\n  linkProps = {},\n  href,\n  title,\n  target,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb-item');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(prefix, className, {\n      active\n    }),\n    \"aria-current\": active ? 'page' : undefined,\n    children: active ? children : /*#__PURE__*/_jsx(LinkComponent, {\n      ...linkProps,\n      href: href,\n      title: title,\n      target: target,\n      children: children\n    })\n  });\n});\nBreadcrumbItem.displayName = 'BreadcrumbItem';\nexport default BreadcrumbItem;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport BreadcrumbItem from './BreadcrumbItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Breadcrumb = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  listProps = {},\n  children,\n  label = 'breadcrumb',\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'nav',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb');\n  return /*#__PURE__*/_jsx(Component, {\n    \"aria-label\": label,\n    className: className,\n    ref: ref,\n    ...props,\n    children: /*#__PURE__*/_jsx(\"ol\", {\n      ...listProps,\n      className: classNames(prefix, listProps == null ? void 0 : listProps.className),\n      children: children\n    })\n  });\n});\nBreadcrumb.displayName = 'Breadcrumb';\nexport default Object.assign(Breadcrumb, {\n  Item: BreadcrumbItem\n});"],"names":["_ref","pageIndex","pageSize","totalPages","setPageIndex","onChangePageSize","useEffect","Math","max","_jsxs","className","children","_jsx","value","onChange","e","newSize","Number","target","type","placeholder","min","enteredPage","prev","style","width","onClick","Link","to","Array","from","length","map","_","page","isFirstPage","isLastPage","isCurrentPage","props","Row","Col","Breadcrumb","listProps","Item","href","breadCrumbItems","item","index","active","color","label","path","title","Loading","height","display","justifyContent","alignItems","RotatingLines","strokeColor","strokeWidth","animationDuration","visible","ButtonLoading","ColorRing","ariaLabel","wrapperStyle","wrapperClass","colors","Orders","_store$getOrderDataRe","_store$getOrderDataRe2","_store$getOrderDataRe3","_store$getOrderDataRe4","_store$getOrderDataRe5","store","useSelector","state","dispatch","useDispatch","search","setSearch","useState","OrdersData","getOrderDataReducer","orderData","orderDetails","console","log","OrdersLoading","loading","TotalRecords","totalRecords","setPageSize","setTotalPages","ceil","getOrdersAction","limit","_Fragment","PageTitle","xs","Card","boxShadow","Body","cursor","scope","data","_data$userId","_data$userId2","orderId","paymentId","paymentMethod","userId","email","status","Pagination","BreadcrumbItem","React","ref","bsPrefix","as","Component","linkAs","LinkComponent","Anchor","linkProps","prefix","useBootstrapPrefix","classNames","undefined","displayName","Object","assign"],"sourceRoot":""}