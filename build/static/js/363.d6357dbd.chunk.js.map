{"version":3,"file":"static/js/363.d6357dbd.chunk.js","mappings":"qRAoCA,MA0FA,EA1FcA,KACV,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,KACRC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,MACXC,EAAcF,EAASG,OAASH,EAASG,MAAMC,KAAOJ,EAASG,MAAMC,KAAKC,SAAW,KAE3FC,EAAAA,EAAAA,YAAU,KACNR,GAASS,EAAAA,EAAAA,KAAY,GACtB,CAACT,IAEJ,MAAM,QAAEU,EAAO,aAAEC,EAAY,KAAEC,EAAI,MAAEC,IAAUC,EAAAA,EAAAA,KAAaT,IAAK,CAC7DK,QAASL,EAAMU,KAAKL,QACpBE,KAAMP,EAAMU,KAAKH,KACjBC,MAAOR,EAAMU,KAAKF,MAClBF,aAAcN,EAAMU,KAAKJ,iBAMvBK,GAAiBC,EAAAA,EAAAA,GACnBC,EAAAA,KAAaC,MAAM,CACfC,MAAOF,EAAAA,KAAaG,SAASvB,EAAE,uBAC/BwB,SAAUJ,EAAAA,KAAaG,SAASvB,EAAE,6BAa1C,OACIyB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACMd,GAAgBC,KAASc,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAIxB,EAAayB,SAAO,KAG7DN,EAAAA,EAAAA,MAACO,EAAAA,EAAa,CAAAL,SAAA,EACVF,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,0BAAyBN,SAAA,EACpCC,EAAAA,EAAAA,KAAA,MAAIK,UAAU,wCAAuCN,SAAE3B,EAAE,aACzD4B,EAAAA,EAAAA,KAAA,KAAGK,UAAU,kBAAiBN,SACzB3B,EAAE,qEAIVe,IACGa,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACC,QAAQ,SAASF,UAAU,OAAMN,SACnCZ,KAITU,EAAAA,EAAAA,MAACW,EAAAA,EAAY,CACTC,SA1BEC,IACdC,QAAQC,IAAI,sBAEZtC,GAASuC,EAAAA,EAAAA,IAAUH,EAAgB,MAAGA,EAAmB,UAAG,EAwBhDI,SAAUxB,EACdS,SAAA,EAEIC,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CACNC,MAAO5C,EAAE,SACT6C,KAAK,OACLC,KAAK,QACLC,YAAa/C,EAAE,oBACfgD,eAAgB,UAEpBpB,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CACNC,MAAO5C,EAAE,YACT6C,KAAK,WACLC,KAAK,WACLC,YAAa/C,EAAE,uBACfgD,eAAgB,UAMpBpB,EAAAA,EAAAA,KAAA,OAAKK,UAAU,wBAAuBN,UAClCC,EAAAA,EAAAA,KAACqB,EAAAA,EAAM,CAACC,MAAO,CAACC,gBAAgB,WAAYN,KAAK,SAASO,SAAUxC,EAAQe,SAC1Ef,GAA+BgB,EAAAA,EAAAA,KAACyB,EAAAA,GAAa,KAAnCzB,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SAAG3B,EAAE,wBAK9B,C,2EC9GX,MAuCA,EAvCqBsD,IAMyB,IANxB,cAClBC,EAAa,SACbb,EAAQ,SACRf,EAAQ,SACRU,EAAQ,UACRmB,GACgBF,EAIhB,MAAMG,GAAUC,EAAAA,EAAAA,IAAQ,CAAEH,gBAAeb,cACnC,aACFiB,EAAY,SACZC,EAAQ,QACRC,EACAC,WAAW,OAAEC,IACbN,EAEJ,OACI7B,EAAAA,EAAAA,KAAA,QAAMS,SAAUsB,EAAatB,GAAWJ,UAAWuB,EAAWQ,YAAU,EAAArC,SACnEsC,MAAMC,QAAQvC,GACTA,EAASwC,KAAKC,GACHA,EAAMC,OAASD,EAAMC,MAAMvB,KAC5BwB,EAAAA,cAAoBF,EAAMvB,KAAM,IACzB,IACIuB,EAAMC,MACTT,WACAW,IAAKH,EAAMC,MAAMvB,KACjBiB,SACAF,aAGRO,IAEVzC,GACH,E,2CCzCf,MAAM6C,EAAgBlB,IAAsE,IAArE,KAAER,EAAI,YAAEC,EAAW,YAAE0B,EAAW,OAAEV,EAAM,SAAEH,EAAQ,UAAE3B,GAAWqB,EAClF,MAAOoB,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,GAEjD,OACIhD,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,MAACoD,EAAAA,EAAU,CAAC5C,UAAU,OAAMN,SAAA,EACxBC,EAAAA,EAAAA,KAACkD,EAAAA,EAAKC,QAAO,CACTlC,KAAM6B,EAAe,OAAS,WAC9B3B,YAAaA,EACbD,KAAMA,EACNkC,GAAIlC,EACJmC,GAAG,QACHC,IAAMC,IACEV,GAAaA,EAAYU,EAAE,EAEnClD,UAAWA,EACXmD,aAAWrB,IAAUA,EAAOjB,OACvBc,EAAWA,EAASd,GAAQ,CAAC,EAClCuC,aAAcvC,KAElBlB,EAAAA,EAAAA,KAAA,OACIK,UAAWqD,IAAW,mBAAoB,uBAAwB,CAC9D,gBAAiBZ,IAErB,gBAAeA,EAAe,OAAS,QAAQ/C,UAC/CC,EAAAA,EAAAA,KAAA,QACIK,UAAU,eACVsD,QAASA,KACLZ,GAAiBD,EAAa,UAI/C,EAgKX,EA9IkBc,IAawC,IAbvC,MACf5C,EAAK,KACLC,EAAI,KACJC,EAAI,YACJC,EAAW,SACXa,EAAQ,OACRG,EAAM,UACN9B,EAAS,eACTwD,EAAc,eACdzC,EAAc,YACdyB,EAAW,SACX9C,KACG+D,GACUF,EAEb,MAAMG,EAAgB,aAAT9C,EAAsB,WAAsB,WAATA,EAAoB,SAAW,QAE/E,OACIjB,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACc,WAATkB,GACGjB,EAAAA,EAAAA,KAAA,SAAOiB,KAAMA,EAAMC,KAAMA,KAAWc,EAAWA,EAASd,GAAQ,CAAC,KAAQ4C,KAEzE9D,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACc,aAATkB,GACGjB,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,MAACqD,EAAAA,EAAKc,MAAK,CAAC3D,UAAWe,EAAerB,SAAA,CACjCiB,GACGnB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACK,KACDC,EAAAA,EAAAA,KAACkD,EAAAA,EAAKe,MAAK,CAAC5D,UAAWwD,EAAe9D,SAAEiB,IAAmB,IAAEjB,EAAU,OAE3E,MACJC,EAAAA,EAAAA,KAAC4C,EAAa,CACV1B,KAAMA,EACNC,YAAaA,EACb0B,YAAaA,EACbV,OAAQA,EACRH,SAAUA,EACV3B,UAAWA,IAGd8B,GAAUA,EAAOjB,IACdlB,EAAAA,EAAAA,KAACkD,EAAAA,EAAKC,QAAQe,SAAQ,CAACjD,KAAK,UAAUZ,UAAU,UAASN,SACpDoC,EAAOjB,GAAe,UAE3B,WAIZlB,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACc,WAATkB,GACGjB,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,MAACqD,EAAAA,EAAKc,MAAK,CAAC3D,UAAWe,EAAerB,SAAA,CACjCiB,GAAQhB,EAAAA,EAAAA,KAACkD,EAAAA,EAAKe,MAAK,CAAC5D,UAAWwD,EAAe9D,SAAEiB,IAAsB,MAEvEhB,EAAAA,EAAAA,KAACkD,EAAAA,EAAKiB,OAAM,CACRlD,KAAMA,EACND,MAAOA,EACPE,KAAMA,EACNkC,GAAIlC,EACJoC,IAAMC,IACEV,GAAaA,EAAYU,EAAE,EAEnCQ,KAAMA,EACN1D,UAAWA,EACXmD,aAAWrB,IAAUA,EAAOjB,OACvBc,EAAWA,EAASd,GAAQ,CAAC,KAC9B4C,EAAU/D,SACbA,IAGJoC,GAAUA,EAAOjB,IACdlB,EAAAA,EAAAA,KAACkD,EAAAA,EAAKC,QAAQe,SAAQ,CAACjD,KAAK,UAASlB,SAChCoC,EAAOjB,GAAe,UAE3B,WAIZlB,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACc,aAATkB,GAAgC,UAATA,GACpBjB,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,MAACqD,EAAAA,EAAKc,MAAK,CAAC3D,UAAWe,EAAerB,SAAA,EAClCC,EAAAA,EAAAA,KAACkD,EAAAA,EAAKkB,MAAK,CACPnD,KAAMA,EACND,MAAOA,EACPE,KAAMA,EACNkC,GAAIlC,EACJoC,IAAMC,IACEV,GAAaA,EAAYU,EAAE,EAEnClD,UAAWA,EACXmD,aAAWrB,IAAUA,EAAOjB,OACvBc,EAAWA,EAASd,GAAQ,CAAC,KAC9B4C,IAGP3B,GAAUA,EAAOjB,IACdlB,EAAAA,EAAAA,KAACkD,EAAAA,EAAKC,QAAQe,SAAQ,CAACjD,KAAK,UAASlB,SAChCoC,EAAOjB,GAAe,UAE3B,WAIZrB,EAAAA,EAAAA,MAACqD,EAAAA,EAAKc,MAAK,CAAC3D,UAAWe,EAAerB,SAAA,CACjCiB,GAAQhB,EAAAA,EAAAA,KAACkD,EAAAA,EAAKe,MAAK,CAAC5D,UAAWwD,EAAe9D,SAAEiB,IAAsB,MAEvEhB,EAAAA,EAAAA,KAACkD,EAAAA,EAAKC,QAAO,CACTlC,KAAMA,EACNE,YAAaA,EACbD,KAAMA,EACNkC,GAAIlC,EACJmC,GAAIU,EACJT,IAAMC,IACEV,GAAaA,EAAYU,EAAE,EAEnClD,UAAWA,EACXmD,aAAWrB,IAAUA,EAAOjB,OACvBc,EAAWA,EAASd,GAAQ,CAAC,KAC9B4C,EACJL,aAAcvC,EAAKnB,SAClBA,GAAsB,OAG1BoC,GAAUA,EAAOjB,IACdlB,EAAAA,EAAAA,KAACkD,EAAAA,EAAKC,QAAQe,SAAQ,CAACjD,KAAK,UAASlB,SAChCoC,EAAOjB,GAAe,UAE3B,eASrC,C,+HCpLX,MAyCA,EAzCsBQ,IAAwE,IAAvE,YAAE2C,EAAW,SAAEtE,GAA8B2B,EAChE,MAAM,EAAEtD,IAAMC,EAAAA,EAAAA,KACRiG,GAAc,IAAIC,MAAOC,cAU/B,OARA1F,EAAAA,EAAAA,YAAU,KACF2F,SAASC,MAAMD,SAASC,KAAKC,UAAUC,IAAI,qBAExC,KACCH,SAASC,MAAMD,SAASC,KAAKC,UAAUE,OAAO,oBAAoB,IAE3E,KAGChF,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAKK,UAAU,0CAAyCN,UACpDC,EAAAA,EAAAA,KAAC8E,EAAAA,EAAS,CAAA/E,UACNC,EAAAA,EAAAA,KAAC+E,EAAAA,EAAG,CAAC1E,UAAU,yBAAwBN,UACnCF,EAAAA,EAAAA,MAACmF,EAAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,IAAK,EAAErF,SAAA,EAC7BF,EAAAA,EAAAA,MAACwF,EAAAA,EAAI,CAAAtF,SAAA,EAEDC,EAAAA,EAAAA,KAACqF,EAAAA,EAAKC,OAAM,CAACjF,UAAU,eAAeiB,MAAO,CAACC,gBAAgB,WAAWxB,UACrEC,EAAAA,EAAAA,KAACuF,EAAAA,GAAI,CAACrF,GAAG,IAAGH,UACRC,EAAAA,EAAAA,KAAA,QAAAD,UACIC,EAAAA,EAAAA,KAAA,OAAKwF,IAAKC,EAAAA,EAAMC,IAAI,GAAGC,OAAO,KAAKtF,UAAU,sCAIzDL,EAAAA,EAAAA,KAACqF,EAAAA,EAAKO,KAAI,CAACvF,UAAU,MAAKN,SAAEA,OAI/BsE,YAKjBxE,EAAAA,EAAAA,MAAA,UAAQQ,UAAU,oBAAmBN,SAAA,CAAEuE,EAAY,gBAAStE,EAAAA,EAAAA,KAAA,KAAG6F,KAAK,yBAAyBxF,UAAU,aAAYN,UAACC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,yBACxH,C,oOCjDX,MAAM+F,EAAUA,KAER9F,EAAAA,EAAAA,KAAA,OAAKsB,MAAO,CAAEqE,OAAQ,OAAQI,QAAS,OAAQC,eAAgB,SAAUC,WAAY,UAAWlG,UAC5FC,EAAAA,EAAAA,KAACkG,EAAAA,GAAa,CACVC,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,MAOnB9E,EAAgBA,KAGdzB,EAAAA,EAAAA,KAAA,OAAKK,UAAU,0DAAyDN,UACpEC,EAAAA,EAAAA,KAACwG,EAAAA,GAAS,CACND,SAAS,EACTZ,OAAO,KACPW,MAAM,KACNG,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,iBACbC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,W","sources":["pages/account/Login.js","components/VerticalForm.js","components/FormInput.js","pages/account/AccountLayout.js","helpers/loader/Loading.js"],"sourcesContent":["// @flow\nimport React, { useEffect } from 'react';\nimport { Button, Alert, Row, Col } from 'react-bootstrap';\nimport { Link, Navigate, useLocation } from 'react-router-dom';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Logo } from '../../helpers/image';\n//actions\nimport { resetAuth, loginUser } from '../../redux/actions';\n\n// components\nimport { VerticalForm, FormInput } from '../../components/';\n\nimport AccountLayout from './AccountLayout';\nimport { ButtonLoading } from '../../helpers/loader/Loading';\n\n/* bottom link of account pages */\n// const BottomLink = () => {\n//     const { t } = useTranslation();\n\n//     return (\n//         <Row className=\"mt-3\">\n//             <Col className=\"text-center\">\n//                 <p className=\"text-muted\">\n//                     {t(\"Don't have an account?\")}{' '}\n//                     <Link to={'/account/register'} className=\"text-muted ms-1\">\n//                         <b>{t('Sign Up')}</b>\n//                     </Link>\n//                 </p>\n//             </Col>\n//         </Row>\n//     );\n// };\n\nconst Login = (): React$Element<any> => {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    const location = useLocation();\n    const redirectUrl = location.state && location.state.from ? location.state.from.pathname : '/';\n\n    useEffect(() => {\n        dispatch(resetAuth());\n    }, [dispatch]);\n\n    const { loading, userLoggedIn, user, error } = useSelector((state) => ({\n        loading: state.Auth.loading,\n        user: state.Auth.user,\n        error: state.Auth.error,\n        userLoggedIn: state.Auth.userLoggedIn,\n    }));\n\n    /*\n    form validation schema\n    */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            email: yup.string().required(t('Please enter email')),\n            password: yup.string().required(t('Please enter Password')),\n        })\n    );\n\n    /*\n    handle form submission\n    */\n    const onSubmit = (formData) => {\n        console.log(\"======login called\");\n\n        dispatch(loginUser(formData['email'], formData['password']));\n    };\n\n    return (\n        <>\n            {(userLoggedIn || user) && <Navigate to={redirectUrl} replace />}\n\n            {/* <AccountLayout bottomLinks={<BottomLink />}> */}\n            <AccountLayout>\n                <div className=\"text-center w-75 m-auto\">\n                    <h4 className=\"text-dark-50 text-center mt-0 fw-bold\">{t('Log In')}</h4>\n                    <p className=\"text-muted mb-4\">\n                        {t('Enter your email address and password to access admin panel.')}\n                    </p>\n                </div>\n\n                {error && (\n                    <Alert variant=\"danger\" className=\"my-2\">\n                        {error}\n                    </Alert>\n                )}\n\n                <VerticalForm\n                    onSubmit={onSubmit}\n                    resolver={schemaResolver}\n                //  defaultValues={{ email: 'test', password: 'test' }}\n                >\n                    <FormInput\n                        label={t('Email')}\n                        type=\"text\"\n                        name=\"email\"\n                        placeholder={t('Enter your email')}\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={t('Password')}\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder={t('Enter your password')}\n                        containerClass={'mb-3'}>\n                        {/* <Link to=\"/account/forget-password\" className=\"text-muted float-end\">\n                            <small>{t('Forgot your password?')}</small>\n                        </Link> */}\n                    </FormInput>\n\n                    <div className=\"mb-3 mb-0 text-center\">\n                        <Button style={{backgroundColor:'#008003'}} type=\"submit\" disabled={loading}>\n                        {!loading ?(<>{t('Log In')}</>):(<ButtonLoading/>)}    \n                        </Button>\n                    </div>\n                </VerticalForm>\n            </AccountLayout>\n        </>\n    );\n};\n\nexport default Login;\n","// @flow\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\ntype VerticalFromProps = {\n    defaultValues?: Object,\n    resolver?: any,\n    children?: any,\n    onSubmit?: (value: any) => void,\n    formClass?: string,\n};\n\nconst VerticalForm = ({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps): React$Element<any> => {\n    /*\n     * form methods\n     */\n    const methods = useForm({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","// @flow\nimport React, { useState } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n/* Password Input */\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}>\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}></span>\n                </div>\n            </InputGroup>\n        </>\n    );\n};\n\ntype FormInputProps = {\n    label?: string,\n    type?: string,\n    name?: string,\n    placeholder?: string,\n    register?: any,\n    errors?: any,\n    className?: string,\n    labelClassName?: string,\n    containerClass?: string,\n    refCallback?: any,\n    children?: any,\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    ...otherProps\n}: FormInputProps): React$Element<React$FragmentType> => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'password' ? (\n                        <>\n                            <Form.Group className={containerClass}>\n                                {label ? (\n                                    <>\n                                        {' '}\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\n                                    </>\n                                ) : null}\n                                <PasswordInput\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                />\n\n                                {errors && errors[name] ? (\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                                        {errors[name]['message']}\n                                    </Form.Control.Feedback>\n                                ) : null}\n                            </Form.Group>\n                        </>\n                    ) : (\n                        <>\n                            {type === 'select' ? (\n                                <>\n                                    <Form.Group className={containerClass}>\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                        <Form.Select\n                                            type={type}\n                                            label={label}\n                                            name={name}\n                                            id={name}\n                                            ref={(r) => {\n                                                if (refCallback) refCallback(r);\n                                            }}\n                                            comp={comp}\n                                            className={className}\n                                            isInvalid={errors && errors[name] ? true : false}\n                                            {...(register ? register(name) : {})}\n                                            {...otherProps}>\n                                            {children}\n                                        </Form.Select>\n\n                                        {errors && errors[name] ? (\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors[name]['message']}\n                                            </Form.Control.Feedback>\n                                        ) : null}\n                                    </Form.Group>\n                                </>\n                            ) : (\n                                <>\n                                    {type === 'checkbox' || type === 'radio' ? (\n                                        <>\n                                            <Form.Group className={containerClass}>\n                                                <Form.Check\n                                                    type={type}\n                                                    label={label}\n                                                    name={name}\n                                                    id={name}\n                                                    ref={(r) => {\n                                                        if (refCallback) refCallback(r);\n                                                    }}\n                                                    className={className}\n                                                    isInvalid={errors && errors[name] ? true : false}\n                                                    {...(register ? register(name) : {})}\n                                                    {...otherProps}\n                                                />\n\n                                                {errors && errors[name] ? (\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        {errors[name]['message']}\n                                                    </Form.Control.Feedback>\n                                                ) : null}\n                                            </Form.Group>\n                                        </>\n                                    ) : (\n                                        <Form.Group className={containerClass}>\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                            <Form.Control\n                                                type={type}\n                                                placeholder={placeholder}\n                                                name={name}\n                                                id={name}\n                                                as={comp}\n                                                ref={(r) => {\n                                                    if (refCallback) refCallback(r);\n                                                }}\n                                                className={className}\n                                                isInvalid={errors && errors[name] ? true : false}\n                                                {...(register ? register(name) : {})}\n                                                {...otherProps}\n                                                autoComplete={name}>\n                                                {children ? children : null}\n                                            </Form.Control>\n\n                                            {errors && errors[name] ? (\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {errors[name]['message']}\n                                                </Form.Control.Feedback>\n                                            ) : null}\n                                        </Form.Group>\n                                    )}\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","// @flow\nimport React, { useEffect } from 'react';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\n// images\nimport { Logo } from '../../helpers/image';\n\ntype AccountLayoutProps = {\n    bottomLinks?: React$Element<any>,\n    children?: any,\n};\n\nconst AccountLayout = ({ bottomLinks, children }: AccountLayoutProps): React$Element<any> => {\n    const { t } = useTranslation();\n    const currentYear = new Date().getFullYear();\n\n    useEffect(() => {\n        if (document.body) document.body.classList.add('authentication-bg');\n\n        return () => {\n            if (document.body) document.body.classList.remove('authentication-bg');\n        };\n    }, []);\n\n    return (\n        <>\n            <div className=\"account-pages pt-2 pt-sm-5 pb-4 pb-sm-5\">\n                <Container>\n                    <Row className=\"justify-content-center\">\n                        <Col md={8} lg={6} xl={5} xxl={4}>\n                            <Card>\n                                {/* logo */}\n                                <Card.Header className=\" text-center\" style={{backgroundColor:'#008003'}}>\n                                    <Link to=\"/\">\n                                        <span>\n                                            <img src={Logo} alt=\"\" height=\"70\" className='bg-light rounded-pill px-3' />\n                                        </span>\n                                    </Link>\n                                </Card.Header>\n                                <Card.Body className=\"p-4\">{children}</Card.Body>\n                            </Card>\n\n                            {/* bottom links */}\n                            {bottomLinks}\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n            <footer className=\"footer footer-alt\">{currentYear} © BMG - <a href=\"https://rowthtech.com/\" className='text-muted'><u>rowthtech.com</u></a></footer>\n        </>\n    );\n};\n\nexport default AccountLayout;\n","import React from 'react';\nimport { ColorRing, RotatingLines } from 'react-loader-spinner';\nconst Loading = () => {\n    return (\n        <div style={{ height: '50vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n            <RotatingLines\n                strokeColor=\"grey\"\n                strokeWidth=\"4\"\n                animationDuration=\"0.75\"\n                width=\"90\"\n                visible={true}\n            />\n        </div>\n    );\n};\n\n\nconst ButtonLoading = () => {\n    return (\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\n        <div className=\" d-flex justify-content-center align-items-center w-100\">\n            <ColorRing\n                visible={true}\n                height=\"25\"\n                width=\"25\"\n                ariaLabel=\"blocks-loading\"\n                wrapperStyle={{}}\n                wrapperClass=\"blocks-wrapper\"\n                colors={['#fff', '#fff', '#fff', '#fff', '#fff']}\n            />\n\n            {/* <div class=\"spinner-border\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n            </div> */}\n        </div>\n    );\n};\n\nconst CartLoading = () => {\n    return (\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\n        <div className=\"p-0 d-flex justify-content-center align-items-center m-0\">\n            <ColorRing\n                visible={true}\n                height=\"32\"\n                width=\"32\"\n                ariaLabel=\"blocks-loading\"\n                wrapperStyle={{}}\n                wrapperClass=\"blocks-wrapper\"\n                colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n            />\n\n            {/* <div class=\"spinner-border\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n            </div> */}\n        </div>\n    );\n};\n\nexport { Loading, ButtonLoading, CartLoading };\n"],"names":["Login","t","useTranslation","dispatch","useDispatch","location","useLocation","redirectUrl","state","from","pathname","useEffect","resetAuth","loading","userLoggedIn","user","error","useSelector","Auth","schemaResolver","yupResolver","yup","shape","email","required","password","_jsxs","_Fragment","children","_jsx","Navigate","to","replace","AccountLayout","className","Alert","variant","VerticalForm","onSubmit","formData","console","log","loginUser","resolver","FormInput","label","type","name","placeholder","containerClass","Button","style","backgroundColor","disabled","ButtonLoading","_ref","defaultValues","formClass","methods","useForm","handleSubmit","register","control","formState","errors","noValidate","Array","isArray","map","child","props","React","key","PasswordInput","refCallback","showPassword","setShowPassword","useState","InputGroup","Form","Control","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","_ref2","labelClassName","otherProps","comp","Group","Label","Feedback","Select","Check","bottomLinks","currentYear","Date","getFullYear","document","body","classList","add","remove","Container","Row","Col","md","lg","xl","xxl","Card","Header","Link","src","Logo","alt","height","Body","href","Loading","display","justifyContent","alignItems","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible","ColorRing","ariaLabel","wrapperStyle","wrapperClass","colors"],"sourceRoot":""}