{"version":3,"file":"static/js/363.65c529ef.chunk.js","mappings":"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","sources":["pages/account/Login.js","components/VerticalForm.js","components/FormInput.js","pages/account/AccountLayout.js","helpers/loader/Loading.js"],"sourcesContent":["// @flow\r\nimport React, { useEffect } from 'react';\r\nimport { Button, Alert, Row, Col } from 'react-bootstrap';\r\nimport { Link, Navigate, useLocation } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Logo } from '../../helpers/image';\r\n//actions\r\nimport { resetAuth, loginUser } from '../../redux/actions';\r\n\r\n// components\r\nimport { VerticalForm, FormInput } from '../../components/';\r\n\r\nimport AccountLayout from './AccountLayout';\r\nimport { ButtonLoading } from '../../helpers/loader/Loading';\r\n\r\n/* bottom link of account pages */\r\n// const BottomLink = () => {\r\n//     const { t } = useTranslation();\r\n\r\n//     return (\r\n//         <Row className=\"mt-3\">\r\n//             <Col className=\"text-center\">\r\n//                 <p className=\"text-muted\">\r\n//                     {t(\"Don't have an account?\")}{' '}\r\n//                     <Link to={'/account/register'} className=\"text-muted ms-1\">\r\n//                         <b>{t('Sign Up')}</b>\r\n//                     </Link>\r\n//                 </p>\r\n//             </Col>\r\n//         </Row>\r\n//     );\r\n// };\r\n\r\nconst Login = (): React$Element<any> => {\r\n    const { t } = useTranslation();\r\n    const dispatch = useDispatch();\r\n\r\n    const location = useLocation();\r\n    const redirectUrl = location.state && location.state.from ? location.state.from.pathname : '/';\r\n\r\n    useEffect(() => {\r\n        dispatch(resetAuth());\r\n    }, [dispatch]);\r\n\r\n    const { loading, userLoggedIn, user, error } = useSelector((state) => ({\r\n        loading: state.Auth.loading,\r\n        user: state.Auth.user,\r\n        error: state.Auth.error,\r\n        userLoggedIn: state.Auth.userLoggedIn,\r\n    }));\r\n\r\n    /*\r\n    form validation schema\r\n    */\r\n    const schemaResolver = yupResolver(\r\n        yup.object().shape({\r\n            email: yup.string().required(t('Please enter email')),\r\n            password: yup.string().required(t('Please enter Password')),\r\n        })\r\n    );\r\n\r\n    /*\r\n    handle form submission\r\n    */\r\n    const onSubmit = (formData) => {\r\n        console.log(\"======login called\");\r\n\r\n        dispatch(loginUser(formData['email'], formData['password']));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {(userLoggedIn || user) && <Navigate to={redirectUrl} replace />}\r\n\r\n            {/* <AccountLayout bottomLinks={<BottomLink />}> */}\r\n            <AccountLayout>\r\n                <div className=\"text-center w-75 m-auto\">\r\n                    <h4 className=\"text-dark-50 text-center mt-0 fw-bold\">{t('Log In')}</h4>\r\n                    <p className=\"text-muted mb-4\">\r\n                        {t('Enter your email address and password to access admin panel.')}\r\n                    </p>\r\n                </div>\r\n\r\n                {error && (\r\n                    <Alert variant=\"danger\" className=\"my-2\">\r\n                        {error}\r\n                    </Alert>\r\n                )}\r\n\r\n                <VerticalForm\r\n                    onSubmit={onSubmit}\r\n                    resolver={schemaResolver}\r\n                //  defaultValues={{ email: 'test', password: 'test' }}\r\n                >\r\n                    <FormInput\r\n                        label={t('Email')}\r\n                        type=\"text\"\r\n                        name=\"email\"\r\n                        placeholder={t('Enter your email')}\r\n                        containerClass={'mb-3'}\r\n                    />\r\n                    <FormInput\r\n                        label={t('Password')}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder={t('Enter your password')}\r\n                        containerClass={'mb-3'}>\r\n                        {/* <Link to=\"/account/forget-password\" className=\"text-muted float-end\">\r\n                            <small>{t('Forgot your password?')}</small>\r\n                        </Link> */}\r\n                    </FormInput>\r\n\r\n                    <div className=\"mb-3 mb-0 text-center\">\r\n                        <Button style={{backgroundColor:'#008003'}} type=\"submit\" disabled={loading}>\r\n                        {!loading ?(<>{t('Log In')}</>):(<ButtonLoading/>)}    \r\n                        </Button>\r\n                    </div>\r\n                </VerticalForm>\r\n            </AccountLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","// @flow\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\ntype VerticalFromProps = {\r\n    defaultValues?: Object,\r\n    resolver?: any,\r\n    children?: any,\r\n    onSubmit?: (value: any) => void,\r\n    formClass?: string,\r\n};\r\n\r\nconst VerticalForm = ({\r\n    defaultValues,\r\n    resolver,\r\n    children,\r\n    onSubmit,\r\n    formClass,\r\n}: VerticalFromProps): React$Element<any> => {\r\n    /*\r\n     * form methods\r\n     */\r\n    const methods = useForm({ defaultValues, resolver });\r\n    const {\r\n        handleSubmit,\r\n        register,\r\n        control,\r\n        formState: { errors },\r\n    } = methods;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\r\n            {Array.isArray(children)\r\n                ? children.map((child) => {\r\n                      return child.props && child.props.name\r\n                          ? React.createElement(child.type, {\r\n                                ...{\r\n                                    ...child.props,\r\n                                    register,\r\n                                    key: child.props.name,\r\n                                    errors,\r\n                                    control,\r\n                                },\r\n                            })\r\n                          : child;\r\n                  })\r\n                : children}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default VerticalForm;\r\n","// @flow\r\nimport React, { useState } from 'react';\r\nimport { Form, InputGroup } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\n/* Password Input */\r\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <InputGroup className=\"mb-0\">\r\n                <Form.Control\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    placeholder={placeholder}\r\n                    name={name}\r\n                    id={name}\r\n                    as=\"input\"\r\n                    ref={(r) => {\r\n                        if (refCallback) refCallback(r);\r\n                    }}\r\n                    className={className}\r\n                    isInvalid={errors && errors[name] ? true : false}\r\n                    {...(register ? register(name) : {})}\r\n                    autoComplete={name}\r\n                />\r\n                <div\r\n                    className={classNames('input-group-text', 'input-group-password', {\r\n                        'show-password': showPassword,\r\n                    })}\r\n                    data-password={showPassword ? 'true' : 'false'}>\r\n                    <span\r\n                        className=\"password-eye\"\r\n                        onClick={() => {\r\n                            setShowPassword(!showPassword);\r\n                        }}></span>\r\n                </div>\r\n            </InputGroup>\r\n        </>\r\n    );\r\n};\r\n\r\ntype FormInputProps = {\r\n    label?: string,\r\n    type?: string,\r\n    name?: string,\r\n    placeholder?: string,\r\n    register?: any,\r\n    errors?: any,\r\n    className?: string,\r\n    labelClassName?: string,\r\n    containerClass?: string,\r\n    refCallback?: any,\r\n    children?: any,\r\n};\r\n\r\nconst FormInput = ({\r\n    label,\r\n    type,\r\n    name,\r\n    placeholder,\r\n    register,\r\n    errors,\r\n    className,\r\n    labelClassName,\r\n    containerClass,\r\n    refCallback,\r\n    children,\r\n    ...otherProps\r\n}: FormInputProps): React$Element<React$FragmentType> => {\r\n    // handle input type\r\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\r\n\r\n    return (\r\n        <>\r\n            {type === 'hidden' ? (\r\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\r\n            ) : (\r\n                <>\r\n                    {type === 'password' ? (\r\n                        <>\r\n                            <Form.Group className={containerClass}>\r\n                                {label ? (\r\n                                    <>\r\n                                        {' '}\r\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\r\n                                    </>\r\n                                ) : null}\r\n                                <PasswordInput\r\n                                    name={name}\r\n                                    placeholder={placeholder}\r\n                                    refCallback={refCallback}\r\n                                    errors={errors}\r\n                                    register={register}\r\n                                    className={className}\r\n                                />\r\n\r\n                                {errors && errors[name] ? (\r\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\r\n                                        {errors[name]['message']}\r\n                                    </Form.Control.Feedback>\r\n                                ) : null}\r\n                            </Form.Group>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            {type === 'select' ? (\r\n                                <>\r\n                                    <Form.Group className={containerClass}>\r\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\r\n\r\n                                        <Form.Select\r\n                                            type={type}\r\n                                            label={label}\r\n                                            name={name}\r\n                                            id={name}\r\n                                            ref={(r) => {\r\n                                                if (refCallback) refCallback(r);\r\n                                            }}\r\n                                            comp={comp}\r\n                                            className={className}\r\n                                            isInvalid={errors && errors[name] ? true : false}\r\n                                            {...(register ? register(name) : {})}\r\n                                            {...otherProps}>\r\n                                            {children}\r\n                                        </Form.Select>\r\n\r\n                                        {errors && errors[name] ? (\r\n                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                {errors[name]['message']}\r\n                                            </Form.Control.Feedback>\r\n                                        ) : null}\r\n                                    </Form.Group>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    {type === 'checkbox' || type === 'radio' ? (\r\n                                        <>\r\n                                            <Form.Group className={containerClass}>\r\n                                                <Form.Check\r\n                                                    type={type}\r\n                                                    label={label}\r\n                                                    name={name}\r\n                                                    id={name}\r\n                                                    ref={(r) => {\r\n                                                        if (refCallback) refCallback(r);\r\n                                                    }}\r\n                                                    className={className}\r\n                                                    isInvalid={errors && errors[name] ? true : false}\r\n                                                    {...(register ? register(name) : {})}\r\n                                                    {...otherProps}\r\n                                                />\r\n\r\n                                                {errors && errors[name] ? (\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors[name]['message']}\r\n                                                    </Form.Control.Feedback>\r\n                                                ) : null}\r\n                                            </Form.Group>\r\n                                        </>\r\n                                    ) : (\r\n                                        <Form.Group className={containerClass}>\r\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\r\n\r\n                                            <Form.Control\r\n                                                type={type}\r\n                                                placeholder={placeholder}\r\n                                                name={name}\r\n                                                id={name}\r\n                                                as={comp}\r\n                                                ref={(r) => {\r\n                                                    if (refCallback) refCallback(r);\r\n                                                }}\r\n                                                className={className}\r\n                                                isInvalid={errors && errors[name] ? true : false}\r\n                                                {...(register ? register(name) : {})}\r\n                                                {...otherProps}\r\n                                                autoComplete={name}>\r\n                                                {children ? children : null}\r\n                                            </Form.Control>\r\n\r\n                                            {errors && errors[name] ? (\r\n                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                    {errors[name]['message']}\r\n                                                </Form.Control.Feedback>\r\n                                            ) : null}\r\n                                        </Form.Group>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormInput;\r\n","// @flow\r\nimport React, { useEffect } from 'react';\r\nimport { Container, Row, Col, Card } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n// images\r\nimport { Logo } from '../../helpers/image';\r\n\r\ntype AccountLayoutProps = {\r\n    bottomLinks?: React$Element<any>,\r\n    children?: any,\r\n};\r\n\r\nconst AccountLayout = ({ bottomLinks, children }: AccountLayoutProps): React$Element<any> => {\r\n    const { t } = useTranslation();\r\n    const currentYear = new Date().getFullYear();\r\n\r\n    useEffect(() => {\r\n        if (document.body) document.body.classList.add('authentication-bg');\r\n\r\n        return () => {\r\n            if (document.body) document.body.classList.remove('authentication-bg');\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"account-pages pt-2 pt-sm-5 pb-4 pb-sm-5\">\r\n                <Container>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col md={8} lg={6} xl={5} xxl={4}>\r\n                            <Card>\r\n                                {/* logo */}\r\n                                <Card.Header className=\" text-center\" style={{backgroundColor:'#008003'}}>\r\n                                    <Link to=\"/\">\r\n                                        <span>\r\n                                            <img src={Logo} alt=\"\" height=\"70\" className='bg-light rounded-pill px-3' />\r\n                                        </span>\r\n                                    </Link>\r\n                                </Card.Header>\r\n                                <Card.Body className=\"p-4\">{children}</Card.Body>\r\n                            </Card>\r\n\r\n                            {/* bottom links */}\r\n                            {bottomLinks}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            <footer className=\"footer footer-alt\">{currentYear} © BMG - <a href=\"https://rowthtech.com/\" className='text-muted'><u>rowthtech.com</u></a></footer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AccountLayout;\r\n","import React from 'react';\r\nimport { ColorRing, RotatingLines } from 'react-loader-spinner';\r\nconst Loading = () => {\r\n    return (\r\n        <div style={{ height: '50vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <RotatingLines\r\n                strokeColor=\"grey\"\r\n                strokeWidth=\"4\"\r\n                animationDuration=\"0.75\"\r\n                width=\"90\"\r\n                visible={true}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst ButtonLoading = () => {\r\n    return (\r\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\r\n        <div className=\" d-flex justify-content-center align-items-center w-100\">\r\n            <ColorRing\r\n                visible={true}\r\n                height=\"25\"\r\n                width=\"25\"\r\n                ariaLabel=\"blocks-loading\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"blocks-wrapper\"\r\n                colors={['#fff', '#fff', '#fff', '#fff', '#fff']}\r\n            />\r\n\r\n            {/* <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CartLoading = () => {\r\n    return (\r\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\r\n        <div className=\"p-0 d-flex justify-content-center align-items-center m-0\">\r\n            <ColorRing\r\n                visible={true}\r\n                height=\"32\"\r\n                width=\"32\"\r\n                ariaLabel=\"blocks-loading\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"blocks-wrapper\"\r\n                colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\r\n            />\r\n\r\n            {/* <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { Loading, ButtonLoading, CartLoading };\r\n"],"names":["Login","t","useTranslation","dispatch","useDispatch","location","useLocation","redirectUrl","state","from","pathname","useEffect","resetAuth","loading","userLoggedIn","user","error","useSelector","Auth","schemaResolver","yupResolver","yup","shape","email","required","password","_jsxs","_Fragment","children","_jsx","Navigate","to","replace","AccountLayout","className","Alert","variant","VerticalForm","onSubmit","formData","console","log","loginUser","resolver","FormInput","label","type","name","placeholder","containerClass","Button","style","backgroundColor","disabled","ButtonLoading","_ref","defaultValues","formClass","methods","useForm","handleSubmit","register","control","formState","errors","noValidate","Array","isArray","map","child","props","React","key","PasswordInput","refCallback","showPassword","setShowPassword","useState","InputGroup","Form","Control","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","_ref2","labelClassName","otherProps","comp","Group","Label","Feedback","Select","Check","bottomLinks","currentYear","Date","getFullYear","document","body","classList","add","remove","Container","Row","Col","md","lg","xl","xxl","Card","Header","Link","src","Logo","alt","height","Body","href","Loading","display","justifyContent","alignItems","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible","ColorRing","ariaLabel","wrapperStyle","wrapperClass","colors"],"sourceRoot":""}