{"version":3,"file":"static/js/7064.1e950c26.chunk.js","mappings":"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","sources":["helpers/Pagination.js","helpers/PageTitle.js","pages/bmg/notification/notificationModal/NotificationModal.js","pages/bmg/notification/Notification.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'; // Assuming you are using React Router\r\n\r\nconst Pagination = ({ pageIndex, pageSize, totalPages, setPageIndex, onChangePageSize }) => {\r\n    useEffect(() => {\r\n        // Ensure pageIndex stays within bounds when totalPages changes\r\n        if (pageIndex > totalPages) {\r\n            setPageIndex(Math.max(1, totalPages)); // Keep in valid range\r\n        }\r\n    }, [pageIndex, totalPages, setPageIndex]);\r\n\r\n    return (\r\n        <div className=\"d-lg-flex align-items-center text-center pb-1 pt-2\">\r\n            {/* Page Size Selection */}\r\n            <div className=\"d-inline-block me-3\">\r\n                <label className=\"me-1\">Display :</label>\r\n                <select\r\n                    value={pageSize}\r\n                    onChange={(e) => {\r\n                        const newSize = Number(e.target.value);\r\n                        onChangePageSize(newSize);\r\n                        setPageIndex(1); // Reset to first page\r\n                    }}\r\n                    className=\"form-select d-inline-block w-auto\">\r\n                    {[10, 20, 50, 100].map((size) => (\r\n                        <option key={size} value={size}>\r\n                            {size}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            {/* Page Info */}\r\n            <span className=\"me-3\">\r\n                Page{' '}\r\n                <strong>\r\n                    {pageIndex} of {totalPages}\r\n                </strong>\r\n            </span>\r\n\r\n            {/* Go to Page Input */}\r\n            <label>Go to page: </label>\r\n            <input\r\n                type=\"number\"\r\n                placeholder={`${pageIndex}`}\r\n                min=\"1\"\r\n                max={totalPages}\r\n                onChange={(e) => {\r\n                    const enteredPage = Number(e.target.value);\r\n                    if (enteredPage >= 1 && enteredPage <= totalPages) {\r\n                        setPageIndex(enteredPage);\r\n                    }\r\n                }}\r\n                className=\"form-control ms-1 d-inline-block\"\r\n                style={{ width: '80px' }}\r\n            />\r\n\r\n            {/* Pagination Controls */}\r\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0 pe-4\">\r\n                {/* Previous Button */}\r\n                {pageIndex > 1 && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex - 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            Previous\r\n                        </Link>\r\n                    </li>\r\n                )}\r\n\r\n                {/* Page Number Buttons */}\r\n                {Array.from({ length: totalPages }).map((_, i) => {\r\n                    const page = i + 1; // Adjust index to start from 1\r\n                    const isCurrentPage = page === pageIndex;\r\n                    const isNearCurrent = page >= pageIndex - 1 && page <= pageIndex + 1;\r\n                    const isEdgePage = page === 1 || page === totalPages;\r\n\r\n                    if (totalPages <= 5 || isNearCurrent || isEdgePage) {\r\n                        return (\r\n                            <li\r\n                                key={page}\r\n                                className={`page-item ${isCurrentPage ? 'active' : ''}`}\r\n                                onClick={() => setPageIndex(page)}>\r\n                                <Link to=\"#\" className=\"page-link\">\r\n                                    {page}\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    } else if (\r\n                        (page === 2 && pageIndex >= 5) ||\r\n                        (page === totalPages - 1 && pageIndex <= totalPages - 4)\r\n                    ) {\r\n                        return (\r\n                            <li key={page} className=\"page-item disabled\">\r\n                                <Link to=\"#\" className=\"page-link px-0\">\r\n                                    ...\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    }\r\n\r\n                    return null;\r\n                })}\r\n\r\n                {/* Next Button */}\r\n                {pageIndex < totalPages && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex + 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            Next\r\n                        </Link>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","// @flow\r\nimport React from 'react';\r\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\r\n\r\ntype BreadcrumbItems = {\r\n    label: string,\r\n    path: string,\r\n    active?: boolean,\r\n};\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: Array<BreadcrumbItems>,\r\n    title: string,\r\n};\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\r\n                            <Breadcrumb.Item href=\"/\">Dashboard</Breadcrumb.Item>\r\n\r\n                            {props.breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <Breadcrumb.Item active key={index} style={{ color: '#703133' }}>\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                ) : (\r\n                                    <Breadcrumb.Item key={index} href={item.path} >\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title\" style={{ color: '#703133' }}>{props.title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport {\r\n    createNotificationActions,\r\n    getNotificationActions,\r\n    updateNotificationActions,\r\n} from '../../../../redux/actions';\r\nimport { ButtonLoading } from '../../../../helpers/loader/Loading';\r\nimport ToastContainer from '../../../../helpers/toast/ToastContainer';\r\n\r\nconst NotificationModal = ({ show, hide, notificationData, setApiCall }) => {\r\n    const dispatch = useDispatch();\r\n    const store = useSelector((state) => state);\r\n\r\n    const loading = store?.createNotificationDataReducer?.loading || store?.updateNotificationDataReducer?.loading;\r\n    const createStatus = store?.createNotificationDataReducer?.notificationData?.status;\r\n    const updateStatus = store?.updateNotificationDataReducer?.notificationData?.status;\r\n    console.log({ notificationData });\r\n    // State to manage form data\r\n    const [notification, setNotification] = useState({\r\n        type: '',\r\n        message: '',\r\n        status: true,\r\n    });\r\n    const closeModal = () => {\r\n        setNotification({\r\n            type: '',\r\n            message: '',\r\n        });\r\n        hide();\r\n    };\r\n    // Handle changes in form fields\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setNotification((prev) => ({ ...prev, [name]: value }));\r\n    };\r\n\r\n    // Handle ReactQuill editor changes\r\n    const handleQuillChange = (value) => {\r\n        setNotification((prev) => ({ ...prev, message: value }));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (notificationData?.data) {\r\n            setNotification({\r\n                type: notificationData?.data?.type || '',\r\n                message: notificationData?.data?.message || '',\r\n                status: notificationData?.data?.status ?? false,\r\n            });\r\n        }\r\n    }, [notificationData?.data]);\r\n\r\n    // Handle form submission\r\n    const handleSubmit = () => {\r\n        if (!notification.type || !notification.message.trim()) {\r\n            ToastContainer('Please fill in all fields as they are required !.', 'info');\r\n            return;\r\n        }\r\n        const data = {\r\n            _id: notificationData?.data?._id,\r\n            type: notification?.type,\r\n            message: notification?.message,\r\n            status: notification?.status,\r\n        };\r\n        if (notificationData?.data?._id) {\r\n            dispatch(updateNotificationActions(data));\r\n        } else {\r\n            dispatch(createNotificationActions(notification));\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        if (!loading && (createStatus === 200 || updateStatus === 200)) {\r\n            // dispatch(getNotificationActions({ search: '', limit: '', page: '', type: 'both' }));\r\n            setApiCall();\r\n            closeModal();\r\n        }\r\n    }, [createStatus, updateStatus, loading, dispatch]);\r\n\r\n    const requiredStar = <span className=\"text-danger fs-4\">*</span>;\r\n\r\n    return (\r\n        <Modal show={show} onHide={closeModal} centered size=\"lg\" backdrop=\"static\">\r\n            <Modal.Header className=\"px-2 py-1 text-light\" style={{ backgroundColor: '#008003' }}>\r\n                <Modal.Title>{notificationData?.type} Notification</Modal.Title>\r\n                <i className=\"mdi mdi-close fs-3\" onClick={closeModal} style={{ cursor: 'pointer' }}></i>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>Type {requiredStar}</Form.Label>\r\n                        <Form.Select\r\n                            name=\"type\"\r\n                            value={notification.type}\r\n                            onChange={(e) => setNotification({ ...notification, type: e.target.value })}>\r\n                            <option value=\"\" selected disabled>\r\n                                Select\r\n                            </option>\r\n                            <option value=\"buyer\">Buyer</option>\r\n                            <option value=\"seller\">Seller</option>\r\n                            <option value=\"both\">Both</option>\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>Message {requiredStar}</Form.Label>\r\n                        <ReactQuill\r\n                            value={notification.message}\r\n                            onChange={handleQuillChange}\r\n                            theme=\"snow\"\r\n                            placeholder=\"Enter message...\"\r\n                        />\r\n                    </Form.Group>\r\n                    {notificationData?.data && (\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>Status</Form.Label>\r\n                            <Form.Select name=\"status\" value={notificationData?.data?.status} onChange={handleChange}>\r\n                                <option value=\"true\">Active</option>\r\n                                <option value=\"false\">Inactive</option>\r\n                            </Form.Select>\r\n                        </Form.Group>\r\n                    )}\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"px-2 py-1\">\r\n                <Button variant=\"danger\" onClick={closeModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button style={{ backgroundColor: '#008003' }} onClick={handleSubmit} disabled={loading}>\r\n                    {loading ? (\r\n                        <ButtonLoading />\r\n                    ) : (\r\n                        <>{notificationData?.type === 'Edit' ? 'Update' : 'Add'} Notification</>\r\n                    )}\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default NotificationModal;\r\n","import { useEffect, useState } from 'react';\r\nimport { Row, Col, Card, OverlayTrigger, Tooltip, Button, Table } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PageTitle from '../../../helpers/PageTitle';\r\nimport { Loading } from '../../../helpers/loader/Loading';\r\nimport { getNotificationActions, getNotificationByAdminActions } from '../../../redux/actions';\r\nimport Pagination from '../../../helpers/Pagination';\r\nimport NotificationModal from './notificationModal/NotificationModal';\r\nconst Notification = () => {\r\n    const dispatch = useDispatch();\r\n    const { getNotificationByAdminReducer } = useSelector((state) => state);\r\n\r\n    const NotificationData = getNotificationByAdminReducer?.notificationData?.data || [];\r\n    console.log({ NotificationData });\r\n    const TotalRecords = getNotificationByAdminReducer?.notificationData?.totalRecords || 0;\r\n    const NotificationLoading = getNotificationByAdminReducer?.loading;\r\n\r\n    const [search, setSearch] = useState('');\r\n    const [pageIndex, setPageIndex] = useState(1);\r\n    const [pageSize, setPageSize] = useState(10);\r\n    const [totalPages, setTotalPages] = useState(1);\r\n\r\n    const [nofificationModal, setNotificationModal] = useState({\r\n        type: '',\r\n        data: null,\r\n        isVisible: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setTotalPages(Math.ceil(TotalRecords / pageSize));\r\n    }, [TotalRecords, pageSize]);\r\n    const [apiCall, setApiCall] = useState(false);\r\n    // useEffect(() => {\r\n    //     // dispatch(getNotificationActions({ search, limit: pageSize, page: pageIndex, type: 'both' }));\r\n    //     dispatch(getNotificationByAdminActions({ search }));\r\n    // }, [dispatch, search, pageIndex, pageSize, apiCall]);\r\n\r\n    useEffect(() => {\r\n        if (!search.trim()) {\r\n            // If search is empty, fetch default list immediately\r\n            dispatch(getNotificationByAdminActions({ search }));\r\n            return;\r\n        }\r\n\r\n        const delayDebounce = setTimeout(() => {\r\n            dispatch(getNotificationByAdminActions({ search }));\r\n        }, 200); // Debounce delay\r\n\r\n        return () => clearTimeout(delayDebounce);\r\n    }, [search, dispatch, pageIndex, pageSize]);\r\n\r\n    const handleNotificationModal = (type, data = null) => {\r\n        setNotificationModal({ type, data, isVisible: true });\r\n    };\r\n    // useEffect(() => {\r\n    //     if (!search.trim()) return;\r\n\r\n    //     const delayDebounce = setTimeout(() => {\r\n    //         // ✅ Call your API or search logic here\r\n    //         console.log('Search triggered for:', search);\r\n    //     }, 200); // wait 200ms after user stops typing\r\n\r\n    //     return () => clearTimeout(delayDebounce);\r\n    // }, [search]);\r\n\r\n    return (\r\n        <>\r\n            <PageTitle\r\n                breadCrumbItems={[{ label: 'Notification', path: '/bmg/notification', active: true }]}\r\n                title=\"Notification Management\"\r\n            />\r\n\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Card\r\n                        style={{\r\n                            boxShadow:\r\n                                'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset',\r\n                        }}>\r\n                        <Card.Body>\r\n                            <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                                <span className=\"px-3 py-1 bg-dark text-light rounded\">\r\n                                    Total Notification's: {TotalRecords || 0}\r\n                                </span>\r\n                                <div className=\"d-flex\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control w-auto me-2\"\r\n                                        placeholder=\"Search...\"\r\n                                        value={search}\r\n                                        onChange={(e) => setSearch(e.target.value)}\r\n                                    />\r\n                                    {search && (\r\n                                        <i\r\n                                            className=\"mdi mdi-backspace-outline text-danger fs-3 me-2\"\r\n                                            onClick={() => setSearch('')}\r\n                                            style={{ cursor: 'pointer' }}></i>\r\n                                    )}\r\n                                    <Button variant=\"success\" onClick={() => handleNotificationModal('Add')}>\r\n                                        <i className=\"mdi mdi-plus-circle\"></i> Add\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {NotificationLoading ? (\r\n                                <Loading />\r\n                            ) : NotificationData.length > 0 ? (\r\n                                <div className=\"table-responsive\">\r\n                                    <Table bordered hover className=\"bg-white text-center\">\r\n                                        <thead>\r\n                                            <tr className=\"text-nowrap text-secondary\">\r\n                                                <th>\r\n                                                    <i className=\"mdi mdi-merge\"></i>\r\n                                                </th>\r\n                                                <th>Message</th>\r\n                                                <th>Type</th>\r\n                                                <th>Status</th>\r\n                                                <th>Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {NotificationData.map((data, index) => (\r\n                                                <tr key={data._id || index}>\r\n                                                    <td>{index + 1}</td>\r\n                                                    {/* <OverlayTrigger\r\n                            placement=\"top\"\r\n                            overlay={\r\n                              <Tooltip id={`tooltip-${index}`}>\r\n                                <div dangerouslySetInnerHTML={{ __html: data?.message || \"N/A\" }} />\r\n                                </Tooltip>\r\n                            }\r\n                          > */}\r\n                                                    <td className=\"p-1 m-0\">\r\n                                                        {' '}\r\n                                                        <span\r\n                                                            dangerouslySetInnerHTML={{\r\n                                                                __html: data?.message || 'N/A',\r\n                                                            }}\r\n                                                        />\r\n                                                    </td>\r\n                                                    {/* </OverlayTrigger> */}\r\n\r\n                                                    <td>\r\n                                                        <span>\r\n                                                            {data?.type}\r\n                                                            {/* <span\r\n                                                            className={`badge ${\r\n                                                                data?.type === 'buyer'\r\n                                                                    ? 'bg-info'\r\n                                                                    : data?.type === 'seller'\r\n                                                                    ? 'bg-danger'\r\n                                                                    : data?.type === 'both'\r\n                                                                    ? 'bg-success'\r\n                                                                    : 'bg-secondary'\r\n                                                            } px-2 py-1`}>\r\n                                                            {data?.type === 'buyer'\r\n                                                                ? 'Buyer'\r\n                                                                : data?.type === 'seller'\r\n                                                                ? 'Seller'\r\n                                                                : data?.type === 'both'\r\n                                                                ? 'Both'\r\n                                                                : 'Unknown'}\r\n                                                        </span> */}\r\n                                                        </span>\r\n                                                    </td>\r\n\r\n                                                    <td>\r\n                                                        <span\r\n                                                            className={`badge ${\r\n                                                                data?.status ? 'bg-success' : 'bg-danger'\r\n                                                            } px-2 py-1`}>\r\n                                                            {data?.status ? 'Active' : 'Inactive'}\r\n                                                        </span>\r\n                                                    </td>\r\n\r\n                                                    <td>\r\n                                                        <i\r\n                                                            className=\"mdi mdi-square-edit-outline fs-4 text-primary\"\r\n                                                            style={{ cursor: 'pointer' }}\r\n                                                            onClick={() => handleNotificationModal('Edit', data)}></i>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            ))}\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                            ) : (\r\n                                <div className=\"text-center py-4\">\r\n                                    <code className=\"fs-5 text-muted\">\r\n                                        No Notification's found. Add some to display.\r\n                                    </code>\r\n                                </div>\r\n                            )}\r\n                            {TotalRecords > 10 && (\r\n                                <Pagination\r\n                                    pageIndex={pageIndex}\r\n                                    pageSize={pageSize}\r\n                                    totalPages={totalPages}\r\n                                    setPageIndex={setPageIndex}\r\n                                    onChangePageSize={setPageSize}\r\n                                />\r\n                            )}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n            <NotificationModal\r\n                setApiCall={() => setApiCall((prev) => !prev)}\r\n                show={nofificationModal.isVisible}\r\n                hide={() => setNotificationModal({ ...nofificationModal, isVisible: false })}\r\n                notificationData={nofificationModal}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Notification;\r\n"],"names":["_ref","pageIndex","pageSize","totalPages","setPageIndex","onChangePageSize","useEffect","Math","max","_jsxs","className","children","_jsx","value","onChange","e","newSize","Number","target","map","size","type","placeholder","min","enteredPage","style","width","onClick","Link","to","Array","from","length","_","i","page","isCurrentPage","props","Row","Col","Breadcrumb","listProps","Item","href","breadCrumbItems","item","index","active","color","label","path","title","_store$createNotifica","_store$updateNotifica","_store$createNotifica2","_store$createNotifica3","_store$updateNotifica2","_store$updateNotifica3","_notificationData$dat7","show","hide","notificationData","setApiCall","dispatch","useDispatch","store","useSelector","state","loading","createNotificationDataReducer","updateNotificationDataReducer","createStatus","status","updateStatus","console","log","notification","setNotification","useState","message","closeModal","_notificationData$dat","_notificationData$dat2","_notificationData$dat3","_notificationData$dat4","data","requiredStar","Modal","onHide","centered","backdrop","Header","backgroundColor","Title","cursor","Body","Form","Group","Label","Select","name","selected","disabled","ReactQuill","prev","theme","Footer","Button","variant","handleSubmit","_notificationData$dat5","_notificationData$dat6","trim","ToastContainer","_id","updateNotificationActions","createNotificationActions","ButtonLoading","_Fragment","Notification","_getNotificationByAdm","_getNotificationByAdm2","getNotificationByAdminReducer","NotificationData","TotalRecords","totalRecords","NotificationLoading","search","setSearch","setPageSize","setTotalPages","nofificationModal","setNotificationModal","isVisible","ceil","apiCall","getNotificationByAdminActions","delayDebounce","setTimeout","clearTimeout","handleNotificationModal","arguments","undefined","PageTitle","xs","Card","boxShadow","Loading","Table","bordered","hover","dangerouslySetInnerHTML","__html","Pagination","NotificationModal"],"sourceRoot":""}