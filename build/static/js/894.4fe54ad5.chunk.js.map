{"version":3,"file":"static/js/894.4fe54ad5.chunk.js","mappings":"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","sources":["pages/bmg/help&support/Helpandsupport.js","helpers/Functions.js","../node_modules/react-bootstrap/esm/Badge.js","helpers/Pagination.js","helpers/PageTitle.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { Row, Col, Card, Badge, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PageTitle from '../../../helpers/PageTitle';\r\nimport { getTicketsAction } from '../../../redux/actions';\r\nimport { Loading } from '../../../helpers/loader/Loading';\r\nimport Pagination from '../../../helpers/Pagination';\r\nimport { getUserFromSession } from '../../../helpers/api/apiCore';\r\nimport { Link } from 'react-router-dom';\r\nimport { formatDate } from '../../../helpers/Functions';\r\nconst HelpAndSupport = () => {\r\n    const store = useSelector((state) => state);\r\n    const dispatch = useDispatch();\r\n    const [search, setSearch] = useState('');\r\n    const SupportData = store?.getTicketsReducer?.supportData?.response;\r\n    const createStatus = store?.createTicketReducer?.supportData?.status;\r\n    const SupportLoading = store?.getTicketsReducer?.loading;\r\n    const user = getUserFromSession();\r\n\r\n    const TotalRecords = store?.getTicketsReducer?.supportData?.totalRecords;\r\n    const [pageIndex, setPageIndex] = useState(1);\r\n    const [pageSize, setPageSize] = useState(20);\r\n    const [totalPages, setTotalPages] = useState(Math.ceil(TotalRecords / pageSize));\r\n\r\n    useEffect(() => {\r\n        setTotalPages(Math.ceil(TotalRecords / pageSize));\r\n    }, [TotalRecords, pageSize]);\r\n\r\n    useEffect(() => {\r\n        if (createStatus === 200) {\r\n            dispatch(getTicketsAction({ limit: pageSize, page: pageIndex }));\r\n        }\r\n        dispatch(getTicketsAction({ limit: pageSize, page: pageIndex }));\r\n    }, [dispatch, createStatus, pageIndex, pageSize, search]);\r\n\r\n    const getStatusBadgeColor = (status) => {\r\n        switch (status?.toLowerCase()) {\r\n            case 'pending':\r\n                return 'secondary';\r\n            case 'resolved':\r\n                return 'success';\r\n            case 'in progress':\r\n                return 'warning';\r\n            case 'not feasible':\r\n                return 'danger';\r\n            default:\r\n                return 'info';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'Settings', path: '/bmg/help-support' },\r\n                    {\r\n                        label: 'Help & Support',\r\n                        path: '/bmg/help-support',\r\n                        active: true,\r\n                    },\r\n                ]}\r\n                title={'Help & Support'}\r\n            />\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Card\r\n                        style={{\r\n                            boxShadow:\r\n                                'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset',\r\n                        }}>\r\n                        <Card.Body className=\"text-center\">\r\n                            <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                                <span className=\"px-3 py-1 bg-dark text-light rounded\">\r\n                                    Total Tickets: {TotalRecords || 0}\r\n                                </span>\r\n                                {/* <div className=\"d-flex\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control w-auto me-1\"\r\n                                        placeholder=\"Search...\"\r\n                                        value={search}\r\n                                        onChange={(e) => setSearch(e.target.value)}\r\n                                    />\r\n                                    {search && (\r\n                                        <i\r\n                                            className=\"mdi mdi-backspace-outline text-danger fs-3\"\r\n                                            onClick={() => setSearch(\"\")}\r\n                                            style={{ cursor: \"pointer\" }}\r\n                                        ></i>\r\n                                    )}\r\n                                </div> */}\r\n                            </div>\r\n\r\n                            {SupportLoading ? (\r\n                                <>\r\n                                    <Loading />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    {SupportData && SupportData?.length > 0 ? (\r\n                                        <>\r\n                                            <div className=\"table-responsive\">\r\n                                                <table className=\"table text-start table-striped bg-white \">\r\n                                                    <thead>\r\n                                                        <tr className=\"text-nowrap\">\r\n                                                            <th scope=\"col\">\r\n                                                                <i className=\"mdi mdi-merge\"></i>\r\n                                                            </th>\r\n                                                            <th scope=\"col\">Ticket #</th>\r\n                                                            <th scope=\"col\">Email</th>\r\n                                                            <th scope=\"col\">Issue Type</th>\r\n                                                            <th scope=\"col\">Status</th>\r\n                                                            <th scope=\"col\">Created On</th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {SupportData?.map((data, index) => (\r\n                                                            <tr key={index} className=\"text-dark fw-bold text-nowrap\">\r\n                                                                <th scope=\"row\">{(pageIndex - 1) * pageSize + index + 1}</th>\r\n                                                                <td className=\"text-uppercase fw-bold\">\r\n                                                                    {data?.ticketId ? (\r\n                                                                        <OverlayTrigger\r\n                                                                            placement=\"left\"\r\n                                                                            overlay={\r\n                                                                                <Tooltip id=\"overlay-example\">\r\n                                                                                    View Detail's\r\n                                                                                </Tooltip>\r\n                                                                            }>\r\n                                                                            <Link\r\n                                                                                style={{\r\n                                                                                    cursor: 'pointer',\r\n                                                                                    // color: 'crimson',\r\n                                                                                }}\r\n                                                                                // onMouseOver={(e) =>\r\n                                                                                //     (e.target.style.color =\r\n                                                                                //         'rgb(10 207 151)')\r\n                                                                                // }\r\n                                                                                // onMouseOut={(e) =>\r\n                                                                                //     (e.target.style.color = 'crimson')\r\n                                                                                // }\r\n                                                                                to={`/bmg/ticket/${data?._id}`}\r\n                                                                                state={data}>\r\n                                                                                {data?.ticketId}{' '}\r\n                                                                            </Link>\r\n                                                                        </OverlayTrigger>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className=\"fw-bold \">\r\n                                                                    {data?.user?.email ? (\r\n                                                                        <span>{data?.user?.email} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className=\"fw-bold \" style={{ cursor: 'pointer' }}>\r\n                                                                    {data?.issueType ? (\r\n                                                                        <span>{data?.issueType} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className=\"fw-bold \">\r\n                                                                    <Badge\r\n                                                                        pill\r\n                                                                        bg={getStatusBadgeColor(data?.status)}\r\n                                                                        className=\"px-3 py-2 text-capitalize\"\r\n                                                                        style={{ fontSize: '0.75rem' }}>\r\n                                                                        {data?.status || 'N/A'}\r\n                                                                    </Badge>\r\n                                                                </td>\r\n                                                                <td className=\"fw-bold \" style={{ cursor: 'pointer' }}>\r\n                                                                    {data?.createdAt ? (\r\n                                                                        <span>{formatDate(data?.createdAt)} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                            </tr>\r\n                                                        ))}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </>\r\n                                    ) : (\r\n                                        <div\r\n                                            className=\"text-center d-flex align-items-center justify-content-center\"\r\n                                            style={{ height: '30vh' }}>\r\n                                            <code className=\"fs-4\">No Tickets found.</code>\r\n                                        </div>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                            {TotalRecords > 20 && (\r\n                                <Pagination\r\n                                    pageIndex={pageIndex}\r\n                                    pageSize={pageSize}\r\n                                    totalPages={totalPages}\r\n                                    setPageIndex={setPageIndex}\r\n                                    onChangePageSize={setPageSize}\r\n                                />\r\n                            )}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HelpAndSupport;\r\n","export const formatDate = (dateString) => {\r\n    if (!dateString) return '';\r\n\r\n    // Remove duplicate T00:00:00 or fix invalid date formats\r\n    const cleanedDate = dateString.replace(/T00:00:00\\.000Z*T00:00:00$/, 'T00:00:00.000Z');\r\n\r\n    const date = new Date(cleanedDate);\r\n    if (isNaN(date)) return 'Invalid Date';\r\n\r\n    return date.toLocaleString('en-US', {\r\n        weekday: 'short', // \"Thu\"\r\n        month: 'short', // \"Feb\"\r\n        day: '2-digit', // \"27\"\r\n        year: 'numeric', // \"2025\"\r\n        hour: '2-digit', // \"12\"\r\n        minute: '2-digit', // \"00\"\r\n        hour12: true, // \"AM/PM\"\r\n    });\r\n};\r\n","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Badge = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  bg = 'primary',\n  pill = false,\n  text,\n  className,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, pill && `rounded-pill`, text && `text-${text}`, bg && `bg-${bg}`)\n  });\n});\nBadge.displayName = 'Badge';\nexport default Badge;","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'; // Assuming you are using React Router\r\n\r\nconst Pagination = ({ pageIndex, pageSize, totalPages, setPageIndex, onChangePageSize }) => {\r\n    useEffect(() => {\r\n        // Ensure pageIndex stays within bounds when totalPages changes\r\n        if (pageIndex > totalPages) {\r\n            setPageIndex(Math.max(1, totalPages)); // Keep in valid range\r\n        }\r\n    }, [pageIndex, totalPages, setPageIndex]);\r\n\r\n    return (\r\n        <div className=\"d-lg-flex align-items-center text-center pb-1 pt-2\">\r\n            {/* Page Size Selection */}\r\n            <div className=\"d-inline-block me-3\">\r\n                <label className=\"me-1\">Display :</label>\r\n                <select\r\n                    value={pageSize}\r\n                    onChange={(e) => {\r\n                        const newSize = Number(e.target.value);\r\n                        onChangePageSize(newSize);\r\n                        setPageIndex(1); // Reset to first page\r\n                    }}\r\n                    className=\"form-select d-inline-block w-auto\">\r\n                    {[10, 20, 50, 100].map((size) => (\r\n                        <option key={size} value={size}>\r\n                            {size}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            {/* Page Info */}\r\n            <span className=\"me-3\">\r\n                Page{' '}\r\n                <strong>\r\n                    {pageIndex} of {totalPages}\r\n                </strong>\r\n            </span>\r\n\r\n            {/* Go to Page Input */}\r\n            <label>Go to page: </label>\r\n            <input\r\n                type=\"number\"\r\n                placeholder={`${pageIndex}`}\r\n                min=\"1\"\r\n                max={totalPages}\r\n                onChange={(e) => {\r\n                    const enteredPage = Number(e.target.value);\r\n                    if (enteredPage >= 1 && enteredPage <= totalPages) {\r\n                        setPageIndex(enteredPage);\r\n                    }\r\n                }}\r\n                className=\"form-control ms-1 d-inline-block\"\r\n                style={{ width: '80px' }}\r\n            />\r\n\r\n            {/* Pagination Controls */}\r\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0 pe-4\">\r\n                {/* Previous Button */}\r\n                {pageIndex > 1 && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex - 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            Previous\r\n                        </Link>\r\n                    </li>\r\n                )}\r\n\r\n                {/* Page Number Buttons */}\r\n                {Array.from({ length: totalPages }).map((_, i) => {\r\n                    const page = i + 1; // Adjust index to start from 1\r\n                    const isCurrentPage = page === pageIndex;\r\n                    const isNearCurrent = page >= pageIndex - 1 && page <= pageIndex + 1;\r\n                    const isEdgePage = page === 1 || page === totalPages;\r\n\r\n                    if (totalPages <= 5 || isNearCurrent || isEdgePage) {\r\n                        return (\r\n                            <li\r\n                                key={page}\r\n                                className={`page-item ${isCurrentPage ? 'active' : ''}`}\r\n                                onClick={() => setPageIndex(page)}>\r\n                                <Link to=\"#\" className=\"page-link\">\r\n                                    {page}\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    } else if (\r\n                        (page === 2 && pageIndex >= 5) ||\r\n                        (page === totalPages - 1 && pageIndex <= totalPages - 4)\r\n                    ) {\r\n                        return (\r\n                            <li key={page} className=\"page-item disabled\">\r\n                                <Link to=\"#\" className=\"page-link px-0\">\r\n                                    ...\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    }\r\n\r\n                    return null;\r\n                })}\r\n\r\n                {/* Next Button */}\r\n                {pageIndex < totalPages && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex + 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            Next\r\n                        </Link>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","// @flow\r\nimport React from 'react';\r\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\r\n\r\ntype BreadcrumbItems = {\r\n    label: string,\r\n    path: string,\r\n    active?: boolean,\r\n};\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: Array<BreadcrumbItems>,\r\n    title: string,\r\n};\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\r\n                            {/* <Breadcrumb.Item href=\"/\" ><span className='custom-color'>Dashboard</span></Breadcrumb.Item> */}\r\n                            {props.breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <Breadcrumb.Item active key={index} >\r\n                                        <span className='custom-color'>{item.label}</span>\r\n                                    </Breadcrumb.Item>\r\n                                ) : (\r\n                                    <Breadcrumb.Item key={index} href={item.path} >\r\n                                        <span className='custom-color'>{item.label}</span>\r\n                                    </Breadcrumb.Item>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title custom-color\">{props.title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n"],"names":["HelpAndSupport","_store$getTicketsRedu","_store$getTicketsRedu2","_store$createTicketRe","_store$createTicketRe2","_store$getTicketsRedu3","_store$getTicketsRedu4","_store$getTicketsRedu5","store","useSelector","state","dispatch","useDispatch","search","setSearch","useState","SupportData","getTicketsReducer","supportData","response","createStatus","createTicketReducer","status","SupportLoading","loading","TotalRecords","getUserFromSession","totalRecords","pageIndex","setPageIndex","pageSize","setPageSize","totalPages","setTotalPages","Math","ceil","useEffect","getTicketsAction","limit","page","getStatusBadgeColor","toLowerCase","_jsxs","_Fragment","children","_jsx","PageTitle","breadCrumbItems","label","path","active","title","Row","Col","xs","Card","style","boxShadow","Body","className","Loading","length","scope","map","data","index","_data$user","_data$user2","ticketId","OverlayTrigger","placement","overlay","Tooltip","id","Link","cursor","to","_id","user","email","issueType","Badge","pill","bg","fontSize","createdAt","formatDate","height","Pagination","onChangePageSize","dateString","cleanedDate","replace","date","Date","isNaN","toLocaleString","weekday","month","day","year","hour","minute","hour12","React","_ref","ref","bsPrefix","text","as","Component","props","prefix","useBootstrapPrefix","classNames","displayName","max","value","onChange","e","newSize","Number","target","size","type","placeholder","min","enteredPage","width","onClick","Array","from","_","i","isCurrentPage","Breadcrumb","listProps","item","Item","href"],"sourceRoot":""}