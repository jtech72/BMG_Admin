{"version":3,"file":"static/js/2425.9b569594.chunk.js","mappings":"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","sources":["pages/bmg/location/Cities.js","helpers/Pagination.js","helpers/PageTitle.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Row, Col, Card, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PageTitle from '../../../helpers/PageTitle';\nimport { getCitiesByStateAction, updateCityAction, resetLocationAction } from '../../../redux/actions';\nimport { Loading } from '../../../helpers/loader/Loading';\nimport Pagination from '../../../helpers/Pagination';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nconst Cities = () => {\n    const store = useSelector((state) => state);\n    const dispatch = useDispatch();\n    const { id } = useParams();\n    const navigate = useNavigate();\n    const [search, setSearch] = useState('');\n    const CitiesData = store?.getCitiesByIdReducer?.locationData?.cities;\n    const CitiesLoading = store?.getCitiesByIdReducer?.loading || store?.updateCityReducer?.loading;\n    const updateStatus = store?.updateCityReducer?.locationData?.status;\n    const TotalRecords = store?.getCitiesByIdReducer?.locationData?.totalCities || 0;\n    const [pageIndex, setPageIndex] = useState(1);\n    const [pageSize, setPageSize] = useState(20);\n    const [totalPages, setTotalPages] = useState(Math.ceil(TotalRecords / pageSize));\n\n    useEffect(() => {\n        setTotalPages(Math.ceil(TotalRecords / pageSize));\n    }, [TotalRecords, pageSize]);\n\n    useEffect(() => {\n        dispatch(getCitiesByStateAction({ id, limit: pageSize, page: pageIndex }));\n    }, [dispatch, id, pageSize, pageIndex, search]);\n\n    useEffect(() => {\n        if (updateStatus && updateStatus === 201) {\n            dispatch(getCitiesByStateAction({ id, limit: pageSize, page: pageIndex }));\n            dispatch(resetLocationAction());\n        }\n    }, [updateStatus, dispatch]);\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'States', path: `/bmg/cities/${id}` },\n                    {\n                        label: 'Cities',\n                        path: `/bmg/cities/${id}`,\n                        active: true,\n                    },\n                ]}\n                title={'Cities'}\n            />\n            <Row>\n                <Col xs={12}>\n                    <Card\n                        style={{\n                            boxShadow:\n                                'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset',\n                        }}>\n                        <Card.Body className=\"text-center\">\n                            <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                                <span><button className='rounded-pill px-1 bg-dark text-light' onClick={() => navigate(-1)}><i class=\"mdi mdi-arrow-left\"></i> Back</button></span>\n                                <span className=\"px-3 py-1 bg-dark text-light rounded\">\n                                    Total Cities: {TotalRecords || 0}\n                                </span>\n                                {/* <div className=\"d-flex\">\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control w-auto me-1\"\n                                        placeholder=\"Search...\"\n                                        value={search}\n                                        onChange={(e) => setSearch(e.target.value)}\n                                    />\n                                    {search && (\n                                        <i\n                                            className=\"mdi mdi-backspace-outline text-danger fs-3\"\n                                            onClick={() => setSearch(\"\")}\n                                            style={{ cursor: \"pointer\" }}\n                                        ></i>\n                                    )}\n                                </div> */}\n                            </div>\n\n                            {CitiesLoading ? (\n                                <>\n                                    <Loading />\n                                </>\n                            ) : (\n                                <>\n                                    {CitiesData && CitiesData?.length > 0 ? (\n                                        <>\n                                            <div className=\"table-responsive\">\n                                                <table className=\"table text-start table-striped bg-white \">\n                                                    <thead>\n                                                        <tr className=\"text-nowrap\">\n                                                            <th scope=\"col\">\n                                                                <i className=\"mdi mdi-merge\"></i>\n                                                            </th>\n                                                            <th scope=\"col\">City</th>\n                                                            <th scope=\"col\">Country Code</th>\n                                                            <th scope=\"col\">Country ID #</th>\n                                                            <th scope=\"col\">State Code</th>\n                                                            <th scope=\"col\">State ID #</th>\n                                                            <th scope=\"col\">Status</th>\n                                                        </tr>\n                                                    </thead>\n                                                    <tbody>\n                                                        {CitiesData?.map((data, index) => (\n                                                            <tr key={index} className=\"text-dark fw-bold text-nowrap\">\n                                                                <th scope=\"row\">{(pageIndex - 1) * pageSize + index + 1}</th>\n                                                                <td className=\"fw-bold \">\n                                                                    {data?.name ? (\n                                                                        <span>{data?.name} </span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n                                                                <td className=\"fw-bold \">\n                                                                    {data?.country_code ? (\n                                                                        <span>{data?.country_code} </span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n                                                                <td className=\"fw-bold \">\n                                                                    {data?.country_id ? (\n                                                                        <span>{data?.country_id} </span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n                                                                <td className=\"fw-bold \">\n                                                                    {data?.state_code ? (\n                                                                        <span>{data?.state_code} </span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n                                                                <td className=\"fw-bold \">\n                                                                    {data?.id ? (\n                                                                        <span>{data?.id} </span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n                                                                <td className=\"fw-bold \">\n                                                                    <div className=\"form-check form-switch\">\n                                                                        <input\n                                                                            className=\"form-check-input\"\n                                                                            type=\"checkbox\"\n                                                                            role=\"switch\"\n                                                                            id={`status-toggle-${data._id}`}\n                                                                            checked={data.status}\n                                                                            onChange={() => {\n                                                                                dispatch(updateCityAction({\n                                                                                    id: data?._id,\n                                                                                    status: !data?.status,\n                                                                                }));\n                                                                            }}\n                                                                        />\n                                                                        <label className=\"form-check-label\" htmlFor={`status-toggle-${data._id}`}>\n                                                                            {data.status ? 'Active' : 'Inactive'}\n                                                                        </label>\n                                                                    </div>\n                                                                </td>\n                                                            </tr>\n                                                        ))}\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </>\n                                    ) : (\n                                        <div\n                                            className=\"text-center d-flex align-items-center justify-content-center\"\n                                            style={{ height: '30vh' }}>\n                                            <code className=\"fs-4\">No Cities were found.</code>\n                                        </div>\n                                    )}\n                                </>\n                            )}\n                            {TotalRecords > 20 && (\n                                <Pagination\n                                    pageIndex={pageIndex}\n                                    pageSize={pageSize}\n                                    totalPages={totalPages}\n                                    setPageIndex={setPageIndex}\n                                    onChangePageSize={setPageSize}\n                                />\n                            )}\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Cities;\n","import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom'; // Assuming you are using React Router\n\nconst Pagination = ({ pageIndex, pageSize, totalPages, setPageIndex, onChangePageSize }) => {\n    useEffect(() => {\n        // Ensure pageIndex stays within bounds when totalPages changes\n        if (pageIndex > totalPages) {\n            setPageIndex(Math.max(1, totalPages)); // Keep in valid range\n        }\n    }, [pageIndex, totalPages, setPageIndex]);\n\n    return (\n        <div className=\"d-lg-flex align-items-center text-center pb-1 pt-2\">\n            {/* Page Size Selection */}\n            <div className=\"d-inline-block me-3\">\n                <label className=\"me-1\">Display :</label>\n                <select\n                    value={pageSize}\n                    onChange={(e) => {\n                        const newSize = Number(e.target.value);\n                        onChangePageSize(newSize);\n                        setPageIndex(1); // Reset to first page\n                    }}\n                    className=\"form-select d-inline-block w-auto\">\n                    {[10, 20, 50, 100].map((size) => (\n                        <option key={size} value={size}>\n                            {size}\n                        </option>\n                    ))}\n                </select>\n            </div>\n\n            {/* Page Info */}\n            <span className=\"me-3\">\n                Page{' '}\n                <strong>\n                    {pageIndex} of {totalPages}\n                </strong>\n            </span>\n\n            {/* Go to Page Input */}\n            <label>Go to page: </label>\n            <input\n                type=\"number\"\n                placeholder={`${pageIndex}`}\n                min=\"1\"\n                max={totalPages}\n                onChange={(e) => {\n                    const enteredPage = Number(e.target.value);\n                    if (enteredPage >= 1 && enteredPage <= totalPages) {\n                        setPageIndex(enteredPage);\n                    }\n                }}\n                className=\"form-control ms-1 d-inline-block\"\n                style={{ width: '80px' }}\n            />\n\n            {/* Pagination Controls */}\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0 pe-4\">\n                {/* Previous Button */}\n                {pageIndex > 1 && (\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex - 1)}>\n                        <Link to=\"#\" className=\"page-link\">\n                            Previous\n                        </Link>\n                    </li>\n                )}\n\n                {/* Page Number Buttons */}\n                {Array.from({ length: totalPages }).map((_, i) => {\n                    const page = i + 1; // Adjust index to start from 1\n                    const isCurrentPage = page === pageIndex;\n                    const isNearCurrent = page >= pageIndex - 1 && page <= pageIndex + 1;\n                    const isEdgePage = page === 1 || page === totalPages;\n\n                    if (totalPages <= 5 || isNearCurrent || isEdgePage) {\n                        return (\n                            <li\n                                key={page}\n                                className={`page-item ${isCurrentPage ? 'active' : ''}`}\n                                onClick={() => setPageIndex(page)}>\n                                <Link to=\"#\" className=\"page-link\">\n                                    {page}\n                                </Link>\n                            </li>\n                        );\n                    } else if (\n                        (page === 2 && pageIndex >= 5) ||\n                        (page === totalPages - 1 && pageIndex <= totalPages - 4)\n                    ) {\n                        return (\n                            <li key={page} className=\"page-item disabled\">\n                                <Link to=\"#\" className=\"page-link px-0\">\n                                    ...\n                                </Link>\n                            </li>\n                        );\n                    }\n\n                    return null;\n                })}\n\n                {/* Next Button */}\n                {pageIndex < totalPages && (\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex + 1)}>\n                        <Link to=\"#\" className=\"page-link\">\n                            Next\n                        </Link>\n                    </li>\n                )}\n            </ul>\n        </div>\n    );\n};\n\nexport default Pagination;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            {/* <Breadcrumb.Item href=\"/\" ><span className='custom-color'>Dashboard</span></Breadcrumb.Item> */}\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index} >\n                                        <span className='custom-color'>{item.label}</span>\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path} >\n                                        <span className='custom-color'>{item.label}</span>\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title custom-color\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n"],"names":["Cities","_store$getCitiesByIdR","_store$getCitiesByIdR2","_store$getCitiesByIdR3","_store$updateCityRedu","_store$updateCityRedu2","_store$updateCityRedu3","_store$getCitiesByIdR4","_store$getCitiesByIdR5","store","useSelector","state","dispatch","useDispatch","id","useParams","navigate","useNavigate","search","setSearch","useState","CitiesData","getCitiesByIdReducer","locationData","cities","CitiesLoading","loading","updateCityReducer","updateStatus","status","TotalRecords","totalCities","pageIndex","setPageIndex","pageSize","setPageSize","totalPages","setTotalPages","Math","ceil","useEffect","getCitiesByStateAction","limit","page","resetLocationAction","_jsxs","_Fragment","children","_jsx","PageTitle","breadCrumbItems","label","path","active","title","Row","Col","xs","Card","style","boxShadow","Body","className","onClick","class","Loading","length","scope","map","data","index","name","country_code","country_id","state_code","type","role","_id","checked","onChange","updateCityAction","htmlFor","height","Pagination","onChangePageSize","_ref","max","value","e","newSize","Number","target","size","placeholder","min","enteredPage","width","Link","to","Array","from","_","i","isCurrentPage","props","Breadcrumb","listProps","item","Item","href"],"sourceRoot":""}