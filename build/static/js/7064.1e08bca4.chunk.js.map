{"version":3,"file":"static/js/7064.1e08bca4.chunk.js","mappings":"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","sources":["helpers/Pagination.js","helpers/PageTitle.js","pages/bmg/notification/notificationModal/NotificationModal.js","pages/bmg/notification/Notification.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom'; // Assuming you are using React Router\n\nconst Pagination = ({ pageIndex, pageSize, totalPages, setPageIndex, onChangePageSize }) => {\n    useEffect(() => {\n        // Ensure pageIndex stays within bounds when totalPages changes\n        if (pageIndex > totalPages) {\n            setPageIndex(Math.max(1, totalPages)); // Keep in valid range\n        }\n    }, [pageIndex, totalPages, setPageIndex]);\n\n    return (\n        <div className=\"d-lg-flex align-items-center text-center pb-1 pt-2\">\n            {/* Page Size Selection */}\n            <div className=\"d-inline-block me-3\">\n                <label className=\"me-1\">Display :</label>\n                <select\n                    value={pageSize}\n                    onChange={(e) => {\n                        const newSize = Number(e.target.value);\n                        onChangePageSize(newSize);\n                        setPageIndex(1); // Reset to first page\n                    }}\n                    className=\"form-select d-inline-block w-auto\">\n                    {[10, 20, 50, 100].map((size) => (\n                        <option key={size} value={size}>\n                            {size}\n                        </option>\n                    ))}\n                </select>\n            </div>\n\n            {/* Page Info */}\n            <span className=\"me-3\">\n                Page{' '}\n                <strong>\n                    {pageIndex} of {totalPages}\n                </strong>\n            </span>\n\n            {/* Go to Page Input */}\n            <label>Go to page: </label>\n            <input\n                type=\"number\"\n                placeholder={`${pageIndex}`}\n                min=\"1\"\n                max={totalPages}\n                onChange={(e) => {\n                    const enteredPage = Number(e.target.value);\n                    if (enteredPage >= 1 && enteredPage <= totalPages) {\n                        setPageIndex(enteredPage);\n                    }\n                }}\n                className=\"form-control ms-1 d-inline-block\"\n                style={{ width: '80px' }}\n            />\n\n            {/* Pagination Controls */}\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0 pe-4\">\n                {/* Previous Button */}\n                {pageIndex > 1 && (\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex - 1)}>\n                        <Link to=\"#\" className=\"page-link\">\n                            Previous\n                        </Link>\n                    </li>\n                )}\n\n                {/* Page Number Buttons */}\n                {Array.from({ length: totalPages }).map((_, i) => {\n                    const page = i + 1; // Adjust index to start from 1\n                    const isCurrentPage = page === pageIndex;\n                    const isNearCurrent = page >= pageIndex - 1 && page <= pageIndex + 1;\n                    const isEdgePage = page === 1 || page === totalPages;\n\n                    if (totalPages <= 5 || isNearCurrent || isEdgePage) {\n                        return (\n                            <li\n                                key={page}\n                                className={`page-item ${isCurrentPage ? 'active' : ''}`}\n                                onClick={() => setPageIndex(page)}>\n                                <Link to=\"#\" className=\"page-link\">\n                                    {page}\n                                </Link>\n                            </li>\n                        );\n                    } else if (\n                        (page === 2 && pageIndex >= 5) ||\n                        (page === totalPages - 1 && pageIndex <= totalPages - 4)\n                    ) {\n                        return (\n                            <li key={page} className=\"page-item disabled\">\n                                <Link to=\"#\" className=\"page-link px-0\">\n                                    ...\n                                </Link>\n                            </li>\n                        );\n                    }\n\n                    return null;\n                })}\n\n                {/* Next Button */}\n                {pageIndex < totalPages && (\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex + 1)}>\n                        <Link to=\"#\" className=\"page-link\">\n                            Next\n                        </Link>\n                    </li>\n                )}\n            </ul>\n        </div>\n    );\n};\n\nexport default Pagination;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            {/* <Breadcrumb.Item href=\"/\" ><span className='custom-color'>Dashboard</span></Breadcrumb.Item> */}\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index} >\n                                        <span className='custom-color'>{item.label}</span>\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path} >\n                                        <span className='custom-color'>{item.label}</span>\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title custom-color\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import React, { useState, useEffect } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport {\n    createNotificationActions,\n    getNotificationActions,\n    updateNotificationActions,\n} from '../../../../redux/actions';\nimport { ButtonLoading } from '../../../../helpers/loader/Loading';\nimport ToastContainer from '../../../../helpers/toast/ToastContainer';\n\nconst NotificationModal = ({ show, hide, notificationData, setApiCall }) => {\n    const dispatch = useDispatch();\n    const store = useSelector((state) => state);\n\n    const loading = store?.createNotificationDataReducer?.loading || store?.updateNotificationDataReducer?.loading;\n    const createStatus = store?.createNotificationDataReducer?.notificationData?.status;\n    const updateStatus = store?.updateNotificationDataReducer?.notificationData?.status;\n    // State to manage form data\n    const [notification, setNotification] = useState({\n        type: '',\n        message: '',\n        status: true,\n    });\n    const closeModal = () => {\n        setNotification({\n            type: '',\n            message: '',\n        });\n        hide();\n    };\n    // Handle changes in form fields\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setNotification((prev) => ({ ...prev, [name]: value }));\n    };\n\n    // Handle ReactQuill editor changes\n    const handleQuillChange = (value) => {\n        setNotification((prev) => ({ ...prev, message: value }));\n    };\n\n    const modules = {\n        toolbar: [\n            // Remove the 'header' dropdown\n            ['bold', 'italic', 'underline'], // formatting\n            ['link'],                         // link and image\n            // [{ 'color': [] }, { 'background': [] }],   // color pickers\n            // [{ 'align': [] }],                         // alignment\n            ['clean']                                  // remove formatting\n        ]\n    };\n\n\n    useEffect(() => {\n        if (notificationData?.data) {\n            setNotification({\n                type: notificationData?.data?.type || '',\n                message: notificationData?.data?.message || '',\n                status: notificationData?.data?.status ?? false,\n            });\n        }\n    }, [notificationData?.data]);\n\n    // Handle form submission\n    const handleSubmit = () => {\n        if (!notification.type || !notification.message.trim()) {\n            ToastContainer('Please fill in all fields as they are required !.', 'info');\n            return;\n        }\n        const data = {\n            _id: notificationData?.data?._id,\n            type: notification?.type,\n            message: notification?.message,\n            status: notification?.status,\n        };\n        if (notificationData?.data?._id) {\n            dispatch(updateNotificationActions(data));\n        } else {\n            dispatch(createNotificationActions(notification));\n        }\n    };\n    useEffect(() => {\n        if (!loading && (createStatus === 200 || updateStatus === 200)) {\n            // dispatch(getNotificationActions({ search: '', limit: '', page: '', type: 'both' }));\n            setApiCall();\n            closeModal();\n        }\n    }, [createStatus, updateStatus, loading, dispatch]);\n\n    const requiredStar = <span className=\"text-danger fs-4\">*</span>;\n\n    return (\n        <Modal show={show} centered size=\"lg\" backdrop=\"static\"\n        // onHide={closeModal}\n        >\n            <Modal.Header className=\"px-2 py-1 text-light\" style={{ backgroundColor: '#008003' }}>\n                <Modal.Title>{notificationData?.type} Notification</Modal.Title>\n                {/* <i className=\"mdi mdi-close fs-3\" onClick={closeModal} style={{ cursor: 'pointer' }}></i> */}\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Type {requiredStar}</Form.Label>\n                        <Form.Select\n                            name=\"type\"\n                            value={notification.type}\n                            onChange={(e) => setNotification({ ...notification, type: e.target.value })}>\n                            <option value=\"\" selected disabled>\n                                Select\n                            </option>\n                            <option value=\"buyer\">Buyer</option>\n                            <option value=\"seller\">Seller</option>\n                            <option value=\"both\">Both</option>\n                        </Form.Select>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Message {requiredStar}</Form.Label>\n                        {/* <ReactQuill\n                            value={notification.message}\n                            onChange={handleQuillChange}\n                            theme=\"snow\"\n                            placeholder=\"Enter message...\"\n                        /> */}\n                        <ReactQuill\n                            value={notification.message}\n                            onChange={handleQuillChange}\n                            theme=\"snow\"\n                            modules={modules}\n                            placeholder=\"Enter message...\"\n                        />\n                    </Form.Group>\n                    {notificationData?.data && (\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Status</Form.Label>\n                            <Form.Select name=\"status\" value={notificationData?.data?.status} onChange={handleChange}>\n                                <option value=\"true\">Active</option>\n                                <option value=\"false\">Inactive</option>\n                            </Form.Select>\n                        </Form.Group>\n                    )}\n                </Form>\n            </Modal.Body>\n            <Modal.Footer className=\"px-2 py-1\">\n                <Button variant=\"danger\" onClick={closeModal}>\n                    Cancel\n                </Button>\n                <Button style={{ backgroundColor: '#008003' }} onClick={handleSubmit} disabled={loading}>\n                    {loading ? (\n                        <ButtonLoading />\n                    ) : (\n                        <>{notificationData?.type === 'Edit' ? 'Update' : 'Add'} Notification</>\n                    )}\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default NotificationModal;\n","import { useCallback, useEffect, useState } from 'react';\nimport { Row, Col, Card, OverlayTrigger, Tooltip, Button, Table } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PageTitle from '../../../helpers/PageTitle';\nimport { Loading } from '../../../helpers/loader/Loading';\nimport { getNotificationActions, getNotificationByAdminActions } from '../../../redux/actions';\nimport Pagination from '../../../helpers/Pagination';\nimport NotificationModal from './notificationModal/NotificationModal';\nconst Notification = () => {\n    const dispatch = useDispatch();\n    const { getNotificationByAdminReducer } = useSelector((state) => state);\n    const NotificationData = getNotificationByAdminReducer?.notificationData?.data || [];\n    const TotalRecords = getNotificationByAdminReducer?.notificationData?.totalRecords || 0;\n    const NotificationLoading = getNotificationByAdminReducer?.loading;\n    const [search, setSearch] = useState('');\n    const [pageIndex, setPageIndex] = useState(1);\n    const [pageSize, setPageSize] = useState(20);\n    const [totalPages, setTotalPages] = useState(1);\n\n    const [nofificationModal, setNotificationModal] = useState({\n        type: '',\n        data: null,\n        isVisible: false,\n    });\n\n    useEffect(() => {\n        setTotalPages(Math.ceil(TotalRecords / pageSize));\n    }, [TotalRecords, pageSize]);\n    const [apiCall, setApiCall] = useState(false);\n    // useEffect(() => {\n    //     // dispatch(getNotificationActions({ search, limit: pageSize, page: pageIndex, type: 'both' }));\n    //     dispatch(getNotificationByAdminActions({ search }));\n    // }, [dispatch, search, pageIndex, pageSize, apiCall]);\n\n    // Calculate total pages\n    useEffect(() => {\n        setTotalPages(Math.ceil(TotalRecords / pageSize));\n    }, [TotalRecords, pageSize]);\n\n    // API call function with proper parameter encoding\n    const fetchNotifications = useCallback(() => {\n        const params = {\n            search: encodeURIComponent(search),\n            limit: pageSize,\n            page: pageIndex\n        };\n\n        dispatch(getNotificationByAdminActions(params));\n    }, [search, pageSize, pageIndex, dispatch]);\n\n    // Debounced API call effect\n    useEffect(() => {\n        const debounceTimer = setTimeout(() => {\n            fetchNotifications();\n        }, 300);\n\n        return () => clearTimeout(debounceTimer);\n    }, [fetchNotifications]);\n\n    // Force refresh when apiCall state changes\n    useEffect(() => {\n        if (apiCall) {\n            fetchNotifications();\n            setApiCall(false);\n        }\n    }, [apiCall, fetchNotifications]);\n\n    const handleNotificationModal = (type, data = null) => {\n        setNotificationModal({ type, data, isVisible: true });\n    };\n    // useEffect(() => {\n    //     if (!search.trim()) return;\n\n    //     const delayDebounce = setTimeout(() => {\n    //         // ✅ Call your API or search logic here\n    //     }, 200); // wait 200ms after user stops typing\n\n    //     return () => clearTimeout(delayDebounce);\n    // }, [search]);\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[{ label: 'Notification', path: '/bmg/notification', active: true }]}\n                title=\"Notification Management\"\n            />\n\n            <Row>\n                <Col xs={12}>\n                    <Card\n                        style={{\n                            boxShadow:\n                                'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset',\n                        }}>\n                        <Card.Body>\n                            <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                                <span className=\"px-3 py-1 bg-dark text-light rounded\">\n                                    Total Notification's: {TotalRecords || 0}\n                                </span>\n                                <div className=\"d-flex\">\n                                    {/* <input\n                                        type=\"text\"\n                                        className=\"form-control w-auto me-2\"\n                                        placeholder=\"Search...\"\n                                        value={search}\n                                        onChange={(e) => setSearch(e.target.value)}\n                                    />\n                                    {search && (\n                                        <i\n                                            className=\"mdi mdi-backspace-outline text-danger fs-3 me-2\"\n                                            onClick={() => setSearch('')}\n                                            style={{ cursor: 'pointer' }}></i>\n                                    )} */}\n                                    <Button variant=\"success\" onClick={() => handleNotificationModal('Add')}>\n                                        <i className=\"mdi mdi-plus-circle\"></i> Add\n                                    </Button>\n                                </div>\n                            </div>\n\n                            {NotificationLoading ? (\n                                <Loading />\n                            ) : NotificationData.length > 0 ? (\n                                <div className=\"table-responsive\">\n                                    <Table bordered hover className=\"bg-white text-start\">\n                                        <thead>\n                                            <tr className=\"text-nowrap text-secondary\">\n                                                <th>\n                                                    <i className=\"mdi mdi-merge\"></i>\n                                                </th>\n                                                <th>Message</th>\n                                                <th>Type</th>\n                                                <th>Status</th>\n                                                <th>Action</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {NotificationData.map((data, index) => (\n                                                <tr key={data._id || index}>\n                                                    <td>{(pageIndex - 1) * pageSize + index + 1}</td>\n                                                    <td className=\"p-1 m-0\">\n                                                        {' '}\n                                                        <span\n                                                            dangerouslySetInnerHTML={{\n                                                                __html: data?.message || 'N/A',\n                                                            }}\n                                                        />\n                                                    </td>\n                                                    <td className=\"text-capitalize\">{data?.type}</td>\n                                                    <td>\n                                                        <span\n                                                            className={`badge ${data?.status ? 'bg-success' : 'bg-danger'\n                                                                } px-2 py-1`}>\n                                                            {data?.status ? 'Active' : 'Inactive'}\n                                                        </span>\n                                                    </td>\n                                                    <td>\n                                                        <i className=\"mdi mdi-square-edit-outline fs-4 text-primary\"\n                                                            style={{ cursor: 'pointer' }}\n                                                            onClick={() => handleNotificationModal('Edit', data)}></i>\n                                                    </td>\n                                                </tr>\n                                            ))}\n                                        </tbody>\n                                    </Table>\n                                </div>\n                            ) : (\n                                <div className=\"text-center py-4\">\n                                    <code className=\"fs-5 text-muted\">\n                                        No Notification's found. Add some to display.\n                                    </code>\n                                </div>\n                            )}\n                            {TotalRecords > 20 && (\n                                <Pagination\n                                    pageIndex={pageIndex}\n                                    pageSize={pageSize}\n                                    totalPages={totalPages}\n                                    setPageIndex={setPageIndex}\n                                    onChangePageSize={setPageSize}\n                                />\n                            )}\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n            <NotificationModal\n                setApiCall={() => setApiCall((prev) => !prev)}\n                show={nofificationModal.isVisible}\n                hide={() => setNotificationModal({ ...nofificationModal, isVisible: false })}\n                notificationData={nofificationModal}\n            />\n        </>\n    );\n};\n\nexport default Notification;\n"],"names":["_ref","pageIndex","pageSize","totalPages","setPageIndex","onChangePageSize","useEffect","Math","max","_jsxs","className","children","_jsx","value","onChange","e","newSize","Number","target","map","size","type","placeholder","min","enteredPage","style","width","onClick","Link","to","Array","from","length","_","i","page","isCurrentPage","props","Row","Col","Breadcrumb","listProps","breadCrumbItems","item","index","active","Item","label","href","path","title","_store$createNotifica","_store$updateNotifica","_store$createNotifica2","_store$createNotifica3","_store$updateNotifica2","_store$updateNotifica3","_notificationData$dat7","show","hide","notificationData","setApiCall","dispatch","useDispatch","store","useSelector","state","loading","createNotificationDataReducer","updateNotificationDataReducer","createStatus","status","updateStatus","notification","setNotification","useState","message","closeModal","_notificationData$dat","_notificationData$dat2","_notificationData$dat3","_notificationData$dat4","data","requiredStar","Modal","centered","backdrop","Header","backgroundColor","Title","Body","Form","Group","Label","Select","name","selected","disabled","ReactQuill","prev","theme","modules","toolbar","Footer","Button","variant","handleSubmit","_notificationData$dat5","_notificationData$dat6","trim","ToastContainer","_id","updateNotificationActions","createNotificationActions","ButtonLoading","_Fragment","Notification","_getNotificationByAdm","_getNotificationByAdm2","getNotificationByAdminReducer","NotificationData","TotalRecords","totalRecords","NotificationLoading","search","setSearch","setPageSize","setTotalPages","nofificationModal","setNotificationModal","isVisible","ceil","apiCall","fetchNotifications","useCallback","params","encodeURIComponent","limit","getNotificationByAdminActions","debounceTimer","setTimeout","clearTimeout","handleNotificationModal","arguments","undefined","PageTitle","xs","Card","boxShadow","Loading","Table","bordered","hover","dangerouslySetInnerHTML","__html","cursor","Pagination","NotificationModal"],"sourceRoot":""}