{"version":3,"file":"static/js/8041.09e64d7b.chunk.js","mappings":"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","sources":["helpers/Pagination.js","helpers/PageTitle.js","pages/bmg/enquiry/Enquiry.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'; // Assuming you are using React Router\r\n\r\nconst Pagination = ({ pageIndex, pageSize, totalPages, setPageIndex, onChangePageSize }) => {\r\n    useEffect(() => {\r\n        // Ensure pageIndex stays within bounds when totalPages changes\r\n        if (pageIndex > totalPages) {\r\n            setPageIndex(Math.max(1, totalPages)); // Keep in valid range\r\n        }\r\n    }, [pageIndex, totalPages, setPageIndex]);\r\n\r\n    return (\r\n        <div className=\"d-lg-flex align-items-center text-center pb-1 pt-2\">\r\n            {/* Page Size Selection */}\r\n            <div className=\"d-inline-block me-3\">\r\n                <label className=\"me-1\">Display :</label>\r\n                <select\r\n                    value={pageSize}\r\n                    onChange={(e) => {\r\n                        const newSize = Number(e.target.value);\r\n                        onChangePageSize(newSize);\r\n                        setPageIndex(1); // Reset to first page\r\n                    }}\r\n                    className=\"form-select d-inline-block w-auto\">\r\n                    {[10, 20, 50, 100].map((size) => (\r\n                        <option key={size} value={size}>\r\n                            {size}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            {/* Page Info */}\r\n            <span className=\"me-3\">\r\n                Page{' '}\r\n                <strong>\r\n                    {pageIndex} of {totalPages}\r\n                </strong>\r\n            </span>\r\n\r\n            {/* Go to Page Input */}\r\n            <label>Go to page: </label>\r\n            <input\r\n                type=\"number\"\r\n                placeholder={`${pageIndex}`}\r\n                min=\"1\"\r\n                max={totalPages}\r\n                onChange={(e) => {\r\n                    const enteredPage = Number(e.target.value);\r\n                    if (enteredPage >= 1 && enteredPage <= totalPages) {\r\n                        setPageIndex(enteredPage);\r\n                    }\r\n                }}\r\n                className=\"form-control ms-1 d-inline-block\"\r\n                style={{ width: '80px' }}\r\n            />\r\n\r\n            {/* Pagination Controls */}\r\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0 pe-4\">\r\n                {/* Previous Button */}\r\n                {pageIndex > 1 && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex - 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            Previous\r\n                        </Link>\r\n                    </li>\r\n                )}\r\n\r\n                {/* Page Number Buttons */}\r\n                {Array.from({ length: totalPages }).map((_, i) => {\r\n                    const page = i + 1; // Adjust index to start from 1\r\n                    const isCurrentPage = page === pageIndex;\r\n                    const isNearCurrent = page >= pageIndex - 1 && page <= pageIndex + 1;\r\n                    const isEdgePage = page === 1 || page === totalPages;\r\n\r\n                    if (totalPages <= 5 || isNearCurrent || isEdgePage) {\r\n                        return (\r\n                            <li\r\n                                key={page}\r\n                                className={`page-item ${isCurrentPage ? 'active' : ''}`}\r\n                                onClick={() => setPageIndex(page)}>\r\n                                <Link to=\"#\" className=\"page-link\">\r\n                                    {page}\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    } else if (\r\n                        (page === 2 && pageIndex >= 5) ||\r\n                        (page === totalPages - 1 && pageIndex <= totalPages - 4)\r\n                    ) {\r\n                        return (\r\n                            <li key={page} className=\"page-item disabled\">\r\n                                <Link to=\"#\" className=\"page-link px-0\">\r\n                                    ...\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    }\r\n\r\n                    return null;\r\n                })}\r\n\r\n                {/* Next Button */}\r\n                {pageIndex < totalPages && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex + 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            Next\r\n                        </Link>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","// @flow\r\nimport React from 'react';\r\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\r\n\r\ntype BreadcrumbItems = {\r\n    label: string,\r\n    path: string,\r\n    active?: boolean,\r\n};\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: Array<BreadcrumbItems>,\r\n    title: string,\r\n};\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\r\n                            {/* <Breadcrumb.Item href=\"/\" ><span className='custom-color'>Dashboard</span></Breadcrumb.Item> */}\r\n                            {props.breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <Breadcrumb.Item active key={index} >\r\n                                        <span className='custom-color'>{item.label}</span>\r\n                                    </Breadcrumb.Item>\r\n                                ) : (\r\n                                    <Breadcrumb.Item key={index} href={item.path} >\r\n                                        <span className='custom-color'>{item.label}</span>\r\n                                    </Breadcrumb.Item>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title custom-color\">{props.title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import { useEffect, useState } from 'react';\r\nimport { Row, Col, Card, OverlayTrigger, Tooltip, Modal, Container, Carousel } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PageTitle from '../../../helpers/PageTitle';\r\nimport { Loading } from '../../../helpers/loader/Loading';\r\nimport { getEnquiryActions } from '../../../redux/actions';\r\nimport Pagination from '../../../helpers/Pagination';\r\nconst Enquiry = () => {\r\n    const store = useSelector((state) => state);\r\n    const dispatch = useDispatch();\r\n    const [search, setSearch] = useState('');\r\n    const EnquiryData = store?.enquiryDataReducer?.enquiryData?.contacts;\r\n    const EnquiryLoading = store?.enquiryDataReducer?.loading;\r\n    const TotalRecords = store?.enquiryDataReducer?.enquiryData?.totalRecords;\r\n    const [pageIndex, setPageIndex] = useState(1);\r\n    const [pageSize, setPageSize] = useState(20);\r\n    const [totalPages, setTotalPages] = useState(Math.ceil(TotalRecords / pageSize));\r\n\r\n    useEffect(() => {\r\n        setTotalPages(Math.ceil(TotalRecords / pageSize));\r\n    }, [TotalRecords, pageSize]);\r\n    useEffect(() => {\r\n        dispatch(getEnquiryActions({ search: search, limit: pageSize, page: pageIndex }));\r\n    }, [dispatch, pageIndex, pageSize, search]);\r\n\r\n    return (\r\n        <>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    {\r\n                        label: `Enquiries`,\r\n                        path: '/bmg/enquiry',\r\n                        active: true,\r\n                    },\r\n                ]}\r\n                title={`Enquiries`}\r\n            />\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Card\r\n                        style={{\r\n                            boxShadow:\r\n                                'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset',\r\n                        }}>\r\n                        <Card.Body className=\"text-center\">\r\n                            <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                                <span className=\"px-3 py-1 bg-dark text-light rounded\">\r\n                                    Total Enquiries: {TotalRecords || 0}\r\n                                </span>\r\n                                <div className=\"d-flex\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control w-auto me-1\"\r\n                                        placeholder=\"Search...\"\r\n                                        value={search}\r\n                                        onChange={(e) => setSearch(e.target.value)}\r\n                                    />\r\n                                    {search && (\r\n                                        <i\r\n                                            className=\"mdi mdi-backspace-outline text-danger fs-3\"\r\n                                            onClick={() => setSearch('')}\r\n                                            style={{ cursor: 'pointer' }}></i>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {EnquiryLoading ? (\r\n                                <>\r\n                                    <Loading />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    {EnquiryData && EnquiryData?.length > 0 ? (\r\n                                        <>\r\n                                            <div className=\"table-responsive\">\r\n                                                <table className=\"table text-start table-striped bg-white \">\r\n                                                    <thead>\r\n                                                        <tr className=\"text-nowrap\">\r\n                                                            <th scope=\"col\">\r\n                                                                <i className=\"mdi mdi-merge\"></i>\r\n                                                            </th>\r\n                                                            <th scope=\"col\">Full Name</th>\r\n                                                            <th scope=\"col\">Email</th>\r\n                                                            <th scope=\"col\">Contact No</th>\r\n                                                            <th scope=\"col\">Message</th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {EnquiryData?.map((data, index) => (\r\n                                                            <tr key={index} className=\"text-dark fw-bold text-nowrap\">\r\n                                                                <th scope=\"row\">{(pageIndex - 1) * pageSize + index + 1}</th>\r\n                                                                <td className=\"text-uppercase fw-bold\">\r\n                                                                    {data?.fullName ? (\r\n                                                                        <span>{data?.fullName} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className=\"fw-bold \">\r\n                                                                    {data?.email ? (\r\n                                                                        <span>{data?.email} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className=\"fw-bold \">\r\n                                                                    {data?.phoneNumber ? (\r\n                                                                        <span>{data?.phoneNumber} </span>\r\n                                                                    ) : (\r\n                                                                        <span className=\"d-flex justify-content-center\">\r\n                                                                            N/A\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </td>\r\n                                                                <td className=\"fw-bold\" style={{ cursor: 'pointer' }}>\r\n                                                                    <OverlayTrigger\r\n                                                                        placement=\"left\"\r\n                                                                        overlay={\r\n                                                                            <Tooltip id=\"overlay-example\">\r\n                                                                                {data?.message}\r\n                                                                            </Tooltip>\r\n                                                                        }>\r\n                                                                        <b>\r\n                                                                            {data?.message ? (\r\n                                                                                <span>\r\n                                                                                    {data?.message.slice(0, 20)}{' '}\r\n                                                                                </span>\r\n                                                                            ) : (\r\n                                                                                <span className=\"d-flex justify-content-center\">\r\n                                                                                    N/A\r\n                                                                                </span>\r\n                                                                            )}\r\n                                                                        </b>\r\n                                                                    </OverlayTrigger>\r\n                                                                </td>\r\n                                                            </tr>\r\n                                                        ))}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </>\r\n                                    ) : (\r\n                                        <div\r\n                                            className=\"text-center d-flex align-items-center justify-content-center\"\r\n                                            style={{ height: '30vh' }}>\r\n                                            <code className=\"fs-4\">No Enquiries found. </code>\r\n                                        </div>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                            {TotalRecords > 20 && (\r\n                                <Pagination\r\n                                    pageIndex={pageIndex}\r\n                                    pageSize={pageSize}\r\n                                    totalPages={totalPages}\r\n                                    setPageIndex={setPageIndex}\r\n                                    onChangePageSize={setPageSize}\r\n                                />\r\n                            )}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Enquiry;\r\n"],"names":["_ref","pageIndex","pageSize","totalPages","setPageIndex","onChangePageSize","useEffect","Math","max","_jsxs","className","children","_jsx","value","onChange","e","newSize","Number","target","map","size","type","placeholder","min","enteredPage","style","width","onClick","Link","to","Array","from","length","_","i","page","isCurrentPage","props","Row","Col","Breadcrumb","listProps","breadCrumbItems","item","index","active","Item","label","href","path","title","Enquiry","_store$enquiryDataRed","_store$enquiryDataRed2","_store$enquiryDataRed3","_store$enquiryDataRed4","_store$enquiryDataRed5","store","useSelector","state","dispatch","useDispatch","search","setSearch","useState","EnquiryData","enquiryDataReducer","enquiryData","contacts","EnquiryLoading","loading","TotalRecords","totalRecords","setPageSize","setTotalPages","ceil","getEnquiryActions","limit","_Fragment","PageTitle","xs","Card","boxShadow","Body","cursor","Loading","scope","data","fullName","email","phoneNumber","OverlayTrigger","placement","overlay","Tooltip","id","message","slice","height","Pagination"],"sourceRoot":""}