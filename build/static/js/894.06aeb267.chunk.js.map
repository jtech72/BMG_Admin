{"version":3,"file":"static/js/894.06aeb267.chunk.js","mappings":"uSAUA,MA+LA,EA/LuBA,KAAO,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACzB,MAAMC,GAAQC,EAAAA,EAAAA,KAAaC,GAAUA,IAC/BC,GAAWC,EAAAA,EAAAA,OACVC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,IAC/BC,EAAmB,OAALR,QAAK,IAALA,GAAwB,QAAnBP,EAALO,EAAOS,yBAAiB,IAAAhB,GAAa,QAAbC,EAAxBD,EAA0BiB,mBAAW,IAAAhB,OAAhC,EAALA,EAAuCiB,SACrDC,EAAoB,OAALZ,QAAK,IAALA,GAA0B,QAArBL,EAALK,EAAOa,2BAAmB,IAAAlB,GAAa,QAAbC,EAA1BD,EAA4Be,mBAAW,IAAAd,OAAlC,EAALA,EAAyCkB,OACxDC,EAAsB,OAALf,QAAK,IAALA,GAAwB,QAAnBH,EAALG,EAAOS,yBAAiB,IAAAZ,OAAnB,EAALA,EAA0BmB,QAG3CC,IAFOC,EAAAA,EAAAA,MAEa,OAALlB,QAAK,IAALA,GAAwB,QAAnBF,EAALE,EAAOS,yBAAiB,IAAAX,GAAa,QAAbC,EAAxBD,EAA0BY,mBAAW,IAAAX,OAAhC,EAALA,EAAuCoB,eACrDC,EAAWC,IAAgBd,EAAAA,EAAAA,UAAS,IACpCe,EAAUC,IAAehB,EAAAA,EAAAA,UAAS,KAClCiB,EAAYC,IAAiBlB,EAAAA,EAAAA,UAASmB,KAAKC,KAAKV,EAAeK,KAEtEM,EAAAA,EAAAA,YAAU,KACNH,EAAcC,KAAKC,KAAKV,EAAeK,GAAU,GAClD,CAACL,EAAcK,KAElBM,EAAAA,EAAAA,YAAU,KACe,MAAjBhB,GACAT,GAAS0B,EAAAA,EAAAA,IAAiB,CAAEC,MAAOR,EAAUS,KAAMX,KAEvDjB,GAAS0B,EAAAA,EAAAA,IAAiB,CAAEC,MAAOR,EAAUS,KAAMX,IAAa,GACjE,CAACjB,EAAUS,EAAcQ,EAAWE,EAAUjB,IAEjD,MAAM2B,EAAuBlB,IACzB,OAAc,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQmB,eACZ,IAAK,UAAW,MAAO,YACvB,IAAK,WAAY,MAAO,UACxB,IAAK,cAAe,MAAO,UAC3B,IAAK,eAAgB,MAAO,SAC5B,QAAS,MAAO,OACpB,EAGJ,OACIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACNC,gBAAiB,CACb,CAAEC,MAAO,WAAYC,KAAM,qBAC3B,CACID,MAAO,iBACPC,KAAM,oBACNC,QAAQ,IAGhBC,MAAO,oBAEXN,EAAAA,EAAAA,KAACO,EAAAA,EAAG,CAAAR,UACAC,EAAAA,EAAAA,KAACQ,EAAAA,EAAG,CAACC,GAAI,GAAGV,UACRC,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACDC,MAAO,CAAEC,UAAW,sIAAuIb,UAE3JF,EAAAA,EAAAA,MAACa,EAAAA,EAAKG,KAAI,CAACC,UAAU,cAAaf,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAKc,UAAU,yDAAwDf,UACnEF,EAAAA,EAAAA,MAAA,QAAMiB,UAAU,uCAAsCf,SAAA,CAAC,kBACnCnB,GAAgB,OAoBvCF,GACGsB,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,KAACe,EAAAA,GAAO,OAGZf,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACK5B,IAA0B,OAAXA,QAAW,IAAXA,OAAW,EAAXA,EAAa6C,QAAS,GAElChB,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,KAAA,OAAKc,UAAU,mBAAkBf,UAC7BF,EAAAA,EAAAA,MAAA,SAAOiB,UAAU,gCAA+Bf,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,SAAAD,UACIF,EAAAA,EAAAA,MAAA,MAAIiB,UAAU,cAAcH,MAAO,CAAEM,MAAO,WAAYlB,SAAA,EACpDC,EAAAA,EAAAA,KAAA,MAAIkB,MAAM,MAAKnB,UAACC,EAAAA,EAAAA,KAAA,KAAGc,UAAU,qBAC7Bd,EAAAA,EAAAA,KAAA,MAAIkB,MAAM,MAAKnB,SAAC,cAChBC,EAAAA,EAAAA,KAAA,MAAIkB,MAAM,MAAKnB,SAAC,WAChBC,EAAAA,EAAAA,KAAA,MAAIkB,MAAM,MAAKnB,SAAC,gBAChBC,EAAAA,EAAAA,KAAA,MAAIkB,MAAM,MAAKnB,SAAC,YAChBC,EAAAA,EAAAA,KAAA,MAAIkB,MAAM,MAAKnB,SAAC,qBAGxBC,EAAAA,EAAAA,KAAA,SAAAD,SACgB,OAAX5B,QAAW,IAAXA,OAAW,EAAXA,EAAagD,KAAI,CAACC,EAAMC,KAAK,IAAAC,EAAAC,EAAA,OAC1B1B,EAAAA,EAAAA,MAAA,MAEIiB,UAAU,gCAA+Bf,SAAA,EACzCC,EAAAA,EAAAA,KAAA,MAAIkB,MAAM,MAAKnB,SAAEsB,EAAQ,KAEzBrB,EAAAA,EAAAA,KAAA,MAAIc,UAAU,yBAAwBf,SAC7B,OAAJqB,QAAI,IAAJA,GAAAA,EAAMI,UACHxB,EAAAA,EAAAA,KAACyB,EAAAA,EAAc,CACXC,UAAU,OACVC,SACI3B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAO,CAACC,GAAG,kBAAiB9B,SAAC,kBAEnBA,UACfF,EAAAA,EAAAA,MAACiC,EAAAA,GAAI,CAACnB,MAAO,CAAEoB,OAAQ,UAAWd,MAAO,WACrCe,YAAcC,GAAMA,EAAEC,OAAOvB,MAAMM,MAAQ,kBAC3CkB,WAAaF,GAAMA,EAAEC,OAAOvB,MAAMM,MAAQ,UAAWmB,GAAI,eAAmB,OAAJhB,QAAI,IAAJA,OAAI,EAAJA,EAAMiB,MAAOxE,MAAOuD,EAAKrB,SAAA,CAAM,OAAJqB,QAAI,IAAJA,OAAI,EAAJA,EAAMI,SAAS,UAG1HxB,EAAAA,EAAAA,KAAA,QAAMc,UAAU,4CAA2Cf,SAAC,WAKpEC,EAAAA,EAAAA,KAAA,MAAIc,UAAU,oBAAmBf,SACxB,OAAJqB,QAAI,IAAJA,GAAU,QAANE,EAAJF,EAAMkB,YAAI,IAAAhB,GAAVA,EAAYiB,OACT1C,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAW,OAAJqB,QAAI,IAAJA,GAAU,QAANG,EAAJH,EAAMkB,YAAI,IAAAf,OAAN,EAAJA,EAAYgB,MAAM,QAEzBvC,EAAAA,EAAAA,KAAA,QAAMc,UAAU,4CAA2Cf,SAAC,WAKpEC,EAAAA,EAAAA,KAAA,MAAIc,UAAU,uBAAuBH,MAAO,CAAEoB,OAAQ,WAAYhC,SACzD,OAAJqB,QAAI,IAAJA,GAAAA,EAAMoB,WACH3C,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAW,OAAJqB,QAAI,IAAJA,OAAI,EAAJA,EAAMoB,UAAU,QAEvBxC,EAAAA,EAAAA,KAAA,QAAMc,UAAU,4CAA2Cf,SAAC,WAKpEC,EAAAA,EAAAA,KAAA,MAAIc,UAAU,uBAAsBf,UAChCC,EAAAA,EAAAA,KAACyC,EAAAA,EAAK,CACFC,MAAI,EACJC,GAAIhD,EAAwB,OAAJyB,QAAI,IAAJA,OAAI,EAAJA,EAAM3C,QAC9BqC,UAAU,4BACVH,MAAO,CAAEiC,SAAU,WAAY7C,UAE1B,OAAJqB,QAAI,IAAJA,OAAI,EAAJA,EAAM3C,SAAU,WAGzBuB,EAAAA,EAAAA,KAAA,MAAIc,UAAU,oBAAoBH,MAAO,CAAEoB,OAAQ,WAAYhC,SACtD,OAAJqB,QAAI,IAAJA,GAAAA,EAAMyB,WACHhD,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EAAO+C,EAAAA,EAAAA,GAAe,OAAJ1B,QAAI,IAAJA,OAAI,EAAJA,EAAMyB,WAAW,QAEnC7C,EAAAA,EAAAA,KAAA,QAAMc,UAAU,4CAA2Cf,SAAC,YAtD/DsB,EA2DJ,cAOzBrB,EAAAA,EAAAA,KAAA,OACIc,UAAU,+DACVH,MAAO,CAAEoC,OAAQ,QAAShD,UAC1BC,EAAAA,EAAAA,KAAA,QAAMc,UAAU,OAAMf,SAAC,2BAOvCC,EAAAA,EAAAA,KAACgD,EAAAA,EAAU,CACPjE,UAAWA,EACXE,SAAUA,EACVE,WAAYA,EACZH,aAAcA,EACdiE,iBAAkB/D,eAMvC,C,kCCrMJ,MAAM4D,EAAcI,IACvB,IAAKA,EAAY,MAAO,GAGxB,MAAMC,EAAcD,EAAWE,QAAQ,6BAA8B,kBAE/DC,EAAO,IAAIC,KAAKH,GACtB,OAAII,MAAMF,GAAc,eAEjBA,EAAKG,eAAe,QAAS,CAChCC,QAAS,QACTC,MAAO,QACPC,IAAK,UACLC,KAAM,UACNC,KAAM,UACNC,OAAQ,UACRC,QAAQ,GACV,C,sFCXN,MAAMtB,EAAqBuB,EAAAA,YAAiB,CAAAC,EAQzCC,KAAQ,IARkC,SAC3CC,EAAQ,GACRxB,EAAK,UAAS,KACdD,GAAO,EAAK,KACZ0B,EAAI,UACJtD,EACAuD,GAAIC,EAAY,UACbC,GACJN,EACC,MAAMO,GAASC,EAAAA,EAAAA,IAAmBN,EAAU,SAC5C,OAAoBnE,EAAAA,EAAAA,KAAKsE,EAAW,CAClCJ,IAAKA,KACFK,EACHzD,UAAW4D,IAAW5D,EAAW0D,EAAQ9B,GAAQ,eAAgB0B,GAAQ,QAAQA,IAAQzB,GAAM,MAAMA,MACrG,IAEJF,EAAMkC,YAAc,QACpB,S,mECpBA,MAgHA,EAhHmBV,IAA0E,IAAzE,UAAElF,EAAS,SAAEE,EAAQ,WAAEE,EAAU,aAAEH,EAAY,iBAAEiE,GAAkBgB,EAQnF,OAPA1E,EAAAA,EAAAA,YAAU,KAEFR,EAAYI,GACZH,EAAaK,KAAKuF,IAAI,EAAGzF,GAC7B,GACD,CAACJ,EAAWI,EAAYH,KAGvBa,EAAAA,EAAAA,MAAA,OAAKiB,UAAU,qDAAoDf,SAAA,EAE/DF,EAAAA,EAAAA,MAAA,OAAKiB,UAAU,sBAAqBf,SAAA,EAChCC,EAAAA,EAAAA,KAAA,SAAOc,UAAU,OAAMf,SAAC,eACxBC,EAAAA,EAAAA,KAAA,UACI6E,MAAO5F,EACP6F,SAAW7C,IACP,MAAM8C,EAAUC,OAAO/C,EAAEC,OAAO2C,OAChC5B,EAAiB8B,GACjB/F,EAAa,EAAE,EAEnB8B,UAAU,oCAAmCf,SAC5C,CAAC,GAAI,GAAI,GAAI,KAAKoB,KAAK8D,IACpBjF,EAAAA,EAAAA,KAAA,UAAmB6E,MAAOI,EAAKlF,SAC1BkF,GADQA,WAQzBpF,EAAAA,EAAAA,MAAA,QAAMiB,UAAU,OAAMf,SAAA,CAAC,OACd,KACLF,EAAAA,EAAAA,MAAA,UAAAE,SAAA,CACKhB,EAAU,OAAKI,SAKxBa,EAAAA,EAAAA,KAAA,SAAAD,SAAO,kBACPC,EAAAA,EAAAA,KAAA,SACIkF,KAAK,SACLC,YAAa,GAAGpG,IAChBqG,IAAI,IACJR,IAAKzF,EACL2F,SAAW7C,IACP,MAAMoD,EAAcL,OAAO/C,EAAEC,OAAO2C,OAChCQ,GAAe,GAAKA,GAAelG,GACnCH,EAAaqG,EACjB,EAEJvE,UAAU,mCACVH,MAAO,CAAE2E,MAAO,WAIpBzF,EAAAA,EAAAA,MAAA,MAAIiB,UAAU,kFAAiFf,SAAA,CAE1FhB,EAAY,IACTiB,EAAAA,EAAAA,KAAA,MAAIc,UAAU,YAAYyE,QAASA,IAAMvG,EAAaD,EAAY,GAAGgB,UACjEC,EAAAA,EAAAA,KAAC8B,EAAAA,GAAI,CAACM,GAAG,IAAItB,UAAU,YAAWf,SAAC,eAO1CyF,MAAMC,KAAK,CAAEzE,OAAQ7B,IAAcgC,KAAI,CAACuE,EAAGC,KACxC,MAAMjG,EAAOiG,EAAI,EACXC,EAAgBlG,IAASX,EAI/B,OAAII,GAAc,GAHIO,GAAQX,EAAY,GAAKW,GAAQX,EAAY,IACvC,IAATW,GAAcA,IAASP,IAIlCa,EAAAA,EAAAA,KAAA,MAEIc,UAAW,cAAa8E,EAAgB,SAAW,IACnDL,QAASA,IAAMvG,EAAaU,GAAMK,UAClCC,EAAAA,EAAAA,KAAC8B,EAAAA,GAAI,CAACM,GAAG,IAAItB,UAAU,YAAWf,SAC7BL,KAJAA,GASH,IAATA,GAAcX,GAAa,GAC3BW,IAASP,EAAa,GAAKJ,GAAaI,EAAa,GAGlDa,EAAAA,EAAAA,KAAA,MAAec,UAAU,qBAAoBf,UACzCC,EAAAA,EAAAA,KAAC8B,EAAAA,GAAI,CAACM,GAAG,IAAItB,UAAU,iBAAgBf,SAAC,SADnCL,GAQV,IAAI,IAIdX,EAAYI,IACTa,EAAAA,EAAAA,KAAA,MAAIc,UAAU,YAAYyE,QAASA,IAAMvG,EAAaD,EAAY,GAAGgB,UACjEC,EAAAA,EAAAA,KAAC8B,EAAAA,GAAI,CAACM,GAAG,IAAItB,UAAU,YAAWf,SAAC,gBAM7C,C,qFC7Fd,MA6BA,EA7BmBwE,IAEXvE,EAAAA,EAAAA,KAACO,EAAAA,EAAG,CAAAR,UACAC,EAAAA,EAAAA,KAACQ,EAAAA,EAAG,CAAAT,UACAF,EAAAA,EAAAA,MAAA,OAAKiB,UAAU,iBAAgBf,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKc,UAAU,mBAAkBf,UAC7BF,EAAAA,EAAAA,MAACgG,EAAAA,EAAU,CAACC,UAAW,CAAEhF,UAAW,OAAQf,SAAA,EACxCC,EAAAA,EAAAA,KAAC6F,EAAAA,EAAWE,KAAI,CAACC,KAAK,IAAGjG,SAAC,cAEzBwE,EAAMrE,gBAAgBiB,KAAI,CAAC8E,EAAM5E,IACvB4E,EAAK5F,QACRL,EAAAA,EAAAA,KAAC6F,EAAAA,EAAWE,KAAI,CAAC1F,QAAM,EAAaM,MAAO,CAAEM,MAAO,WAAYlB,SAC3DkG,EAAK9F,OADmBkB,IAI7BrB,EAAAA,EAAAA,KAAC6F,EAAAA,EAAWE,KAAI,CAAaC,KAAMC,EAAK7F,KAAKL,SACxCkG,EAAK9F,OADYkB,WAOtCrB,EAAAA,EAAAA,KAAA,MAAIc,UAAU,aAAaH,MAAO,CAAEM,MAAO,WAAYlB,SAAEwE,EAAMjE,c","sources":["pages/bmg/help&support/Helpandsupport.js","helpers/Functions.js","../node_modules/react-bootstrap/esm/Badge.js","helpers/Pagination.js","helpers/PageTitle.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Row, Col, Card, Badge, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PageTitle from '../../../helpers/PageTitle';\nimport { getTicketsAction } from '../../../redux/actions';\nimport { Loading } from '../../../helpers/loader/Loading';\nimport Pagination from '../../../helpers/Pagination'\nimport { getUserFromSession } from '../../../helpers/api/apiCore';\nimport { Link } from 'react-router-dom';\nimport { formatDate } from '../../../helpers/Functions';\nconst HelpAndSupport = () => {\n    const store = useSelector((state) => state);\n    const dispatch = useDispatch();\n    const [search, setSearch] = useState('');\n    const SupportData = store?.getTicketsReducer?.supportData?.response;\n    const createStatus = store?.createTicketReducer?.supportData?.status\n    const SupportLoading = store?.getTicketsReducer?.loading\n    const user = getUserFromSession()\n\n    const TotalRecords = store?.getTicketsReducer?.supportData?.totalRecords;\n    const [pageIndex, setPageIndex] = useState(1);\n    const [pageSize, setPageSize] = useState(10);\n    const [totalPages, setTotalPages] = useState(Math.ceil(TotalRecords / pageSize));\n\n    useEffect(() => {\n        setTotalPages(Math.ceil(TotalRecords / pageSize));\n    }, [TotalRecords, pageSize]);\n\n    useEffect(() => {\n        if (createStatus === 200) {\n            dispatch(getTicketsAction({ limit: pageSize, page: pageIndex }));\n        }\n        dispatch(getTicketsAction({ limit: pageSize, page: pageIndex }));\n    }, [dispatch, createStatus, pageIndex, pageSize, search]);\n\n    const getStatusBadgeColor = (status) => {\n        switch (status?.toLowerCase()) {\n            case 'pending': return 'secondary';\n            case 'resolved': return 'success';\n            case 'in progress': return 'warning';\n            case 'not feasible': return 'danger';\n            default: return 'info';\n        }\n    };\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Settings', path: '/bmg/help-support' },\n                    {\n                        label: 'Help & Support',\n                        path: '/bmg/help-support',\n                        active: true,\n                    },\n                ]}\n                title={'Help & Support'}\n            />\n            <Row>\n                <Col xs={12}>\n                    <Card\n                        style={{ boxShadow: 'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset' }}\n                    >\n                        <Card.Body className=\"text-center\">\n                            <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                                <span className=\"px-3 py-1 bg-dark text-light rounded\">\n                                    Total Tickets: {TotalRecords || 0}\n                                </span>\n                                {/* <div className=\"d-flex\">\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control w-auto me-1\"\n                                        placeholder=\"Search...\"\n                                        value={search}\n                                        onChange={(e) => setSearch(e.target.value)}\n                                    />\n                                    {search && (\n                                        <i\n                                            className=\"mdi mdi-backspace-outline text-danger fs-3\"\n                                            onClick={() => setSearch(\"\")}\n                                            style={{ cursor: \"pointer\" }}\n                                        ></i>\n                                    )}\n                                </div> */}\n                            </div>\n\n                            {SupportLoading ? (\n                                <>\n                                    <Loading />\n                                </>\n                            ) : (\n                                <>\n                                    {SupportData && SupportData?.length > 0 ? (\n\n                                        <>\n                                            <div className=\"table-responsive\">\n                                                <table className=\"table table-striped bg-white \">\n                                                    <thead>\n                                                        <tr className=\"text-nowrap\" style={{ color: '#703133' }}>\n                                                            <th scope=\"col\"><i className=\"mdi mdi-merge\"></i></th>\n                                                            <th scope=\"col\">Ticket #</th>\n                                                            <th scope=\"col\">Email</th>\n                                                            <th scope=\"col\">Issue Type</th>\n                                                            <th scope=\"col\">Status</th>\n                                                            <th scope=\"col\">Created On</th>\n                                                        </tr>\n                                                    </thead>\n                                                    <tbody>\n                                                        {SupportData?.map((data, index) => (\n                                                            <tr\n                                                                key={index}\n                                                                className=\"text-dark fw-bold text-nowrap\">\n                                                                <th scope=\"row\">{index + 1}</th>\n\n                                                                <td className='text-uppercase fw-bold'>\n                                                                    {data?.ticketId ? (\n                                                                        <OverlayTrigger\n                                                                            placement=\"left\"\n                                                                            overlay={\n                                                                                <Tooltip id=\"overlay-example\">\n                                                                                    View Detail's\n                                                                                </Tooltip>}>\n                                                                            <Link style={{ cursor: 'pointer', color: 'crimson' }}\n                                                                                onMouseOver={(e) => e.target.style.color = 'rgb(10 207 151)'}\n                                                                                onMouseOut={(e) => e.target.style.color = 'crimson'} to={`/bmg/ticket/${data?._id}`} state={data}>{data?.ticketId} </Link>\n                                                                        </OverlayTrigger>\n                                                                    ) : (\n                                                                        <span className=\"d-flex text-danger justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n                                                                <td className='fw-bold text-info'>\n                                                                    {data?.user?.email ? (\n                                                                        <span>{data?.user?.email} </span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex text-danger justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n                                                                <td className='fw-bold text-primary' style={{ cursor: 'pointer' }}>\n                                                                    {data?.issueType ? (\n                                                                        <span>{data?.issueType} </span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex text-danger justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n                                                                <td className='fw-bold text-warning'>\n                                                                    <Badge\n                                                                        pill\n                                                                        bg={getStatusBadgeColor(data?.status)}\n                                                                        className=\"px-3 py-2 text-capitalize\"\n                                                                        style={{ fontSize: '0.75rem' }}\n                                                                    >\n                                                                        {data?.status || 'N/A'}\n                                                                    </Badge>\n                                                                </td>\n                                                                <td className='fw-bold text-dark' style={{ cursor: 'pointer' }}>\n                                                                    {data?.createdAt ? (\n                                                                        <span>{formatDate(data?.createdAt)} </span>\n                                                                    ) : (\n                                                                        <span className=\"d-flex text-danger justify-content-center\">\n                                                                            N/A\n                                                                        </span>\n                                                                    )}\n                                                                </td>\n                                                            </tr>\n                                                        ))}\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </>\n                                    ) : (\n                                        <div\n                                            className=\"text-center d-flex align-items-center justify-content-center\"\n                                            style={{ height: '30vh' }}>\n                                            <code className=\"fs-4\">\n                                                No Tickets found.\n                                            </code>\n                                        </div>\n                                    )}\n                                </>\n                            )}\n                            <Pagination\n                                pageIndex={pageIndex}\n                                pageSize={pageSize}\n                                totalPages={totalPages}\n                                setPageIndex={setPageIndex}\n                                onChangePageSize={setPageSize}\n                            />\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row >\n        </>\n    )\n}\n\nexport default HelpAndSupport\n","export const formatDate = (dateString) => {\n    if (!dateString) return '';\n\n    // Remove duplicate T00:00:00 or fix invalid date formats\n    const cleanedDate = dateString.replace(/T00:00:00\\.000Z*T00:00:00$/, 'T00:00:00.000Z');\n\n    const date = new Date(cleanedDate);\n    if (isNaN(date)) return 'Invalid Date';\n\n    return date.toLocaleString('en-US', {\n        weekday: 'short', // \"Thu\"\n        month: 'short', // \"Feb\"\n        day: '2-digit', // \"27\"\n        year: 'numeric', // \"2025\"\n        hour: '2-digit', // \"12\"\n        minute: '2-digit', // \"00\"\n        hour12: true, // \"AM/PM\"\n    });\n};\n","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Badge = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  bg = 'primary',\n  pill = false,\n  text,\n  className,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, pill && `rounded-pill`, text && `text-${text}`, bg && `bg-${bg}`)\n  });\n});\nBadge.displayName = 'Badge';\nexport default Badge;","import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom'; // Assuming you are using React Router\n\nconst Pagination = ({ pageIndex, pageSize, totalPages, setPageIndex, onChangePageSize }) => {\n    useEffect(() => {\n        // Ensure pageIndex stays within bounds when totalPages changes\n        if (pageIndex > totalPages) {\n            setPageIndex(Math.max(1, totalPages)); // Keep in valid range\n        }\n    }, [pageIndex, totalPages, setPageIndex]);\n\n    return (\n        <div className=\"d-lg-flex align-items-center text-center pb-1 pt-2\">\n            {/* Page Size Selection */}\n            <div className=\"d-inline-block me-3\">\n                <label className=\"me-1\">Display :</label>\n                <select\n                    value={pageSize}\n                    onChange={(e) => {\n                        const newSize = Number(e.target.value);\n                        onChangePageSize(newSize);\n                        setPageIndex(1); // Reset to first page\n                    }}\n                    className=\"form-select d-inline-block w-auto\">\n                    {[10, 20, 50, 100].map((size) => (\n                        <option key={size} value={size}>\n                            {size}\n                        </option>\n                    ))}\n                </select>\n            </div>\n\n            {/* Page Info */}\n            <span className=\"me-3\">\n                Page{' '}\n                <strong>\n                    {pageIndex} of {totalPages}\n                </strong>\n            </span>\n\n            {/* Go to Page Input */}\n            <label>Go to page: </label>\n            <input\n                type=\"number\"\n                placeholder={`${pageIndex}`}\n                min=\"1\"\n                max={totalPages}\n                onChange={(e) => {\n                    const enteredPage = Number(e.target.value);\n                    if (enteredPage >= 1 && enteredPage <= totalPages) {\n                        setPageIndex(enteredPage);\n                    }\n                }}\n                className=\"form-control ms-1 d-inline-block\"\n                style={{ width: '80px' }}\n            />\n\n            {/* Pagination Controls */}\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0 pe-4\">\n                {/* Previous Button */}\n                {pageIndex > 1 && (\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex - 1)}>\n                        <Link to=\"#\" className=\"page-link\">\n                            Previous\n                        </Link>\n                    </li>\n                )}\n\n                {/* Page Number Buttons */}\n                {Array.from({ length: totalPages }).map((_, i) => {\n                    const page = i + 1; // Adjust index to start from 1\n                    const isCurrentPage = page === pageIndex;\n                    const isNearCurrent = page >= pageIndex - 1 && page <= pageIndex + 1;\n                    const isEdgePage = page === 1 || page === totalPages;\n\n                    if (totalPages <= 5 || isNearCurrent || isEdgePage) {\n                        return (\n                            <li\n                                key={page}\n                                className={`page-item ${isCurrentPage ? 'active' : ''}`}\n                                onClick={() => setPageIndex(page)}>\n                                <Link to=\"#\" className=\"page-link\">\n                                    {page}\n                                </Link>\n                            </li>\n                        );\n                    } else if (\n                        (page === 2 && pageIndex >= 5) ||\n                        (page === totalPages - 1 && pageIndex <= totalPages - 4)\n                    ) {\n                        return (\n                            <li key={page} className=\"page-item disabled\">\n                                <Link to=\"#\" className=\"page-link px-0\">\n                                    ...\n                                </Link>\n                            </li>\n                        );\n                    }\n\n                    return null;\n                })}\n\n                {/* Next Button */}\n                {pageIndex < totalPages && (\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex + 1)}>\n                        <Link to=\"#\" className=\"page-link\">\n                            Next\n                        </Link>\n                    </li>\n                )}\n            </ul>\n        </div>\n    );\n};\n\nexport default Pagination;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Dashboard</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index} style={{ color: '#703133' }}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path} >\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\" style={{ color: '#703133' }}>{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n"],"names":["HelpAndSupport","_store$getTicketsRedu","_store$getTicketsRedu2","_store$createTicketRe","_store$createTicketRe2","_store$getTicketsRedu3","_store$getTicketsRedu4","_store$getTicketsRedu5","store","useSelector","state","dispatch","useDispatch","search","setSearch","useState","SupportData","getTicketsReducer","supportData","response","createStatus","createTicketReducer","status","SupportLoading","loading","TotalRecords","getUserFromSession","totalRecords","pageIndex","setPageIndex","pageSize","setPageSize","totalPages","setTotalPages","Math","ceil","useEffect","getTicketsAction","limit","page","getStatusBadgeColor","toLowerCase","_jsxs","_Fragment","children","_jsx","PageTitle","breadCrumbItems","label","path","active","title","Row","Col","xs","Card","style","boxShadow","Body","className","Loading","length","color","scope","map","data","index","_data$user","_data$user2","ticketId","OverlayTrigger","placement","overlay","Tooltip","id","Link","cursor","onMouseOver","e","target","onMouseOut","to","_id","user","email","issueType","Badge","pill","bg","fontSize","createdAt","formatDate","height","Pagination","onChangePageSize","dateString","cleanedDate","replace","date","Date","isNaN","toLocaleString","weekday","month","day","year","hour","minute","hour12","React","_ref","ref","bsPrefix","text","as","Component","props","prefix","useBootstrapPrefix","classNames","displayName","max","value","onChange","newSize","Number","size","type","placeholder","min","enteredPage","width","onClick","Array","from","_","i","isCurrentPage","Breadcrumb","listProps","Item","href","item"],"sourceRoot":""}