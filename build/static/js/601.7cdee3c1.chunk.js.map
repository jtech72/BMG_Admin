{"version":3,"file":"static/js/601.7cdee3c1.chunk.js","mappings":"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","sources":["components/ProfileDropdown.js","helpers/ThemeToggle.js","layouts/Topbar.js"],"sourcesContent":["// @flow\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Dropdown } from 'react-bootstrap';\nimport classNames from 'classnames';\n\ntype ProfileMenuItem = {\n    label: string,\n    icon: string,\n    redirectTo: string,\n};\n\ntype ProfileDropdownProps = {\n    menuItems: Array<ProfileMenuItem>,\n    profilePic?: any,\n    username: string,\n    userTitle?: string,\n};\n\ntype ProfileDropdownState = {\n    dropdownOpen?: boolean,\n};\n\nconst ProfileDropdown = (props: ProfileDropdownProps, state: ProfileDropdownState): React$Element<any> => {\n    const profilePic = props.profilePic || null;\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n\n    /*\n     * toggle profile-dropdown\n     */\n    const toggleDropdown = () => {\n        setDropdownOpen(!dropdownOpen);\n    };\n\n    return (\n        <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\n            <Dropdown.Toggle\n                variant=\"link\"\n                id=\"dropdown-profile\"\n                as={Link}\n                to=\"#\"\n                onClick={toggleDropdown}\n                className=\"nav-link dropdown-toggle nav-user arrow-none me-0\">\n                <span className=\"account-user-avatar\">\n                    <img src={profilePic} className=\"rounded-circle\" alt=\"user\" />\n                </span>\n                <span>\n                    <span className=\"account-user-name\">{props.username}</span>\n                    <span className=\"account-position\">{props.userTitle}</span>\n                </span>\n            </Dropdown.Toggle>\n            <Dropdown.Menu align={'end'} className=\"dropdown-menu-animated topbar-dropdown-menu profile-dropdown\">\n                <div onClick={toggleDropdown}>\n                    {/* <div className=\"dropdown-header noti-title\">\n                        <h6 className=\"text-overflow m-0\">Welcome !</h6>\n                    </div> */}\n                    {props.menuItems.map((item, i) => {\n                        return (\n                            <Link to={item.redirectTo} className=\"dropdown-item notify-item\" key={i + '-profile-menu'}>\n                                <i className={classNames(item.icon, 'me-1')}></i>\n                                <span>{item.label}</span>\n                            </Link>\n                        );\n                    })}\n                </div>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nexport default ProfileDropdown;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { changeLayoutColor, changeSidebarTheme } from '../redux/actions'; \nimport * as layoutConstants from '../constants/layout'; \nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nconst ThemeToggle = () => {\n    const dispatch = useDispatch();\n    const [colorMode, setColorMode] = useState(\n        localStorage.getItem('colorMode') || layoutConstants.LAYOUT_COLOR_LIGHT\n    );\n\n    const applyColorScheme = (mode) => {\n        if (mode === layoutConstants.LAYOUT_COLOR_DARK) {\n            dispatch(changeLayoutColor(layoutConstants.LAYOUT_COLOR_DARK));\n            dispatch(changeSidebarTheme(layoutConstants.LEFT_SIDEBAR_THEME_DARK));\n        } else {\n            dispatch(changeLayoutColor(layoutConstants.LAYOUT_COLOR_LIGHT));\n            dispatch(changeSidebarTheme(layoutConstants.LEFT_SIDEBAR_THEME_LIGHT));\n        }\n    };\n\n    const handleToggle = () => {\n        const newMode =\n            colorMode === layoutConstants.LAYOUT_COLOR_LIGHT\n                ? layoutConstants.LAYOUT_COLOR_DARK\n                : layoutConstants.LAYOUT_COLOR_LIGHT;\n\n        setColorMode(newMode);\n        localStorage.setItem('colorMode', newMode);\n        applyColorScheme(newMode);\n    };\n\n    useEffect(() => {\n        applyColorScheme(colorMode);\n    }, [colorMode]);\n\n    return (\n        <div className=\"d-flex align-items-center justify-content-center\">\n            {colorMode === layoutConstants.LAYOUT_COLOR_LIGHT ? (\n                <>\n                    <OverlayTrigger\n                        placement=\"left\"\n                        overlay={\n                            <Tooltip id=\"overlay-example\">\n                                Dark Mode\n                            </Tooltip>\n                        }>\n\n                        <i className=\"mdi mdi-moon-waning-crescent fs-4 p-0 fw-bold\" onClick={handleToggle}></i>\n                    </OverlayTrigger>\n                </>\n            ) : (\n                <>\n                    <OverlayTrigger\n                        placement=\"left\"\n                        overlay={\n                            <Tooltip id=\"overlay-example\">\n                                Light Mode\n                            </Tooltip>\n                        }>\n\n                        <i className=\"mdi mdi-white-balance-sunny text-warning fs-4 p-0 fw-bold\" onClick={handleToggle}></i>\n                    </OverlayTrigger>\n                </>\n            )}\n\n        </div>\n    );\n};\n\nexport default ThemeToggle;","// @flow\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport classNames from 'classnames';\nimport { Logo,BmgLogo } from '../helpers/image'\n// actions\nimport { showRightSidebar, changeSidebarType } from '../redux/actions';\n\n// components\nimport ProfileDropdown from '../components/ProfileDropdown';\n\n//constants\nimport * as layoutConstants from '../constants/layout';\nimport ThemeToggle from '../helpers/ThemeToggle';\n\n// get the profilemenu\nconst ProfileMenus = [\n    // {\n    //     label: 'My Account',\n    //     icon: 'mdi mdi-account-circle',\n    //     redirectTo: '#',\n    // },\n    // {\n    //     label: 'Settings',\n    //     icon: 'mdi mdi-account-edit',\n    //     redirectTo: '#',\n    // },\n    // {\n    //     label: 'Support',\n    //     icon: 'mdi mdi-lifebuoy',\n    //     redirectTo: '#',\n    // },\n    // {\n    //     label: 'Lock Screen',\n    //     icon: 'mdi mdi-lock-outline',\n    //     redirectTo: '/account/lock-screen',\n    // },\n    {\n        label: 'Logout',\n        icon: 'mdi mdi-logout',\n        redirectTo: '/account/logout',\n    },\n];\n\ntype TopbarProps = {\n    hideLogo?: boolean,\n    navCssClasses?: string,\n    openLeftMenuCallBack?: () => void,\n    topbarDark?: boolean,\n};\n\nconst Topbar = ({ hideLogo, navCssClasses, openLeftMenuCallBack, topbarDark }: TopbarProps): React$Element<any> => {\n    const dispatch = useDispatch();\n\n    const [isopen, setIsopen] = useState(false);\n\n    const navbarCssClasses = navCssClasses || '';\n    const containerCssClasses = !hideLogo ? 'container-fluid' : '';\n\n    const { layoutType, leftSideBarType } = useSelector((state) => ({\n        layoutType: state.Layout.layoutType,\n        leftSideBarType: state.Layout.leftSideBarType,\n    }));\n\n    /**\n     * Toggle the leftmenu when having mobile screen\n     */\n    const handleLeftMenuCallBack = () => {\n        setIsopen((prevState) => !prevState);\n        if (openLeftMenuCallBack) openLeftMenuCallBack();\n\n        switch (layoutType) {\n            case layoutConstants.LAYOUT_VERTICAL:\n                // condition added\n                if (window.innerWidth >= 768) {\n                    if (leftSideBarType === 'fixed' || leftSideBarType === 'scrollable')\n                        dispatch(changeSidebarType(layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED));\n                    if (leftSideBarType === 'condensed')\n                        dispatch(changeSidebarType(layoutConstants.LEFT_SIDEBAR_TYPE_FIXED));\n                }\n                break;\n\n            case layoutConstants.LAYOUT_FULL:\n                if (document.body) {\n                    document.body.classList.toggle('hide-menu');\n                }\n                break;\n            default:\n                break;\n        }\n    };\n\n    /**\n     * Toggles the right sidebar\n     */\n    const handleRightSideBar = () => {\n        dispatch(showRightSidebar());\n    };\n\n    return (\n        <>\n            <div className={classNames('navbar-custom', navbarCssClasses)}>\n                <div className={containerCssClasses}>\n                    {!hideLogo && (\n                        <Link to=\"/\" className=\"topnav-logo\">\n                            <span className=\"topnav-logo-lg\">\n                                <img src={Logo} alt=\"logo\" height=\"70\" />\n                            </span>\n                            <span className=\"topnav-logo-sm\">\n                                <img src={topbarDark ? Logo : Logo} alt=\"logo\" height=\"50\" />\n                            </span>\n                        </Link>\n                    )}\n\n                    <ul className=\"list-unstyled topbar-menu float-end mb-0\">\n                        {/* <li className=\"dropdown notification-list topbar-dropdown d-none d-lg-block\">\n                            <LanguageDropdown />\n                        </li> */}\n                        {/* <li className=\"dropdown notification-list\">\n                            <NotificationDropdown notifications={Notifications} />\n                        </li> */}\n                        {/* <li className=\"dropdown notification-list d-none d-sm-inline-block\">\n                            <AppsDropdown />\n                        </li> */}\n                        {/* <li className=\"notification-list\">\n                            <button\n                                className=\"nav-link dropdown-toggle end-bar-toggle arrow-none btn btn-link shadow-none\"\n                                onClick={handleRightSideBar}>\n                                <i className=\"dripicons-gear noti-icon\"></i>\n                            </button>\n                        </li> */}\n                        {/* <li className=\"dropdown notification-list mt-3 me-3\">\n                            <ThemeToggle/>\n                        </li> */}\n                        <li className=\"dropdown notification-list\">\n                            <ProfileDropdown\n                                profilePic={BmgLogo}\n                                menuItems={ProfileMenus}\n                                username={'BMG Admin'}\n                                userTitle={'Founder'}\n                            />\n                        </li>\n                    </ul>\n\n                    {/* toggle for vertical layout */}\n                    {(layoutType === layoutConstants.LAYOUT_VERTICAL || layoutType === layoutConstants.LAYOUT_FULL) && (\n                        <button className=\"button-menu-mobile open-left\" onClick={handleLeftMenuCallBack}>\n                            <i className=\"mdi mdi-menu\" />\n                        </button>\n                    )}\n\n                    {/* toggle for horizontal layout */}\n                    {layoutType === layoutConstants.LAYOUT_HORIZONTAL && (\n                        <Link\n                            to=\"#\"\n                            className={classNames('navbar-toggle', { open: isopen })}\n                            onClick={handleLeftMenuCallBack}>\n                            <div className=\"lines\">\n                                <span></span>\n                                <span></span>\n                                <span></span>\n                            </div>\n                        </Link>\n                    )}\n\n                    {/* toggle for detached layout */}\n                    {layoutType === layoutConstants.LAYOUT_DETACHED && (\n                        <Link to=\"#\" className=\"button-menu-mobile disable-btn\" onClick={handleLeftMenuCallBack}>\n                            <div className=\"lines\">\n                                <span></span>\n                                <span></span>\n                                <span></span>\n                            </div>\n                        </Link>\n                    )}\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Topbar;\n"],"names":["ProfileDropdown","props","state","profilePic","dropdownOpen","setDropdownOpen","useState","toggleDropdown","_jsxs","Dropdown","show","onToggle","children","Toggle","variant","id","as","Link","to","onClick","className","_jsx","src","alt","username","userTitle","Menu","align","menuItems","map","item","i","redirectTo","classNames","icon","label","ProfileMenus","_ref","hideLogo","navCssClasses","openLeftMenuCallBack","topbarDark","dispatch","useDispatch","isopen","setIsopen","navbarCssClasses","containerCssClasses","layoutType","leftSideBarType","useSelector","Layout","handleLeftMenuCallBack","prevState","layoutConstants","window","innerWidth","changeSidebarType","document","body","classList","toggle","_Fragment","Logo","height","BmgLogo","open"],"sourceRoot":""}